Predicted: [1.5858500003814697, 1.585705280303955, 1.5854332447052002, 1.585453748703003, 1.5854816436767578, 1.5854295492172241, 1.585856556892395, 1.5861258506774902, 1.5855885744094849, 1.5854625701904297, 1.5856294631958008, 1.5854276418685913, 1.5856270790100098, 1.5853965282440186, 1.5859678983688354, 1.5856921672821045, 1.5854129791259766, 1.5858153104782104, 1.5857093334197998, 1.5855886936187744, 1.5908117294311523, 1.5854549407958984, 1.5853989124298096, 1.585425853729248, 1.585988998413086, 1.5855966806411743, 1.5855615139007568, 1.5857834815979004, 1.5855445861816406, 1.5876226425170898, 1.5856082439422607, 1.5854676961898804, 1.585444688796997, 1.5857460498809814, 1.585636019706726, 1.5854309797286987, 1.5873258113861084, 1.5865886211395264, 1.585554599761963, 1.5853993892669678, 1.5857466459274292, 1.5854564905166626, 1.5856256484985352, 1.5855824947357178, 1.5856523513793945, 1.5855525732040405, 1.5860618352890015, 1.585591435432434, 1.5855021476745605, 1.585505723953247, 1.5856267213821411, 1.585550308227539, 1.585620641708374, 1.5854700803756714, 1.5854663848876953, 1.5855977535247803, 1.5860624313354492, 1.585837483406067, 1.5854504108428955, 1.5856120586395264, 1.5856086015701294, 1.5859577655792236, 1.585713505744934, 1.5855975151062012, 1.585424542427063, 1.5854365825653076, 1.586938738822937, 1.585547685623169, 1.58548903465271, 1.5856125354766846, 1.5863544940948486, 1.5854545831680298, 1.5862600803375244, 1.586057186126709, 1.5856674909591675, 1.5854763984680176, 1.585533618927002, 1.585401177406311, 1.5903993844985962, 1.5854098796844482, 1.5856765508651733, 1.5867233276367188, 1.5856972932815552, 1.5854005813598633, 1.5859262943267822, 1.5854640007019043, 1.5859334468841553, 1.5853921175003052, 1.585389256477356, 1.5855162143707275, 1.5854637622833252, 1.5859378576278687, 1.585545539855957, 1.5854887962341309, 1.5863224267959595, 1.5854052305221558, 1.5853921175003052, 1.585434913635254, 1.5861105918884277, 1.585425853729248, 1.5860824584960938, 1.5856796503067017, 1.5853984355926514, 1.5858259201049805, 1.5854216814041138, 1.5854146480560303, 1.5856802463531494, 1.585976481437683, 1.585442066192627, 1.5856943130493164, 1.5854222774505615, 1.5856401920318604, 1.5855143070220947, 1.5854780673980713, 1.586535930633545, 1.5911390781402588, 1.5856598615646362, 1.585500955581665, 1.5858367681503296, 1.586069107055664, 1.589518427848816, 1.585442304611206, 1.5855437517166138, 1.5859496593475342, 1.5858032703399658, 1.5854737758636475, 1.5856541395187378, 1.585507869720459, 1.5857021808624268, 1.5855069160461426, 1.58549165725708, 1.5855821371078491, 1.5856900215148926, 1.5854556560516357, 1.5855004787445068, 1.586742877960205, 1.585714340209961, 1.5855038166046143, 1.585593342781067, 1.5855844020843506, 1.5855600833892822, 1.5859663486480713, 1.5857489109039307, 1.5863134860992432, 1.585894227027893, 1.5855560302734375, 1.5856776237487793, 1.585780143737793, 1.586895227432251, 1.5854817628860474, 1.5856959819793701, 1.5864901542663574, 1.5854346752166748, 1.5854649543762207, 1.5855376720428467, 1.5857036113739014, 1.5869507789611816, 1.5863311290740967, 1.5875287055969238, 1.585523247718811, 1.5853931903839111, 1.5854594707489014, 1.5854575634002686, 1.587515115737915, 1.585444450378418, 1.5856459140777588, 1.585412859916687, 1.5855448246002197, 1.5854909420013428, 1.585841178894043, 1.5855755805969238, 1.5854851007461548, 1.5854971408843994, 1.5854790210723877, 1.5855284929275513, 1.5870126485824585, 1.5857656002044678, 1.5857268571853638, 1.5855765342712402, 1.585617184638977, 1.5855140686035156, 1.585445523262024, 1.585982322692871, 1.5855190753936768, 1.585844874382019, 1.5858415365219116, 1.585524082183838, 1.5854263305664062, 1.5859127044677734, 1.5855283737182617, 1.5855121612548828, 1.5865148305892944, 1.5855696201324463, 1.585768699645996, 1.5857455730438232, 1.5854934453964233, 1.5854301452636719, 1.5854432582855225, 1.5854647159576416, 1.5855941772460938, 1.5856621265411377, 1.585587739944458, 1.5855412483215332, 1.5858947038650513, 1.5903137922286987, 1.585413932800293, 1.5854473114013672, 1.585634708404541, 1.5854216814041138, 1.5854710340499878, 1.5854443311691284, 1.6384520530700684, 1.585856318473816, 1.5855379104614258, 1.5855209827423096, 1.5854955911636353, 1.5854301452636719, 1.5854817628860474, 1.5876134634017944, 1.5854988098144531, 1.5854642391204834, 1.5854771137237549, 1.5854687690734863, 1.5854132175445557, 1.5859901905059814, 1.585679054260254, 1.5854320526123047, 1.585415244102478, 1.5856562852859497, 1.5858640670776367, 1.5854175090789795, 1.5859875679016113, 1.5855400562286377, 1.5855077505111694, 1.5862953662872314, 1.5855398178100586, 1.58562433719635, 1.5854835510253906, 1.5854389667510986, 1.5854583978652954, 1.5858111381530762, 1.5856045484542847, 1.5855406522750854, 1.5856406688690186, 1.5855213403701782, 1.5860093832015991, 1.5854061841964722, 1.5860577821731567, 1.5856904983520508, 1.5854747295379639, 1.585473656654358, 1.5855557918548584, 1.585597276687622, 1.58540678024292, 1.5865243673324585, 1.5854997634887695, 1.5855956077575684, 1.5857198238372803, 1.5855491161346436, 1.585446834564209, 1.5856469869613647, 1.5854814052581787, 1.585763931274414, 1.5856415033340454, 1.5857243537902832, 1.5854833126068115, 1.5854907035827637, 1.5855014324188232, 1.5855827331542969, 1.6712696552276611, 1.5855777263641357, 1.5854214429855347, 1.5865135192871094, 1.5856666564941406, 1.5857373476028442, 1.5854246616363525, 1.5863423347473145, 1.585391879081726, 1.5858588218688965, 1.5876706838607788, 1.5854436159133911, 1.5868359804153442, 1.5856451988220215, 1.585413932800293, 1.5855579376220703, 1.5854779481887817, 1.5854438543319702, 1.5860073566436768, 1.5854651927947998, 1.5855395793914795, 1.5854237079620361, 1.5855844020843506, 1.5855169296264648, 1.5857274532318115, 1.5854883193969727, 1.585503339767456, 1.585586428642273, 1.5855371952056885, 1.5855817794799805, 1.5861824750900269, 1.5854542255401611, 1.5856618881225586, 1.5854132175445557, 1.5860838890075684, 1.5856401920318604, 1.5856618881225586, 1.5855207443237305, 1.585594892501831, 1.5854542255401611, 1.5855052471160889, 1.5854947566986084, 1.58539617061615, 1.5857114791870117, 1.5855164527893066, 1.585460901260376, 1.5856273174285889, 1.585828423500061, 1.587847113609314, 1.585543155670166, 1.5854735374450684, 1.5855329036712646, 1.58556067943573, 1.5857748985290527, 1.5858107805252075, 1.5859034061431885, 1.5857429504394531, 1.587108850479126, 1.5854856967926025, 1.585716724395752, 1.58623206615448, 1.5853999853134155, 1.586738109588623, 1.5863546133041382, 1.585426688194275, 1.5859801769256592, 1.585695743560791, 1.5862494707107544, 1.5854437351226807, 1.585418701171875, 1.5853983163833618, 1.5865399837493896, 1.6469684839248657, 1.5854984521865845, 1.5855154991149902, 1.5854411125183105, 1.5855894088745117, 1.5856355428695679, 1.585395097732544, 1.5855367183685303, 1.5882678031921387, 1.5853941440582275, 1.5854508876800537, 1.5858047008514404, 1.5854641199111938, 1.585595965385437, 1.5861220359802246, 1.5854147672653198, 1.585601568222046, 1.5855478048324585, 1.5864660739898682, 1.5854113101959229, 1.5869288444519043, 1.586299180984497, 1.5856397151947021, 1.5853937864303589, 1.5855226516723633, 1.585580825805664, 1.5854594707489014, 1.5854979753494263, 1.5855681896209717, 1.5857168436050415, 1.5854171514511108, 1.5854368209838867, 1.5864593982696533, 1.5856506824493408, 1.587261438369751, 1.5855910778045654, 1.5855551958084106, 1.5872042179107666, 1.585902214050293, 1.6008617877960205, 1.585836410522461, 1.585805892944336, 1.5868020057678223, 1.5856387615203857, 1.5854992866516113, 1.5854748487472534, 1.585423469543457, 1.5857396125793457, 1.5855886936187744, 1.5854406356811523, 1.5855491161346436, 1.585809588432312, 1.5854649543762207, 1.5857651233673096, 1.585625410079956, 1.5859068632125854, 1.5854625701904297, 1.5854697227478027, 1.5855449438095093, 1.5857104063034058, 1.5857070684432983, 1.5860893726348877, 1.5856773853302002, 1.5854918956756592, 1.5854284763336182, 1.585583209991455, 1.5856199264526367, 1.5856151580810547, 1.5857691764831543, 1.585429072380066, 1.5854854583740234, 1.5860748291015625, 1.58788001537323, 1.585719347000122, 1.5858399868011475, 1.5855977535247803, 1.5854389667510986, 1.585925579071045, 1.585559368133545, 1.585511565208435, 1.5854601860046387, 1.5855517387390137, 1.5856376886367798, 1.5854657888412476, 1.585930347442627, 1.5855679512023926, 1.585499882698059, 1.5924988985061646, 1.5856096744537354, 1.585620641708374, 1.5854558944702148, 1.585502028465271, 1.5855034589767456, 1.5858043432235718, 1.5865509510040283, 1.5857045650482178, 1.5854902267456055, 1.5861642360687256, 1.5856045484542847, 1.5853980779647827, 1.5880622863769531, 1.5854394435882568, 1.5856263637542725, 1.5854747295379639, 1.590936303138733, 1.5857126712799072, 1.5863704681396484, 1.5859477519989014, 1.5856733322143555, 1.5854957103729248, 1.609163761138916, 1.5855950117111206, 1.585648536682129, 1.5855786800384521, 1.5862575769424438, 1.5862128734588623, 1.5854759216308594, 1.5858607292175293, 1.5858232975006104, 1.585766077041626, 1.585922122001648, 1.585904598236084, 1.5856479406356812, 1.5855799913406372, 1.5861295461654663, 1.5855706930160522, 1.5857136249542236, 1.5856019258499146, 1.5854175090789795, 1.5857257843017578, 1.5857336521148682, 1.5854830741882324, 1.5854058265686035, 1.5856249332427979, 1.5857422351837158, 1.5855450630187988, 1.5855119228363037, 1.5858010053634644, 1.5856395959854126, 1.5855464935302734, 1.5855510234832764, 1.5854907035827637, 1.5856335163116455, 1.5854785442352295, 1.585621953010559, 1.58562433719635, 1.5855348110198975, 1.5855733156204224, 1.5858180522918701, 1.585616111755371, 1.5854096412658691, 1.58589506149292, 1.5855991840362549, 1.5862774848937988, 1.5855259895324707, 1.58597993850708, 1.5855309963226318, 1.5855140686035156, 1.5863311290740967]
Actual: [tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([696.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([60.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64)]
MSE: 990.1744462889026
Predicted: [4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002020359039307, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.0020060539245605, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005577087402, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.0020060539245605, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002007007598877, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002011299133301, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002006530761719, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.0020060539245605, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005577087402, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002013683319092, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([32459.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([175.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([196.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([322.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2107009.062151497
Predicted: [6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306269645690918, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306270122528076, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.30626916885376, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306273937225342, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306275367736816, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602]
Actual: [tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7726.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([84.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1014.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([59.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([139.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([65.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10703.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 350156.93248361856
Predicted: [8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331304550170898, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331302642822266, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331304550170898, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331306457519531, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([186.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([97.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1059.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([150.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2380.009605377972
Predicted: [9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260734558105469, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252]
Actual: [tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([366.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([154.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([219.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([153.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64)]
MSE: 505.96828365056393
Predicted: [9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337801933288574, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([222.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([392.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 453.404182804194
Predicted: [8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248962402344, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248962402344, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248962402344, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248962402344, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711]
Actual: [tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([153.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([109.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([97.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([77.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19256.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 741060.6820191985
Predicted: [10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320821762084961, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645]
Actual: [tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1525.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([999.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([591.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2092.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([36472.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2674888.7672682586
Predicted: [10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([217.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12497.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 312001.7585767312
Predicted: [9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([324.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2934.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1623.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([120.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 22620.112175684437
Predicted: [11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([116.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([137.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([30978.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([456.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([366.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([154.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 1918701.831125
Predicted: [12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([196.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([322.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([330.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([418.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 902.554147491743
Predicted: [11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973978996276855, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973978996276855, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973978996276855, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172]
Actual: [tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2764.], dtype=torch.float64), tensor([239.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1201.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1766.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([179.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([90.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([59.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64)]
MSE: 24415.427036155084
Predicted: [13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078]
Actual: [tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([75.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 139.9113307141984
Predicted: [13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([124.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6470.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 83539.40544513351
Predicted: [13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15721.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4181.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([48.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([318.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 528525.7003344602
Predicted: [13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637]
Actual: [tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([448.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1525.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([999.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([591.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64)]
MSE: 7705.719000520331
Predicted: [13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145]
Actual: [tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([366.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([154.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([219.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([153.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 564.7083349285355
Predicted: [13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559]
Actual: [tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([84.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([607.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([463.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([120.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([94.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1299.4480862710805
Predicted: [13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266]
Actual: [tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([679.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([124.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64)]
MSE: 1054.3519753299202
Predicted: [14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([63.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([120.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([324.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2934.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 17445.459686251805
Predicted: [15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795]
Actual: [tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([116.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([679.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1083.0012234678313
Predicted: [14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969]
Actual: [tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([75.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([369.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([87.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([140.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([62.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 478.9226877961592
Predicted: [14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402]
Actual: [tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([721.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([167.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([366.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([226.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([121.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 1568.895689826751
Predicted: [14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707]
Actual: [tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 176.21933642546546
Predicted: [14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([120.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([32459.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 2105480.5128182257
Predicted: [13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([418.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1427.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 4480.004167804925
Predicted: [4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968342781066895, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496779918670654, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.49669885635376, 4.4968390464782715, 4.496786594390869, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837139129639, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496835708618164, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496838569641113, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496836185455322, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496835231781006, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968366622924805, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496837615966797, 4.496837615966797, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496645450592041, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.496838092803955, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496837615966797, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496837139129639, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496833324432373, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837139129639, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496836185455322, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496836185455322, 4.496835231781006, 4.496838569641113, 4.4968390464782715, 4.496837139129639, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496835708618164, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496836185455322, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.49680757522583, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837139129639, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837139129639, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837139129639, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968366622924805, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496734142303467, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496817111968994, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496837139129639, 4.496836185455322, 4.4968390464782715, 4.4968390464782715, 4.496833324432373, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.496837139129639, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496792316436768, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.496838092803955, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.496835231781006, 4.496837615966797, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838569641113]
Actual: [tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([45.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([140.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4560.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 41563.047138290254
Predicted: [6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261362075805664, 6.261361122131348, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261361122131348, 6.261349201202393, 6.261362552642822, 6.261360168457031, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261362075805664, 6.261361598968506, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261361598968506, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261362552642822, 6.261363506317139, 6.261360168457031, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261345863342285, 6.2613630294799805, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261343955993652, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261360168457031, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261361598968506, 6.261363983154297, 6.261362552642822, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261357307434082, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261361598968506, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261362552642822, 6.261362075805664, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363983154297, 6.2613420486450195, 6.2613630294799805, 6.261363506317139, 6.261352062225342, 6.261363983154297, 6.2613630294799805, 6.261363983154297, 6.2613630294799805, 6.261363983154297, 6.261362075805664, 6.261362075805664, 6.261363506317139, 6.2613630294799805, 6.261360168457031, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261343002319336, 6.261362075805664, 6.261363983154297, 6.2613630294799805, 6.261362075805664, 6.261363983154297, 6.261363506317139, 6.261360168457031, 6.2613630294799805, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261340141296387, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261362075805664, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261346817016602, 6.261363506317139, 6.261363506317139, 6.261362552642822, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261361598968506, 6.261363506317139, 6.261363506317139, 6.261362552642822, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261322975158691, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363983154297, 6.2613630294799805, 6.261363983154297, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261361122131348, 6.261357307434082, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261360168457031, 6.261352062225342, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261360168457031, 6.26124382019043, 6.261363983154297, 6.2613630294799805, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261361122131348, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261349678039551, 6.261361122131348, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.2613630294799805, 6.2613630294799805, 6.2613630294799805, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261362552642822, 6.261326789855957, 6.261363506317139, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.2613630294799805, 6.261362075805664, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261344909667969, 6.261363506317139, 6.261326789855957, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261361598968506, 6.2613630294799805, 6.261362075805664, 6.2613630294799805, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261307716369629, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261362552642822, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261362552642822, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261299133300781, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.26113224029541, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363506317139]
Actual: [tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([606.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 760.2694310990357
Predicted: [6.8073835372924805, 6.807384014129639, 6.807382106781006, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807381629943848, 6.8073835372924805, 6.807384014129639, 6.807383060455322, 6.807367324829102, 6.8073835372924805, 6.807384014129639, 6.807377338409424, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807382583618164, 6.807358264923096, 6.807374954223633, 6.8073835372924805, 6.8073835372924805, 6.807382583618164, 6.807382583618164, 6.807378768920898, 6.807369232177734, 6.8073835372924805, 6.807376861572266, 6.8073835372924805, 6.8073835372924805, 6.807369232177734, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807382106781006, 6.8073577880859375, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.807376861572266, 6.807384014129639, 6.807384014129639, 6.807380676269531, 6.807309150695801, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807332992553711, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807379722595215, 6.807381629943848, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807382583618164, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382106781006, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384490966797, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.8073811531066895, 6.8073835372924805, 6.807356834411621, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807376861572266, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.807381629943848, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807374477386475, 6.8073835372924805, 6.8073835372924805, 6.807372093200684, 6.807382106781006, 6.807384014129639, 6.8073835372924805, 6.807380676269531, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384490966797, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807378768920898, 6.8073835372924805, 6.8073835372924805, 6.807384490966797, 6.8073835372924805, 6.8073835372924805, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807379722595215, 6.8073835372924805, 6.8073835372924805, 6.8072004318237305, 6.807382583618164, 6.8073811531066895, 6.807383060455322, 6.807384014129639, 6.807384014129639, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.807214736938477, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.807384014129639, 6.807383060455322, 6.807384014129639, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073811531066895, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384490966797, 6.8073811531066895, 6.807384014129639, 6.807384014129639, 6.807294845581055, 6.807383060455322, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807377338409424, 6.8073811531066895, 6.807377815246582, 6.807384014129639, 6.807323932647705, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073811531066895, 6.807383060455322, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807383060455322, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807380199432373, 6.807372093200684, 6.8073835372924805, 6.807384014129639, 6.807356834411621, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382106781006, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807382106781006, 6.807384014129639, 6.807379722595215, 6.807384014129639, 6.807344436645508, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807382106781006, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073811531066895, 6.8073835372924805, 6.807373046875, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807381629943848, 6.807384014129639, 6.807360649108887, 6.807382583618164, 6.8073835372924805, 6.807382583618164, 6.807383060455322, 6.807384014129639, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.807381629943848, 6.807384014129639, 6.807370185852051, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807300090789795, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807374000549316, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807375907897949, 6.807384014129639, 6.807373523712158, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807377815246582, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807376861572266, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8072991371154785, 6.807377338409424, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807380676269531, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807375907897949, 6.807384490966797, 6.807382583618164, 6.8073835372924805, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807371139526367, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.807379722595215, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073811531066895, 6.807379722595215, 6.807382583618164, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807377815246582, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807381629943848, 6.807381629943848, 6.807382106781006, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807377815246582, 6.807384014129639, 6.807382583618164, 6.80736780166626, 6.8073835372924805, 6.807382106781006, 6.8073811531066895, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807380199432373, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384490966797, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639]
Actual: [tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([126.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3698.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([190.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64)]
MSE: 27388.490291727157
Predicted: [9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267870903015137, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267854690551758, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267754554748535, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.26786994934082, 9.267874717712402, 9.26786994934082, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.26787281036377, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267873764038086, 9.267874717712402, 9.267867088317871, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267873764038086, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.26783561706543, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402]
Actual: [tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([124.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6470.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2312.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([90.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 94195.49304630116
Predicted: [9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133334159851074, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333511352539, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13332748413086, 9.133339881896973, 9.133325576782227, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133280754089355, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133332252502441, 9.133070945739746, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133338928222656, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133333206176758, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133340835571289, 9.133334159851074, 9.133340835571289, 9.133333206176758, 9.133339881896973, 9.133339881896973, 9.133278846740723, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.13333797454834, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133338928222656, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133177757263184, 9.133339881896973, 9.133339881896973, 9.133179664611816, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133332252502441, 9.133339881896973, 9.133340835571289, 9.133333206176758, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133219718933105, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133090019226074, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133338928222656, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133296966552734, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133334159851074, 9.133339881896973, 9.133339881896973, 9.133338928222656, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133322715759277, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133332252502441, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133334159851074, 9.133337020874023, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13329792022705, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133330345153809, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289]
Actual: [tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 60.1372963379019
Predicted: [9.09863567352295, 9.098638534545898, 9.098638534545898, 9.098633766174316, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.0986328125, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098626136779785, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.09860610961914, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098634719848633, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098624229431152, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098636627197266, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098637580871582, 9.09862232208252, 9.098634719848633, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098626136779785, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098627090454102, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098603248596191, 9.098633766174316, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098636627197266, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098634719848633, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098633766174316, 9.09863567352295, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.098607063293457, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098626136779785, 9.098628997802734, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098636627197266, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098637580871582, 9.098633766174316, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098633766174316, 9.098633766174316, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098636627197266, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.0986328125, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.0985746383667, 9.098636627197266, 9.098628997802734, 9.098637580871582, 9.098637580871582, 9.098581314086914, 9.09863567352295, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.09863567352295, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098631858825684, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098636627197266, 9.09863567352295, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.09862995147705, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098625183105469, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098628044128418, 9.098637580871582, 9.098631858825684, 9.098628044128418, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.09863567352295, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098628044128418, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098597526550293, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098593711853027, 9.098634719848633, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898]
Actual: [tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([217.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12497.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 312043.2977393052
Predicted: [8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388290405273438, 8.38829231262207, 8.388294219970703, 8.388289451599121, 8.38829231262207, 8.388294219970703, 8.388290405273438, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388286590576172, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388290405273438, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388055801391602, 8.388294219970703, 8.38829231262207, 8.388291358947754, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388288497924805, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388290405273438, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388287544250488, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388290405273438, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388282775878906, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388282775878906, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388273239135742, 8.388294219970703, 8.388290405273438, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388291358947754, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388289451599121, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388245582580566, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388291358947754, 8.38829231262207, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388287544250488, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388290405273438, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388291358947754, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388290405273438, 8.388293266296387, 8.388291358947754, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388288497924805, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388284683227539, 8.38829231262207, 8.388290405273438, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388288497924805, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388291358947754, 8.38809871673584, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388273239135742, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388290405273438, 8.388290405273438, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388291358947754, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388291358947754, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.38829231262207, 8.388291358947754, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388291358947754, 8.38829231262207, 8.388290405273438, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388288497924805, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388289451599121, 8.388289451599121, 8.38825798034668, 8.388294219970703, 8.388294219970703, 8.388290405273438, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388280868530273, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388284683227539, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.388284683227539, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388161659240723, 8.388294219970703, 8.388290405273438, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388288497924805, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388164520263672, 8.388291358947754, 8.388294219970703, 8.388294219970703, 8.388240814208984, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2093.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([315.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([107.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([448.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1525.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([999.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 15920.181250729247
Predicted: [11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.260190963745117, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260212898254395, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260170936584473, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.260209083557129, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260191917419434, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260212898254395, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260148048400879, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260213851928711, 11.26021671295166, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260211944580078, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260210990905762, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.259964942932129, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260184288024902, 11.26021671295166, 11.260212898254395, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260197639465332, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166]
Actual: [tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([421.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([930.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2116.5533329184364
Predicted: [11.54332447052002, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.543329238891602, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543329238891602, 11.543334007263184, 11.543333053588867, 11.54332447052002, 11.5433349609375, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.543294906616211, 11.543334007263184, 11.543334007263184, 11.543329238891602, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.543330192565918, 11.543334007263184, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54332160949707, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.543330192565918, 11.543334007263184, 11.543328285217285, 11.543329238891602, 11.543330192565918, 11.543334007263184, 11.543327331542969, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543330192565918, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.5433349609375, 11.543328285217285, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.543330192565918, 11.543330192565918, 11.54333209991455, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.543331146240234, 11.54333209991455, 11.543331146240234, 11.543331146240234, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.543326377868652, 11.543334007263184, 11.543333053588867, 11.543328285217285, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.543328285217285, 11.54332447052002, 11.54333209991455, 11.54333209991455, 11.543289184570312, 11.54333209991455, 11.54332447052002, 11.543334007263184, 11.543334007263184, 11.543330192565918, 11.543330192565918, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.543326377868652, 11.543327331542969, 11.54333209991455, 11.543318748474121, 11.54333209991455, 11.543323516845703, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543318748474121, 11.543334007263184, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.5433349609375, 11.543329238891602, 11.543330192565918, 11.543326377868652, 11.543331146240234, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543330192565918, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543329238891602, 11.54333209991455, 11.5433349609375, 11.543307304382324, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.543333053588867, 11.54333209991455, 11.543330192565918, 11.54332447052002, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543320655822754, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.543331146240234, 11.54333209991455, 11.543323516845703, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.543328285217285, 11.54333209991455, 11.543329238891602, 11.543312072753906, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.543331146240234, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543328285217285, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543333053588867, 11.54333209991455, 11.54333782196045, 11.5433349609375, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.543334007263184, 11.543328285217285, 11.543328285217285, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543327331542969, 11.543326377868652, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543328285217285, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543325424194336, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.543331146240234, 11.543327331542969, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543334007263184, 11.543329238891602, 11.543327331542969, 11.543331146240234, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543327331542969, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.543334007263184, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543330192565918, 11.543322563171387, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.543333053588867, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543328285217285, 11.54333209991455, 11.543334007263184, 11.543330192565918, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543328285217285, 11.543329238891602, 11.543330192565918, 11.543334007263184, 11.543309211730957, 11.543330192565918, 11.543326377868652, 11.543333053588867, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543328285217285, 11.54333209991455, 11.543327331542969, 11.543333053588867, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543329238891602, 11.543329238891602, 11.543328285217285, 11.54333209991455, 11.54333209991455, 11.543327331542969, 11.543334007263184, 11.543331146240234, 11.54333209991455, 11.543330192565918, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543325424194336, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543327331542969, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.543328285217285, 11.54333209991455, 11.54333209991455, 11.543328285217285, 11.543334007263184, 11.543329238891602, 11.543313026428223, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.543320655822754, 11.54333209991455, 11.543330192565918, 11.543331146240234]
Actual: [tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([205.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6907.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([80.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([372.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([92.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21340.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([87.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([278.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64)]
MSE: 1005512.4659988412
Predicted: [12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403726577758789, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403725624084473, 12.403729438781738, 12.403726577758789, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403730392456055, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403727531433105, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403724670410156, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403726577758789, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403725624084473, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403726577758789, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403728485107422, 12.403727531433105, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403727531433105, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403727531433105]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([56.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1432.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([256.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([796.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([389.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23216.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1082593.397618284
Predicted: [13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007406234741211, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007402420043945, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007402420043945, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.00742244720459, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007402420043945, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629]
Actual: [tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([154.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([219.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([153.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([109.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([97.], dtype=torch.float64)]
MSE: 339.965061518856
Predicted: [13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612970352172852, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957954406738, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422]
Actual: [tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([48.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([28097.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1577498.019007616
Predicted: [14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070733070373535, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852]
Actual: [tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([46650.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([23189.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([257.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([60.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([124.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 5424271.882481749
Predicted: [14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562499046325684, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316]
Actual: [tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 164.53542951107116
Predicted: [14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133]
Actual: [tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6470.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2312.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([90.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 94085.67225973295
Predicted: [13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([466.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([125.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([56.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 597.107836787205
Predicted: [12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906987190246582, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906986236572266, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([29341.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([90.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([737.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([172.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([391.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([183.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1721852.457035363
Predicted: [7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0272626876831055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027267932891846, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.0272674560546875, 7.027265548706055, 7.027246475219727, 7.027265548706055, 7.0272674560546875, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266502380371, 7.027266502380371, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268886566162, 7.027265548706055, 7.02726936340332, 7.027425289154053, 7.0272674560546875, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027267932891846, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027266502380371, 7.027265548706055, 7.027266025543213, 7.027268886566162, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268886566162, 7.027266025543213, 7.027260780334473, 7.027265548706055, 7.0272674560546875, 7.027265548706055, 7.0272674560546875, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027243614196777, 7.027265548706055, 7.027242660522461, 7.027268886566162, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027246952056885, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0277276039123535, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027260780334473, 7.02726936340332, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027252197265625, 7.027268409729004, 7.027265548706055, 7.027268886566162, 7.027265548706055, 7.02724027633667, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.025592803955078, 7.027265548706055, 7.027265548706055, 7.027239799499512, 7.027266502380371, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.02726936340332, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.02725887298584, 7.027449607849121, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027237415313721, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027268409729004, 7.027265548706055, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027248382568359, 7.027265548706055, 7.027268886566162, 7.027266502380371, 7.027266502380371, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268886566162, 7.027265548706055, 7.0272674560546875, 7.027268886566162, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027268409729004, 7.027267932891846, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027266025543213, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027267932891846, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0272674560546875, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027608871459961, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.0272674560546875, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027267932891846, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0272674560546875, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266025543213, 7.027266502380371, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0272345542907715, 7.027266025543213, 7.027266502380371, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027244567871094, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0272321701049805, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027266025543213, 7.027266025543213, 7.027266502380371, 7.027265548706055, 7.027259826660156, 7.027268409729004, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.0272674560546875, 7.027265548706055, 7.0272674560546875, 7.027266979217529, 7.0272674560546875, 7.027265548706055, 7.027729034423828, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027585029602051, 7.027265548706055, 7.027265548706055, 7.02726936340332, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027253150939941, 7.027265548706055, 7.027265548706055, 7.0272321701049805, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027268409729004, 7.027268409729004, 7.02726936340332, 7.027265548706055, 7.027408123016357, 7.027266502380371, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0272674560546875, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027246952056885, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027266025543213, 7.02726936340332, 7.027266025543213, 7.0272674560546875, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268886566162, 7.027265548706055]
Actual: [tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([121.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([72.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([62.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([157.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([368.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2401.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([226.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([382.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([161.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 12266.796048353466
Predicted: [12.875636100769043, 12.87563419342041, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875606536865234, 12.875638008117676, 12.875630378723145, 12.875635147094727, 12.875636100769043, 12.875633239746094, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875635147094727, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875631332397461, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.875624656677246, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875626564025879, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.875629425048828, 12.875636100769043, 12.875535011291504, 12.875638008117676, 12.875632286071777, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.875628471374512, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.87562370300293, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875576972961426, 12.87563705444336, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875615119934082, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.87563419342041, 12.87563705444336, 12.875636100769043, 12.875622749328613, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.875626564025879, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875632286071777, 12.87563419342041, 12.875636100769043, 12.87563419342041, 12.87563705444336, 12.875635147094727, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.875636100769043, 12.875631332397461, 12.875636100769043, 12.87563705444336, 12.875632286071777, 12.875636100769043, 12.875632286071777, 12.875629425048828, 12.875633239746094, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87553596496582, 12.875636100769043, 12.875635147094727, 12.875631332397461, 12.875636100769043, 12.875636100769043, 12.875622749328613, 12.87563705444336, 12.875636100769043, 12.875628471374512, 12.87563419342041, 12.875630378723145, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875635147094727, 12.87563705444336, 12.875633239746094, 12.875631332397461, 12.875630378723145, 12.875636100769043, 12.87563419342041, 12.875635147094727, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875609397888184, 12.87563419342041, 12.875619888305664, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875635147094727, 12.875632286071777, 12.875636100769043, 12.875632286071777, 12.87563705444336, 12.875630378723145, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875633239746094, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875638008117676, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875578880310059, 12.87563705444336, 12.875633239746094, 12.875626564025879, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87562084197998, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.87562370300293, 12.875636100769043, 12.875636100769043, 12.875633239746094, 12.875636100769043, 12.87563705444336, 12.875635147094727, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.875630378723145, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87562084197998, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875624656677246, 12.875626564025879, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875633239746094, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.87563419342041, 12.875630378723145, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875633239746094, 12.87562084197998, 12.87563705444336, 12.875635147094727, 12.875636100769043, 12.875628471374512, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875635147094727, 12.87563705444336, 12.87563419342041, 12.87563705444336, 12.87563705444336, 12.875633239746094, 12.87562084197998, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875638008117676, 12.875636100769043, 12.875635147094727, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875624656677246, 12.87563705444336, 12.875636100769043, 12.875633239746094, 12.875627517700195, 12.875550270080566, 12.875633239746094, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.87563705444336, 12.875636100769043, 12.875628471374512, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875622749328613, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875631332397461, 12.875636100769043, 12.875636100769043, 12.875633239746094, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875621795654297, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875633239746094, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875633239746094, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875631332397461, 12.87563419342041, 12.875636100769043, 12.875631332397461, 12.875636100769043, 12.87563705444336, 12.875630378723145, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.875587463378906, 12.87563419342041, 12.875635147094727, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875630378723145, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875621795654297, 12.87563705444336, 12.875636100769043, 12.875633239746094, 12.875632286071777, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875629425048828, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875624656677246, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875619888305664, 12.87563705444336, 12.87563419342041, 12.875618934631348, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875638008117676, 12.875636100769043, 12.875630378723145, 12.875628471374512, 12.875636100769043, 12.87563419342041, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.87563419342041, 12.875619888305664, 12.875636100769043]
Actual: [tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1214.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([220.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([281.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([114.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([158.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 3306.7180506347718
Predicted: [11.190638542175293, 11.190590858459473, 11.190451622009277, 11.189539909362793, 11.1906099319458, 11.190587043762207, 11.190610885620117, 11.190506935119629, 11.190577507019043, 11.190608024597168, 11.190558433532715, 11.19055461883545, 11.190610885620117, 11.190532684326172, 11.19062328338623, 11.190367698669434, 11.190549850463867, 11.190634727478027, 11.190558433532715, 11.190528869628906, 11.19056224822998, 11.190568923950195, 11.19057559967041, 11.190579414367676, 11.19055461883545, 11.190583229064941, 11.190610885620117, 11.190531730651855, 11.190611839294434, 11.190590858459473, 11.190620422363281, 11.190603256225586, 11.19045352935791, 11.190592765808105, 11.190616607666016, 11.190621376037598, 11.19056224822998, 11.190485954284668, 11.190072059631348, 11.190564155578613, 11.189908027648926, 11.190569877624512, 11.190607070922852, 11.190585136413574, 11.19058895111084, 11.190461158752441, 11.190585136413574, 11.190606117248535, 11.190584182739258, 11.19057846069336, 11.19062328338623, 11.188431739807129, 11.190581321716309, 11.190470695495605, 11.190606117248535, 11.190579414367676, 11.190605163574219, 11.19062328338623, 11.190600395202637, 11.190573692321777, 11.190606117248535, 11.190545082092285, 11.190642356872559, 11.190417289733887, 11.190573692321777, 11.190043449401855, 11.190583229064941, 11.190406799316406, 11.190634727478027, 11.190604209899902, 11.190566062927246, 11.190545082092285, 11.190593719482422, 11.190590858459473, 11.190613746643066, 11.190606117248535, 11.190423965454102, 11.190445899963379, 11.190585136413574, 11.190620422363281, 11.190571784973145, 11.190616607666016, 11.190613746643066, 11.190642356872559, 11.19051742553711, 11.190598487854004, 11.190555572509766, 11.190435409545898, 11.190535545349121, 11.190610885620117, 11.190598487854004, 11.190611839294434, 11.190581321716309, 11.190603256225586, 11.1906156539917, 11.190621376037598, 11.190464973449707, 11.19057846069336, 11.190568923950195, 11.190529823303223, 11.190505981445312, 11.190539360046387, 11.190291404724121, 11.1904878616333, 11.190555572509766, 11.190598487854004, 11.19057846069336, 11.190524101257324, 11.190594673156738, 11.190589904785156, 11.190436363220215, 11.190590858459473, 11.190594673156738, 11.190512657165527, 11.190510749816895, 11.19060230255127, 11.19028377532959, 11.19060230255127, 11.190629959106445, 11.190557479858398, 11.190587043762207, 11.190546989440918, 11.190619468688965, 11.190546035766602, 11.190536499023438, 11.19058895111084, 11.190512657165527, 11.190613746643066, 11.19060230255127, 11.190533638000488, 11.190620422363281, 11.190581321716309, 11.190276145935059, 11.190572738647461, 11.190438270568848, 11.190601348876953, 11.190625190734863, 11.190520286560059, 11.190558433532715, 11.190624237060547, 11.190589904785156, 11.190577507019043, 11.190577507019043, 11.190583229064941, 11.1906099319458, 11.190613746643066, 11.190600395202637, 11.190564155578613, 11.190600395202637, 11.190618515014648, 11.190428733825684, 11.190544128417969, 11.190598487854004, 11.190617561340332, 11.190598487854004, 11.190600395202637, 11.190570831298828, 11.190296173095703, 11.190545082092285, 11.190489768981934, 11.19060230255127, 11.190601348876953, 11.190321922302246, 11.190452575683594, 11.190611839294434, 11.190461158752441, 11.190524101257324, 11.190585136413574, 11.190415382385254, 11.190568923950195, 11.190606117248535, 11.190495491027832, 11.190530776977539, 11.19057846069336, 11.190550804138184, 11.190613746643066, 11.190485954284668, 11.190597534179688, 11.190613746643066, 11.190627098083496, 11.190402030944824, 11.190594673156738, 11.19044017791748, 11.19058895111084, 11.190522193908691, 11.190564155578613, 11.190640449523926, 11.190268516540527, 11.190638542175293, 11.190593719482422, 11.190596580505371, 11.19060230255127, 11.190594673156738, 11.190338134765625, 11.190617561340332, 11.190638542175293, 11.190543174743652, 11.190600395202637, 11.190613746643066, 11.190606117248535, 11.19060230255127, 11.1906099319458, 11.190569877624512, 11.19049072265625, 11.190443992614746, 11.19062328338623, 11.19054889678955, 11.190176010131836, 11.190553665161133, 11.19050121307373, 11.190508842468262, 11.19062328338623, 11.19060230255127, 11.190621376037598, 11.190587043762207, 11.190577507019043, 11.190577507019043, 11.190529823303223, 11.190569877624512, 11.19056224822998, 11.190608978271484, 11.190403938293457, 11.190621376037598, 11.1906156539917, 11.190635681152344, 11.19061279296875, 11.190590858459473, 11.19057846069336, 11.189677238464355, 11.190600395202637, 11.19018840789795, 11.190577507019043, 11.190633773803711, 11.190589904785156, 11.190584182739258, 11.190603256225586, 11.190545082092285, 11.190550804138184, 11.190627098083496, 11.190112113952637, 11.190568923950195, 11.190577507019043, 11.190420150756836, 11.190608024597168, 11.19054889678955, 11.19055461883545, 11.190367698669434, 11.19050121307373, 11.190606117248535, 11.1906156539917, 11.190567970275879, 11.190587043762207, 11.19063663482666, 11.190582275390625, 11.190593719482422, 11.19060230255127, 11.19063663482666, 11.190522193908691, 11.190605163574219, 11.19054889678955, 11.190560340881348, 11.190510749816895, 11.190583229064941, 11.19062328338623, 11.190546989440918, 11.190581321716309, 11.190651893615723, 11.190553665161133, 11.190611839294434, 11.190535545349121, 11.190556526184082, 11.190581321716309, 11.190577507019043, 11.190596580505371, 11.190547943115234, 11.190422058105469, 11.190546035766602, 11.190592765808105, 11.190592765808105, 11.19055461883545, 11.190573692321777, 11.190608024597168, 11.19061279296875, 11.190582275390625, 11.190597534179688, 11.19019603729248, 11.190611839294434, 11.190524101257324, 11.190157890319824, 11.19040298461914, 11.190519332885742, 11.19062328338623, 11.19062328338623, 11.190595626831055, 11.190611839294434, 11.190580368041992, 11.190572738647461, 11.190537452697754, 11.19041919708252, 11.190472602844238, 11.190603256225586, 11.190595626831055, 11.1906156539917, 11.190617561340332, 11.190526008605957, 11.190533638000488, 11.190476417541504, 11.190540313720703, 11.190613746643066, 11.19054126739502, 11.190611839294434, 11.190529823303223, 11.190589904785156, 11.190606117248535, 11.190606117248535, 11.190618515014648, 11.190608024597168, 11.19048023223877, 11.190567970275879, 11.190539360046387, 11.190547943115234, 11.190447807312012, 11.190613746643066, 11.190635681152344, 11.190608024597168, 11.190643310546875, 11.190608978271484, 11.19051456451416, 11.19054126739502, 11.190566062927246, 11.18979549407959, 11.190581321716309, 11.190597534179688, 11.190587997436523, 11.190610885620117, 11.19052505493164, 11.190587997436523, 11.190583229064941, 11.190598487854004, 11.190522193908691, 11.190579414367676, 11.190606117248535, 11.190533638000488, 11.190606117248535, 11.190561294555664, 11.190632820129395, 11.190531730651855, 11.190613746643066, 11.190535545349121, 11.190468788146973, 11.190403938293457, 11.190608024597168, 11.190646171569824, 11.190598487854004, 11.190574645996094, 11.19058895111084, 11.190572738647461, 11.190616607666016, 11.190569877624512, 11.19030475616455, 11.190594673156738, 11.190537452697754, 11.190543174743652, 11.190573692321777, 11.190427780151367, 11.190570831298828, 11.190611839294434, 11.190610885620117, 11.19058895111084, 11.190629005432129, 11.190629005432129, 11.190568923950195, 11.190581321716309, 11.190594673156738, 11.190573692321777, 11.190581321716309, 11.19055461883545, 11.190547943115234, 11.190587043762207, 11.1906156539917, 11.190573692321777, 11.190642356872559, 11.190579414367676, 11.190522193908691, 11.190576553344727, 11.190569877624512, 11.190529823303223, 11.190632820129395, 11.190627098083496, 11.190597534179688, 11.190590858459473, 11.190583229064941, 11.19058895111084, 11.190153121948242, 11.190590858459473, 11.190585136413574, 11.190583229064941, 11.190587043762207, 11.190637588500977, 11.190619468688965, 11.19050407409668, 11.190289497375488, 11.190583229064941, 11.190587997436523, 11.19058609008789, 11.189005851745605, 11.190593719482422, 11.190559387207031, 11.190570831298828, 11.190590858459473, 11.189162254333496, 11.190591812133789, 11.190655708312988, 11.190526008605957, 11.19062328338623, 11.190545082092285, 11.190560340881348, 11.190560340881348, 11.190606117248535, 11.190519332885742, 11.190552711486816, 11.19059944152832, 11.190635681152344, 11.190591812133789, 11.1906099319458, 11.190144538879395, 11.190634727478027, 11.190604209899902, 11.19038200378418, 11.190524101257324, 11.190497398376465, 11.19051742553711, 11.190596580505371, 11.19062328338623, 11.190560340881348, 11.19060230255127, 11.190634727478027, 11.190592765808105, 11.190522193908691, 11.190508842468262, 11.190435409545898, 11.190644264221191, 11.190499305725098, 11.190237998962402, 11.19051742553711, 11.190417289733887, 11.19059944152832, 11.190526962280273, 11.190509796142578, 11.190581321716309, 11.190568923950195, 11.190583229064941, 11.190587043762207, 11.190489768981934, 11.189976692199707, 11.190579414367676, 11.190629005432129, 11.190606117248535, 11.190592765808105, 11.190606117248535, 11.190594673156738, 11.190513610839844, 11.190587043762207, 11.190618515014648, 11.190592765808105, 11.190592765808105, 11.1906099319458, 11.1906156539917, 11.190635681152344, 11.190506935119629, 11.190210342407227, 11.190596580505371, 11.190543174743652, 11.19062614440918, 11.190600395202637, 11.190600395202637, 11.18943977355957, 11.19055461883545, 11.190486907958984, 11.190629959106445, 11.1906099319458, 11.190590858459473, 11.190336227416992, 11.190611839294434, 11.190573692321777, 11.190621376037598, 11.190585136413574, 11.190585136413574, 11.19055461883545, 11.19063663482666, 11.190459251403809, 11.190446853637695, 11.190629005432129, 11.190556526184082, 11.190587043762207, 11.190540313720703, 11.190528869628906, 11.190530776977539, 11.1906099319458, 11.190616607666016]
Actual: [tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([219.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([153.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([109.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([97.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([77.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 268.98954678363447
Predicted: [10.212823867797852, 10.212812423706055, 10.212825775146484, 10.212498664855957, 10.212830543518066, 10.21280574798584, 10.212756156921387, 10.212838172912598, 10.21281909942627, 10.212801933288574, 10.212803840637207, 10.2128324508667, 10.21284008026123, 10.21284008026123, 10.2128267288208, 10.212834358215332, 10.212808609008789, 10.212754249572754, 10.212732315063477, 10.212515830993652, 10.212837219238281, 10.212809562683105, 10.212807655334473, 10.212843894958496, 10.212794303894043, 10.212828636169434, 10.212822914123535, 10.2128324508667, 10.212732315063477, 10.212862968444824, 10.212808609008789, 10.212748527526855, 10.21215534210205, 10.21279239654541, 10.212839126586914, 10.212817192077637, 10.212828636169434, 10.212800979614258, 10.21277904510498, 10.212798118591309, 10.212824821472168, 10.212796211242676, 10.212797164916992, 10.212140083312988, 10.212845802307129, 10.212824821472168, 10.212814331054688, 10.211363792419434, 10.212822914123535, 10.212815284729004, 10.212849617004395, 10.212772369384766, 10.212773323059082, 10.212843894958496, 10.212623596191406, 10.212717056274414, 10.21281909942627, 10.212862014770508, 10.21275806427002, 10.212797164916992, 10.212775230407715, 10.212788581848145, 10.212831497192383, 10.212698936462402, 10.212753295898438, 10.212834358215332, 10.212824821472168, 10.21222972869873, 10.212711334228516, 10.212799072265625, 10.212811470031738, 10.21284008026123, 10.2128324508667, 10.212775230407715, 10.212830543518066, 10.212769508361816, 10.212830543518066, 10.21275520324707, 10.212747573852539, 10.212783813476562, 10.212828636169434, 10.212719917297363, 10.212817192077637, 10.212845802307129, 10.212703704833984, 10.212702751159668, 10.212813377380371, 10.212834358215332, 10.212806701660156, 10.212836265563965, 10.212812423706055, 10.212801933288574, 10.212834358215332, 10.212857246398926, 10.212809562683105, 10.212833404541016, 10.212870597839355, 10.210273742675781, 10.212791442871094, 10.212750434875488, 10.212841987609863, 10.212769508361816, 10.212769508361816, 10.21278190612793, 10.2128267288208, 10.212782859802246, 10.212808609008789, 10.21284008026123, 10.212801933288574, 10.212800025939941, 10.212784767150879, 10.212796211242676, 10.212748527526855, 10.212806701660156, 10.21281909942627, 10.212761878967285, 10.212597846984863, 10.212807655334473, 10.212779998779297, 10.21277904510498, 10.212806701660156, 10.212774276733398, 10.212848663330078, 10.212786674499512, 10.212782859802246, 10.212812423706055, 10.212628364562988, 10.212849617004395, 10.212831497192383, 10.212790489196777, 10.21281623840332, 10.212834358215332, 10.212867736816406, 10.212794303894043, 10.212834358215332, 10.212798118591309, 10.212681770324707, 10.212841987609863, 10.212740898132324, 10.212787628173828, 10.212779998779297, 10.211471557617188, 10.212824821472168, 10.212833404541016, 10.212767601013184, 10.212773323059082, 10.212662696838379, 10.212817192077637, 10.212849617004395, 10.212837219238281, 10.212775230407715, 10.212769508361816, 10.212807655334473, 10.21285343170166, 10.2128324508667, 10.212833404541016, 10.212851524353027, 10.212388038635254, 10.212737083435059, 10.212672233581543, 10.212822914123535, 10.212761878967285, 10.2128324508667, 10.212833404541016, 10.2128267288208, 10.212841033935547, 10.212813377380371, 10.212859153747559, 10.212838172912598, 10.212690353393555, 10.21277141571045, 10.21279239654541, 10.212813377380371, 10.21280574798584, 10.2128324508667, 10.212834358215332, 10.212841033935547, 10.212727546691895, 10.212824821472168, 10.212721824645996, 10.212822914123535, 10.212759971618652, 10.212668418884277, 10.212817192077637, 10.212485313415527, 10.212740898132324, 10.212835311889648, 10.212808609008789, 10.21278190612793, 10.212821960449219, 10.212693214416504, 10.212811470031738, 10.212822914123535, 10.212787628173828, 10.212779998779297, 10.212811470031738, 10.212830543518066, 10.21269702911377, 10.212702751159668, 10.212830543518066, 10.21284008026123, 10.212828636169434, 10.212835311889648, 10.212815284729004, 10.212830543518066, 10.212821960449219, 10.212825775146484, 10.21267032623291, 10.212828636169434, 10.212790489196777, 10.212797164916992, 10.212737083435059, 10.2128324508667, 10.212806701660156, 10.212833404541016, 10.212807655334473, 10.212742805480957, 10.212821960449219, 10.212801933288574, 10.212812423706055, 10.212724685668945, 10.212828636169434, 10.212828636169434, 10.212822914123535, 10.212803840637207, 10.21284008026123, 10.212820053100586, 10.212841987609863, 10.212773323059082, 10.212828636169434, 10.212794303894043, 10.212849617004395, 10.212796211242676, 10.212811470031738, 10.212836265563965, 10.21279239654541, 10.212811470031738, 10.21280574798584, 10.212754249572754, 10.212817192077637, 10.212777137756348, 10.212862968444824, 10.212838172912598, 10.212838172912598, 10.212809562683105, 10.212740898132324, 10.212305068969727, 10.212833404541016, 10.212837219238281, 10.212767601013184, 10.212790489196777, 10.212662696838379, 10.21214485168457, 10.212788581848145, 10.212838172912598, 10.212821006774902, 10.21278190612793, 10.21257495880127, 10.212759017944336, 10.212714195251465, 10.212796211242676, 10.212843894958496, 10.212806701660156, 10.212825775146484, 10.212793350219727, 10.212783813476562, 10.212790489196777, 10.212788581848145, 10.2128267288208, 10.21280574798584, 10.212822914123535, 10.21158218383789, 10.2128267288208, 10.212822914123535, 10.212862968444824, 10.212830543518066, 10.212830543518066, 10.212862968444824, 10.212800979614258, 10.212801933288574, 10.212810516357422, 10.21263599395752, 10.212803840637207, 10.212725639343262, 10.212827682495117, 10.212834358215332, 10.21277141571045, 10.212831497192383, 10.212821960449219, 10.212850570678711, 10.212759017944336, 10.212830543518066, 10.212830543518066, 10.212817192077637, 10.212843894958496, 10.212849617004395, 10.212808609008789, 10.212828636169434, 10.21279525756836, 10.212827682495117, 10.212803840637207, 10.212830543518066, 10.212851524353027, 10.212849617004395, 10.21274471282959, 10.212732315063477, 10.212830543518066, 10.212800025939941, 10.212640762329102, 10.212775230407715, 10.212790489196777, 10.212716102600098, 10.212790489196777, 10.212807655334473, 10.212740898132324, 10.212770462036133, 10.212835311889648, 10.21280574798584, 10.212800979614258, 10.212822914123535, 10.212815284729004, 10.212841987609863, 10.212857246398926, 10.212813377380371, 10.212824821472168, 10.212753295898438, 10.212716102600098, 10.212814331054688, 10.21280574798584, 10.21262264251709, 10.21284008026123, 10.212848663330078, 10.21284008026123, 10.212810516357422, 10.21279239654541, 10.21277141571045, 10.212841033935547, 10.212821006774902, 10.212750434875488, 10.21284008026123, 10.21280288696289, 10.212784767150879, 10.212830543518066, 10.212841987609863, 10.2125825881958, 10.212790489196777, 10.212757110595703, 10.212867736816406, 10.212754249572754, 10.212839126586914, 10.212838172912598, 10.212763786315918, 10.212642669677734, 10.212766647338867, 10.212613105773926, 10.212836265563965, 10.211504936218262, 10.212830543518066, 10.212825775146484, 10.21285343170166, 10.212821006774902, 10.212830543518066, 10.212714195251465, 10.212868690490723, 10.21281909942627, 10.212775230407715, 10.212784767150879, 10.212822914123535, 10.212790489196777, 10.212736129760742, 10.212828636169434, 10.212834358215332, 10.212812423706055, 10.212708473205566, 10.212801933288574, 10.212620735168457, 10.212745666503906, 10.212728500366211, 10.212788581848145, 10.212800025939941, 10.212864875793457, 10.212834358215332, 10.212784767150879, 10.21280574798584, 10.212836265563965, 10.21273136138916, 10.21284008026123, 10.212848663330078, 10.21273422241211, 10.21271800994873, 10.212767601013184, 10.212836265563965, 10.212821006774902, 10.212586402893066, 10.212827682495117, 10.212814331054688, 10.212828636169434, 10.212817192077637, 10.212784767150879, 10.2128267288208, 10.212815284729004, 10.212672233581543, 10.212745666503906, 10.212838172912598, 10.211429595947266, 10.212833404541016, 10.212753295898438, 10.212712287902832, 10.212810516357422, 10.212825775146484, 10.212851524353027, 10.212761878967285, 10.212806701660156, 10.21281909942627, 10.212836265563965, 10.212838172912598, 10.212751388549805, 10.212843894958496, 10.21284008026123, 10.212817192077637, 10.212799072265625, 10.212838172912598, 10.212777137756348, 10.212817192077637, 10.212833404541016, 10.212827682495117, 10.212602615356445, 10.212740898132324, 10.212725639343262, 10.212860107421875, 10.212862968444824, 10.212241172790527, 10.2128267288208, 10.2128267288208, 10.212800979614258, 10.212824821472168, 10.212813377380371, 10.212775230407715, 10.212830543518066, 10.212784767150879, 10.212838172912598, 10.212796211242676, 10.2128324508667, 10.212621688842773, 10.212723731994629, 10.212639808654785, 10.21284008026123, 10.212814331054688, 10.212822914123535, 10.212848663330078, 10.212824821472168, 10.212777137756348, 10.212801933288574, 10.212830543518066, 10.21284008026123, 10.212769508361816, 10.212677955627441, 10.212824821472168, 10.212759971618652, 10.212634086608887, 10.212828636169434, 10.212763786315918, 10.212800025939941, 10.212807655334473, 10.212830543518066, 10.212777137756348, 10.212807655334473, 10.212813377380371, 10.212759017944336, 10.21285629272461, 10.212809562683105, 10.212794303894043, 10.212796211242676, 10.212830543518066, 10.212833404541016, 10.212841987609863, 10.212573051452637, 10.212825775146484, 10.21285343170166, 10.212815284729004, 10.212798118591309, 10.212851524353027, 10.212525367736816, 10.21262264251709, 10.212686538696289, 10.212797164916992, 10.212817192077637, 10.212794303894043, 10.212780952453613, 10.212803840637207, 10.212827682495117, 10.212846755981445, 10.212748527526855, 10.212803840637207, 10.212855339050293, 10.212864875793457, 10.212782859802246, 10.212759017944336, 10.212862014770508, 10.212827682495117]
Actual: [tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3807.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15721.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4181.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([48.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 557356.113470893
Predicted: [14.10494613647461, 14.104952812194824, 14.104883193969727, 14.104955673217773, 14.104941368103027, 14.10490894317627, 14.10495376586914, 14.104928970336914, 14.104948997497559, 14.104945182800293, 14.104942321777344, 14.104948043823242, 14.104951858520508, 14.10494613647461, 14.104944229125977, 14.104951858520508, 14.104944229125977, 14.10495662689209, 14.104928970336914, 14.104931831359863, 14.104948043823242, 14.104948043823242, 14.10495376586914, 14.10495376586914, 14.104951858520508, 14.104947090148926, 14.104951858520508, 14.104913711547852, 14.10495376586914, 14.104955673217773, 14.10495662689209, 14.104951858520508, 14.104948997497559, 14.104951858520508, 14.104955673217773, 14.104826927185059, 14.10493278503418, 14.104948043823242, 14.104887008666992, 14.104948043823242, 14.104954719543457, 14.104951858520508, 14.104750633239746, 14.10495376586914, 14.10494613647461, 14.10494613647461, 14.10493278503418, 14.104951858520508, 14.104948043823242, 14.104950904846191, 14.10494613647461, 14.104930877685547, 14.104951858520508, 14.10494613647461, 14.10495376586914, 14.104949951171875, 14.104955673217773, 14.104954719543457, 14.10494327545166, 14.104799270629883, 14.10490608215332, 14.10494613647461, 14.104930877685547, 14.104949951171875, 14.104952812194824, 14.104944229125977, 14.104942321777344, 14.104950904846191, 14.10493278503418, 14.104951858520508, 14.104913711547852, 14.104952812194824, 14.104829788208008, 14.104878425598145, 14.10495376586914, 14.104850769042969, 14.104951858520508, 14.104948043823242, 14.104955673217773, 14.104955673217773, 14.104957580566406, 14.104924201965332, 14.10495662689209, 14.104928016662598, 14.104930877685547, 14.104805946350098, 14.104949951171875, 14.104935646057129, 14.104948043823242, 14.104951858520508, 14.104949951171875, 14.10494613647461, 14.104949951171875, 14.104891777038574, 14.10495376586914, 14.10495376586914, 14.104949951171875, 14.104951858520508, 14.10495376586914, 14.104955673217773, 14.104938507080078, 14.104954719543457, 14.104950904846191, 14.10495376586914, 14.104952812194824, 14.10494613647461, 14.104954719543457, 14.104948043823242, 14.104955673217773, 14.104913711547852, 14.104949951171875, 14.104942321777344, 14.10495376586914, 14.104942321777344, 14.104948043823242, 14.109247207641602, 14.104944229125977, 14.104952812194824, 14.104954719543457, 14.10489559173584, 14.104951858520508, 14.104944229125977, 14.104951858520508, 14.10494327545166, 14.104952812194824, 14.104951858520508, 14.104957580566406, 14.104950904846191, 14.10490608215332, 14.10495662689209, 14.104949951171875, 14.104951858520508, 14.104948043823242, 14.10494327545166, 14.10492992401123, 14.104865074157715, 14.104957580566406, 14.104945182800293, 14.104851722717285, 14.104955673217773, 14.104955673217773, 14.104948997497559, 14.10495376586914, 14.10491943359375, 14.10495376586914, 14.104939460754395, 14.104904174804688, 14.104938507080078, 14.104955673217773, 14.10495376586914, 14.104955673217773, 14.104843139648438, 14.104918479919434, 14.104860305786133, 14.104942321777344, 14.104935646057129, 14.10495376586914, 14.10495662689209, 14.104949951171875, 14.104945182800293, 14.104955673217773, 14.104909896850586, 14.10494613647461, 14.104951858520508, 14.10495376586914, 14.10495376586914, 14.104951858520508, 14.104890823364258, 14.104418754577637, 14.10495376586914, 14.10495376586914, 14.10495662689209, 14.104951858520508, 14.104955673217773, 14.10495376586914, 14.104951858520508, 14.104950904846191, 14.104927062988281, 14.104954719543457, 14.104940414428711, 14.104940414428711, 14.104931831359863, 14.104951858520508, 14.104941368103027, 14.10495662689209, 14.104921340942383, 14.104955673217773, 14.104951858520508, 14.10495376586914, 14.104940414428711, 14.10495376586914, 14.10495376586914, 14.104936599731445, 14.10494613647461, 14.10495662689209, 14.104949951171875, 14.10495662689209, 14.104927062988281, 14.10495376586914, 14.104942321777344, 14.104816436767578, 14.104951858520508, 14.104925155639648, 14.104921340942383, 14.104949951171875, 14.104940414428711, 14.10495376586914, 14.104948043823242, 14.104948043823242, 14.104917526245117, 14.104942321777344, 14.104880332946777, 14.104616165161133, 14.104923248291016, 14.104944229125977, 14.10495662689209, 14.10495662689209, 14.104948043823242, 14.104951858520508, 14.104951858520508, 14.10495376586914, 14.104942321777344, 14.104934692382812, 14.104829788208008, 14.10494613647461, 14.104955673217773, 14.10495376586914, 14.104925155639648, 14.10495376586914, 14.104936599731445, 14.104955673217773, 14.104944229125977, 14.104951858520508, 14.104955673217773, 14.104918479919434, 14.10495376586914, 14.104955673217773, 14.104442596435547, 14.10495662689209, 14.104948043823242, 14.104909896850586, 14.104944229125977, 14.10494613647461, 14.10491943359375, 14.104876518249512, 14.104951858520508, 14.104930877685547, 14.104928970336914, 14.104924201965332, 14.104875564575195, 14.104949951171875, 14.104950904846191, 14.104950904846191, 14.104930877685547, 14.104915618896484, 14.104951858520508, 14.104724884033203, 14.104949951171875, 14.104955673217773, 14.10495376586914, 14.104944229125977, 14.104949951171875, 14.104949951171875, 14.104950904846191, 14.104947090148926, 14.104945182800293, 14.104948043823242, 14.104942321777344, 14.104869842529297, 14.104920387268066, 14.104949951171875, 14.104957580566406, 14.104921340942383, 14.104954719543457, 14.104955673217773, 14.104954719543457, 14.104948043823242, 14.104954719543457, 14.104952812194824, 14.104945182800293, 14.104948043823242, 14.104944229125977, 14.10488510131836, 14.104955673217773, 14.104947090148926, 14.104948043823242, 14.104950904846191, 14.10493278503418, 14.10495376586914, 14.104891777038574, 14.104799270629883, 14.104926109313965, 14.104951858520508, 14.104910850524902, 14.104951858520508, 14.104949951171875, 14.104951858520508, 14.1049222946167, 14.104899406433105, 14.10495376586914, 14.104944229125977, 14.10494613647461, 14.104949951171875, 14.104949951171875, 14.104951858520508, 14.104900360107422, 14.104951858520508, 14.104954719543457, 14.104954719543457, 14.104930877685547, 14.104955673217773, 14.10495376586914, 14.104951858520508, 14.10495376586914, 14.104930877685547, 14.104934692382812, 14.104866027832031, 14.104936599731445, 14.104941368103027, 14.104926109313965, 14.10495376586914, 14.104951858520508, 14.104948997497559, 14.104951858520508, 14.104954719543457, 14.104915618896484, 14.104952812194824, 14.104944229125977, 14.104957580566406, 14.104927062988281, 14.104948043823242, 14.104955673217773, 14.10493278503418, 14.104944229125977, 14.104948043823242, 14.104925155639648, 14.104944229125977, 14.10495376586914, 14.104948997497559, 14.104812622070312, 14.104839324951172, 14.104952812194824, 14.104894638061523, 14.104944229125977, 14.10495662689209, 14.104948997497559, 14.104940414428711, 14.104951858520508, 14.104923248291016, 14.104951858520508, 14.10495376586914, 14.104952812194824, 14.104935646057129, 14.10495662689209, 14.104944229125977, 14.10495376586914, 14.104955673217773, 14.10495662689209, 14.104955673217773, 14.104942321777344, 14.104898452758789, 14.104935646057129, 14.104928970336914, 14.104955673217773, 14.104957580566406, 14.104902267456055, 14.104948997497559, 14.104951858520508, 14.104948997497559, 14.104951858520508, 14.104735374450684, 14.104948043823242, 14.10494613647461, 14.104948997497559, 14.104940414428711, 14.104925155639648, 14.10495376586914, 14.104896545410156, 14.10494613647461, 14.10494327545166, 14.104951858520508, 14.10495376586914, 14.104951858520508, 14.104950904846191, 14.104949951171875, 14.104954719543457, 14.102258682250977, 14.104944229125977, 14.104942321777344, 14.10494613647461, 14.104942321777344, 14.1049222946167, 14.10494613647461, 14.104705810546875, 14.104928970336914, 14.104925155639648, 14.10494613647461, 14.10495376586914, 14.104944229125977, 14.104949951171875, 14.10494613647461, 14.104948043823242, 14.104939460754395, 14.104944229125977, 14.104952812194824, 14.104950904846191, 14.104940414428711, 14.104949951171875, 14.104955673217773, 14.104951858520508, 14.104948043823242, 14.104947090148926, 14.104955673217773, 14.104955673217773, 14.104949951171875, 14.104955673217773, 14.104938507080078, 14.104917526245117, 14.104948043823242, 14.104949951171875, 14.104952812194824, 14.104955673217773, 14.104954719543457, 14.104902267456055, 14.104948997497559, 14.104951858520508, 14.104955673217773, 14.104952812194824, 14.104942321777344, 14.104907989501953, 14.104940414428711, 14.104951858520508, 14.104955673217773, 14.10452651977539, 14.10495376586914, 14.104951858520508, 14.10494613647461, 14.104938507080078, 14.104955673217773, 14.10495376586914, 14.104949951171875, 14.104945182800293, 14.104942321777344, 14.104949951171875, 14.104835510253906, 14.104900360107422, 14.104948997497559, 14.104930877685547, 14.104952812194824, 14.104838371276855, 14.104959487915039, 14.104400634765625, 14.104954719543457, 14.104954719543457, 14.104957580566406, 14.104957580566406, 14.104936599731445, 14.10472583770752, 14.104938507080078, 14.10495376586914, 14.104894638061523, 14.104951858520508, 14.10493278503418, 14.104949951171875, 14.104891777038574, 14.104955673217773, 14.10493278503418, 14.104947090148926, 14.104951858520508, 14.104936599731445, 14.104949951171875, 14.104948043823242, 14.104902267456055, 14.104949951171875, 14.104954719543457, 14.10495376586914, 14.104937553405762, 14.104949951171875, 14.104952812194824, 14.104950904846191, 14.104945182800293, 14.104949951171875, 14.104756355285645, 14.104930877685547, 14.104955673217773, 14.104949951171875, 14.104948043823242, 14.104957580566406, 14.104950904846191, 14.104955673217773, 14.10495662689209, 14.104896545410156, 14.104951858520508, 14.104936599731445, 14.104949951171875, 14.104903221130371, 14.104948043823242, 14.104928970336914, 14.104952812194824, 14.104951858520508]
Actual: [tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([102.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([99.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8493.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([328.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([208.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31.], dtype=torch.float64)]
MSE: 144241.65798993743
Predicted: [14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599308013916016, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599353790283203, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599352836608887, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599349975585938, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599357604980469, 14.59935188293457, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.59935474395752, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599357604980469, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.59935474395752, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599349021911621, 14.599355697631836, 14.599357604980469, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599358558654785, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599237442016602, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.59935474395752, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.59935474395752, 14.599353790283203, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599353790283203, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.59935474395752, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.59929370880127, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.59935188293457, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599299430847168, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599344253540039, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599320411682129, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599353790283203, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599353790283203, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599339485168457, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([97.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1059.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([150.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([67.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 2405.6967962677413
Predicted: [15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884797096252441, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884806632995605, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.88480281829834, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884801864624023, 15.884805679321289, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.88480281829834, 15.884807586669922, 15.884807586669922, 15.884803771972656, 15.884807586669922, 15.884807586669922, 15.884800910949707, 15.884806632995605, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884803771972656, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.88479995727539, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884805679321289, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.88480281829834, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.88480281829834, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884804725646973, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884796142578125, 15.884805679321289, 15.884804725646973, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884782791137695, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884801864624023, 15.884807586669922, 15.884805679321289, 15.884806632995605, 15.884805679321289, 15.884807586669922, 15.88480281829834, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884803771972656, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.88480281829834, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884801864624023, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.88480281829834, 15.884805679321289, 15.884805679321289, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884804725646973, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884788513183594, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922]
Actual: [tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([394.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([111.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([37.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2075.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([417.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([77.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6011.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 81193.60053018756
Predicted: [13.747314453125, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747321128845215, 13.747319221496582, 13.747319221496582, 13.747248649597168, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747316360473633, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747302055358887, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747318267822266, 13.747314453125, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747274398803711, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747314453125, 13.747319221496582, 13.74731159210205, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747316360473633, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747321128845215, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747288703918457, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747314453125, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747316360473633, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747318267822266, 13.74731731414795, 13.747318267822266, 13.747315406799316, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747313499450684, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747292518615723, 13.74731731414795, 13.747316360473633, 13.747316360473633, 13.747319221496582, 13.747320175170898, 13.747318267822266, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747316360473633, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747314453125, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747318267822266, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747318267822266, 13.747318267822266, 13.74731731414795, 13.747316360473633, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747316360473633, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747313499450684, 13.74731731414795, 13.747314453125, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747244834899902, 13.74731159210205, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747316360473633, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747314453125, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747318267822266, 13.74731731414795, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.747302055358887, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731159210205, 13.747319221496582, 13.747319221496582, 13.74731159210205, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.747318267822266, 13.747318267822266, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731159210205, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747315406799316, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747313499450684, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731159210205, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747313499450684, 13.747319221496582, 13.747321128845215, 13.74731731414795, 13.747318267822266, 13.74731731414795, 13.74731731414795, 13.747318267822266, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.747321128845215, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747203826904297, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.74731731414795, 13.747319221496582, 13.747309684753418, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74730396270752, 13.747318267822266, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747315406799316, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747309684753418, 13.747318267822266, 13.74731731414795, 13.747319221496582, 13.747313499450684, 13.747319221496582, 13.747276306152344, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747321128845215, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731159210205, 13.747319221496582, 13.747313499450684, 13.747319221496582, 13.747316360473633, 13.747319221496582, 13.747319221496582, 13.747319221496582]
Actual: [tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([37.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([75.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([369.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([87.], dtype=torch.float64)]
MSE: 416.70602852670476
Predicted: [14.151763916015625, 14.151764869689941, 14.151761054992676, 14.151761054992676, 14.151765823364258, 14.151762962341309, 14.151874542236328, 14.151762962341309, 14.15176010131836, 14.151762008666992, 14.151765823364258, 14.151769638061523, 14.151761054992676, 14.15176010131836, 14.151761054992676, 14.151773452758789, 14.15176010131836, 14.151766777038574, 14.15176773071289, 14.15176010131836, 14.151762008666992, 14.151759147644043, 14.151763916015625, 14.151768684387207, 14.15176010131836, 14.151766777038574, 14.151762008666992, 14.151762008666992, 14.151762008666992, 14.151761054992676, 14.151759147644043, 14.151762008666992, 14.151765823364258, 14.151764869689941, 14.151765823364258, 14.151762962341309, 14.151771545410156, 14.15176010131836, 14.151765823364258, 14.151762008666992, 14.151762008666992, 14.15176010131836, 14.15176010131836, 14.151769638061523, 14.151768684387207, 14.151762962341309, 14.151765823364258, 14.151762008666992, 14.151811599731445, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151762962341309, 14.151763916015625, 14.15176010131836, 14.151761054992676, 14.15176010131836, 14.151824951171875, 14.15176010131836, 14.151762008666992, 14.151762008666992, 14.151762962341309, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151763916015625, 14.151762008666992, 14.151815414428711, 14.151765823364258, 14.151762008666992, 14.15176010131836, 14.151761054992676, 14.151761054992676, 14.151762008666992, 14.151775360107422, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151761054992676, 14.15179443359375, 14.151777267456055, 14.15176010131836, 14.15176010131836, 14.151765823364258, 14.15176010131836, 14.151764869689941, 14.151763916015625, 14.151782989501953, 14.151762008666992, 14.151771545410156, 14.15176773071289, 14.151769638061523, 14.151762008666992, 14.15182113647461, 14.15176773071289, 14.151766777038574, 14.151766777038574, 14.151885986328125, 14.151762008666992, 14.151762008666992, 14.151779174804688, 14.151766777038574, 14.15176010131836, 14.151762008666992, 14.15179443359375, 14.15176010131836, 14.151766777038574, 14.151812553405762, 14.15176010131836, 14.151765823364258, 14.15176010131836, 14.151762962341309, 14.151765823364258, 14.151762008666992, 14.151771545410156, 14.151762962341309, 14.151763916015625, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151762962341309, 14.151775360107422, 14.151786804199219, 14.151775360107422, 14.15176010131836, 14.151796340942383, 14.151766777038574, 14.15178108215332, 14.15176010131836, 14.151762008666992, 14.151762962341309, 14.151773452758789, 14.151761054992676, 14.15176010131836, 14.151762962341309, 14.15176010131836, 14.15176010131836, 14.151763916015625, 14.15176010131836, 14.151765823364258, 14.15176010131836, 14.151805877685547, 14.151759147644043, 14.151765823364258, 14.151762008666992, 14.15176010131836, 14.151759147644043, 14.151765823364258, 14.151762962341309, 14.15176010131836, 14.15176010131836, 14.151765823364258, 14.15176010131836, 14.15176010131836, 14.151762962341309, 14.151765823364258, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151761054992676, 14.151763916015625, 14.151761054992676, 14.15176010131836, 14.15178108215332, 14.151766777038574, 14.151772499084473, 14.151762008666992, 14.151765823364258, 14.151765823364258, 14.151765823364258, 14.15176010131836, 14.151764869689941, 14.151761054992676, 14.15176010131836, 14.151765823364258, 14.151773452758789, 14.151762008666992, 14.15176010131836, 14.151762962341309, 14.151761054992676, 14.151954650878906, 14.151761054992676, 14.15176773071289, 14.15176010131836, 14.15177059173584, 14.151773452758789, 14.15176010131836, 14.15176010131836, 14.151762962341309, 14.151771545410156, 14.151762962341309, 14.15176773071289, 14.151766777038574, 14.151775360107422, 14.15176010131836, 14.151762008666992, 14.151762008666992, 14.151761054992676, 14.15176010131836, 14.151765823364258, 14.15176010131836, 14.15176010131836, 14.151762962341309, 14.15176010131836, 14.151773452758789, 14.151777267456055, 14.151759147644043, 14.15176010131836, 14.151762962341309, 14.151762008666992, 14.151762008666992, 14.151762008666992, 14.151773452758789, 14.151761054992676, 14.151762962341309, 14.151762008666992, 14.151762008666992, 14.15177059173584, 14.151764869689941, 14.151768684387207, 14.15176773071289, 14.151761054992676, 14.151762962341309, 14.151762008666992, 14.15176010131836, 14.15176010131836, 14.151823043823242, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151763916015625, 14.151762008666992, 14.15176010131836, 14.151784896850586, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151763916015625, 14.151762008666992, 14.151765823364258, 14.151762008666992, 14.151775360107422, 14.151771545410156, 14.151777267456055, 14.151762962341309, 14.15176010131836, 14.151762008666992, 14.15176773071289, 14.151761054992676, 14.15176010131836, 14.151761054992676, 14.151762008666992, 14.15176010131836, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151764869689941, 14.151775360107422, 14.151766777038574, 14.15176010131836, 14.15176010131836, 14.151771545410156, 14.15176010131836, 14.15176773071289, 14.151761054992676, 14.151764869689941, 14.15176010131836, 14.151762962341309, 14.151763916015625, 14.151769638061523, 14.15176010131836, 14.151762008666992, 14.151762962341309, 14.15176010131836, 14.151761054992676, 14.151764869689941, 14.151762962341309, 14.151762008666992, 14.151765823364258, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151771545410156, 14.151762962341309, 14.151761054992676, 14.151765823364258, 14.15176010131836, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151761054992676, 14.15188980102539, 14.151761054992676, 14.15176010131836, 14.151762008666992, 14.151762008666992, 14.151759147644043, 14.151769638061523, 14.151764869689941, 14.151762962341309, 14.151762008666992, 14.151762008666992, 14.15176010131836, 14.15176010131836, 14.15174674987793, 14.151777267456055, 14.15176010131836, 14.151763916015625, 14.151766777038574, 14.151761054992676, 14.15176010131836, 14.151771545410156, 14.15176010131836, 14.15176010131836, 14.151766777038574, 14.151761054992676, 14.151776313781738, 14.15176010131836, 14.151762008666992, 14.151761054992676, 14.15176010131836, 14.151779174804688, 14.151769638061523, 14.15176010131836, 14.151762008666992, 14.151777267456055, 14.151764869689941, 14.151762008666992, 14.151763916015625, 14.151762008666992, 14.151786804199219, 14.151761054992676, 14.151765823364258, 14.15176773071289, 14.151762008666992, 14.151763916015625, 14.151763916015625, 14.15176010131836, 14.15176773071289, 14.151765823364258, 14.151762008666992, 14.151762008666992, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151762008666992, 14.151762962341309, 14.151763916015625, 14.151761054992676, 14.15176010131836, 14.151763916015625, 14.151762008666992, 14.151763916015625, 14.15176010131836, 14.151765823364258, 14.15176010131836, 14.151761054992676, 14.15176010131836, 14.151819229125977, 14.15176010131836, 14.151773452758789, 14.151830673217773, 14.151765823364258, 14.15176010131836, 14.151762008666992, 14.151765823364258, 14.151782989501953, 14.151782035827637, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151761054992676, 14.151779174804688, 14.151769638061523, 14.15176010131836, 14.151763916015625, 14.15176010131836, 14.151769638061523, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151759147644043, 14.151785850524902, 14.151764869689941, 14.151762008666992, 14.151762962341309, 14.151762008666992, 14.151824951171875, 14.151765823364258, 14.15176010131836, 14.151761054992676, 14.151759147644043, 14.151762008666992, 14.151779174804688, 14.151762008666992, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151771545410156, 14.151763916015625, 14.15176773071289, 14.151762008666992, 14.151761054992676, 14.151763916015625, 14.151762962341309, 14.15176010131836, 14.15176010131836, 14.151761054992676, 14.151777267456055, 14.151762008666992, 14.151796340942383, 14.15176773071289, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151762962341309, 14.15176010131836, 14.15176010131836, 14.151763916015625, 14.151764869689941, 14.15176010131836, 14.151762962341309, 14.151762962341309, 14.151782035827637, 14.151766777038574, 14.151763916015625, 14.151773452758789, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151765823364258, 14.151764869689941, 14.151771545410156, 14.151764869689941, 14.15176010131836, 14.151769638061523, 14.151761054992676, 14.151762008666992, 14.15176773071289, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151764869689941, 14.151768684387207, 14.151762008666992, 14.151762008666992, 14.15176010131836, 14.151762962341309, 14.151761054992676, 14.151762008666992, 14.151762008666992, 14.151761054992676, 14.15176773071289, 14.15176010131836, 14.15176773071289, 14.151763916015625, 14.151766777038574, 14.15176010131836, 14.15176010131836, 14.15176773071289, 14.151762962341309, 14.151769638061523, 14.151846885681152, 14.151764869689941, 14.151762008666992, 14.151763916015625, 14.15176010131836, 14.151771545410156, 14.151762008666992, 14.151826858520508, 14.151774406433105, 14.151762962341309, 14.151763916015625, 14.15176773071289, 14.151784896850586, 14.151762962341309, 14.151762962341309, 14.15176773071289, 14.15176010131836, 14.151763916015625, 14.15176773071289, 14.151762008666992, 14.151761054992676, 14.151762008666992, 14.151763916015625, 14.151762008666992, 14.15176010131836, 14.151764869689941, 14.151777267456055, 14.151762008666992, 14.15177059173584, 14.151762962341309, 14.151766777038574, 14.151817321777344, 14.15178108215332, 14.15176773071289, 14.151762962341309, 14.15176010131836]
Actual: [tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2401.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([226.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([382.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([161.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([245.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2588.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2720.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 39948.50331766723
Predicted: [14.555304527282715, 14.555289268493652, 14.555302619934082, 14.55529499053955, 14.555309295654297, 14.555296897888184, 14.555290222167969, 14.555289268493652, 14.555298805236816, 14.555291175842285, 14.555289268493652, 14.555293083190918, 14.555290222167969, 14.555296897888184, 14.555291175842285, 14.555293083190918, 14.555299758911133, 14.555310249328613, 14.555291175842285, 14.555292129516602, 14.555290222167969, 14.55530834197998, 14.555341720581055, 14.555296897888184, 14.555291175842285, 14.555293083190918, 14.555289268493652, 14.55529499053955, 14.5552978515625, 14.555304527282715, 14.555298805236816, 14.555289268493652, 14.555350303649902, 14.555291175842285, 14.555296897888184, 14.555296897888184, 14.555293083190918, 14.555303573608398, 14.55530071258545, 14.555293083190918, 14.555296897888184, 14.555302619934082, 14.555293083190918, 14.555307388305664, 14.555304527282715, 14.5552978515625, 14.555289268493652, 14.555289268493652, 14.555299758911133, 14.555296897888184, 14.555289268493652, 14.55529499053955, 14.555289268493652, 14.555294036865234, 14.555298805236816, 14.555289268493652, 14.555289268493652, 14.555293083190918, 14.555291175842285, 14.555290222167969, 14.555293083190918, 14.555291175842285, 14.555291175842285, 14.555293083190918, 14.555291175842285, 14.555298805236816, 14.555310249328613, 14.555291175842285, 14.555314064025879, 14.555289268493652, 14.555292129516602, 14.555319786071777, 14.555303573608398, 14.555302619934082, 14.555405616760254, 14.555291175842285, 14.555292129516602, 14.555296897888184, 14.555290222167969, 14.555298805236816, 14.555298805236816, 14.555295944213867, 14.555291175842285, 14.555291175842285, 14.555289268493652, 14.555293083190918, 14.555293083190918, 14.555309295654297, 14.555320739746094, 14.555292129516602, 14.555291175842285, 14.555293083190918, 14.555289268493652, 14.555296897888184, 14.55529499053955, 14.555299758911133, 14.555289268493652, 14.555306434631348, 14.555296897888184, 14.555291175842285, 14.55529499053955, 14.55530071258545, 14.555291175842285, 14.555289268493652, 14.555294036865234, 14.55530834197998, 14.555312156677246, 14.555289268493652, 14.55529499053955, 14.555293083190918, 14.555298805236816, 14.55532455444336, 14.55529499053955, 14.55529499053955, 14.555291175842285, 14.55529499053955, 14.555291175842285, 14.555301666259766, 14.55529499053955, 14.555289268493652, 14.555298805236816, 14.555302619934082, 14.555303573608398, 14.555293083190918, 14.555298805236816, 14.555378913879395, 14.555292129516602, 14.555296897888184, 14.555289268493652, 14.555302619934082, 14.555304527282715, 14.555291175842285, 14.555301666259766, 14.555312156677246, 14.555289268493652, 14.555292129516602, 14.555289268493652, 14.55529499053955, 14.555293083190918, 14.555296897888184, 14.555289268493652, 14.555291175842285, 14.555291175842285, 14.555292129516602, 14.555290222167969, 14.555289268493652, 14.555305480957031, 14.555289268493652, 14.555289268493652, 14.5552978515625, 14.555294036865234, 14.555291175842285, 14.555289268493652, 14.555296897888184, 14.555303573608398, 14.5552978515625, 14.555302619934082, 14.555294036865234, 14.555289268493652, 14.555293083190918, 14.55529499053955, 14.55530071258545, 14.555296897888184, 14.555328369140625, 14.555301666259766, 14.555291175842285, 14.555296897888184, 14.555295944213867, 14.55529499053955, 14.55529499053955, 14.555289268493652, 14.555291175842285, 14.555327415466309, 14.555296897888184, 14.555298805236816, 14.555294036865234, 14.55529499053955, 14.555293083190918, 14.555291175842285, 14.555299758911133, 14.555313110351562, 14.555312156677246, 14.555291175842285, 14.555291175842285, 14.555302619934082, 14.555291175842285, 14.555289268493652, 14.555291175842285, 14.555291175842285, 14.555290222167969, 14.555302619934082, 14.555291175842285, 14.555298805236816, 14.555291175842285, 14.55530071258545, 14.555291175842285, 14.555298805236816, 14.55529499053955, 14.555289268493652, 14.555312156677246, 14.555294036865234, 14.555304527282715, 14.555291175842285, 14.555289268493652, 14.55529499053955, 14.55533504486084, 14.555291175842285, 14.555293083190918, 14.555299758911133, 14.555306434631348, 14.555293083190918, 14.555289268493652, 14.555293083190918, 14.555293083190918, 14.555296897888184, 14.55529499053955, 14.555302619934082, 14.555296897888184, 14.555319786071777, 14.555290222167969, 14.555304527282715, 14.555296897888184, 14.555296897888184, 14.555291175842285, 14.555299758911133, 14.555291175842285, 14.555296897888184, 14.555299758911133, 14.555294036865234, 14.555290222167969, 14.555289268493652, 14.555291175842285, 14.555293083190918, 14.5552978515625, 14.555302619934082, 14.555302619934082, 14.55530071258545, 14.555290222167969, 14.555289268493652, 14.555293083190918, 14.555289268493652, 14.555298805236816, 14.555302619934082, 14.555293083190918, 14.555293083190918, 14.555302619934082, 14.555296897888184, 14.555305480957031, 14.555291175842285, 14.555291175842285, 14.555291175842285, 14.555291175842285, 14.555296897888184, 14.555289268493652, 14.555291175842285, 14.555290222167969, 14.555294036865234, 14.555290222167969, 14.555291175842285, 14.555294036865234, 14.555296897888184, 14.555290222167969, 14.555290222167969, 14.555289268493652, 14.55529499053955, 14.555289268493652, 14.555296897888184, 14.555294036865234, 14.555310249328613, 14.555291175842285, 14.555292129516602, 14.555289268493652, 14.555289268493652, 14.555291175842285, 14.555293083190918, 14.555386543273926, 14.555291175842285, 14.555292129516602, 14.555290222167969, 14.55529499053955, 14.55529499053955, 14.555298805236816, 14.555291175842285, 14.555291175842285, 14.555306434631348, 14.555289268493652, 14.555296897888184, 14.555290222167969, 14.555298805236816, 14.55529499053955, 14.555289268493652, 14.555289268493652, 14.555296897888184, 14.555293083190918, 14.555291175842285, 14.555306434631348, 14.555289268493652, 14.555298805236816, 14.555291175842285, 14.55529499053955, 14.555294036865234, 14.555293083190918, 14.555314064025879, 14.55529499053955, 14.555291175842285, 14.555290222167969, 14.555293083190918, 14.555291175842285, 14.555292129516602, 14.555296897888184, 14.555296897888184, 14.555307388305664, 14.555295944213867, 14.555305480957031, 14.55529499053955, 14.555289268493652, 14.555316925048828, 14.555289268493652, 14.55529499053955, 14.555289268493652, 14.555291175842285, 14.555289268493652, 14.555289268493652, 14.555293083190918, 14.555290222167969, 14.555293083190918, 14.555290222167969, 14.555305480957031, 14.555289268493652, 14.555293083190918, 14.555291175842285, 14.555289268493652, 14.555293083190918, 14.555289268493652, 14.555289268493652, 14.555291175842285, 14.555293083190918, 14.555291175842285, 14.555298805236816, 14.555293083190918, 14.555298805236816, 14.555290222167969, 14.555296897888184, 14.555296897888184, 14.555292129516602, 14.55529499053955, 14.555302619934082, 14.555290222167969, 14.555289268493652, 14.555291175842285, 14.555291175842285, 14.555293083190918, 14.55529499053955, 14.555306434631348, 14.555291175842285, 14.555291175842285, 14.555290222167969, 14.555289268493652, 14.555289268493652, 14.555292129516602, 14.55529499053955, 14.555289268493652, 14.55529499053955, 14.555293083190918, 14.55530834197998, 14.555291175842285, 14.55530071258545, 14.55529499053955, 14.55529499053955, 14.555291175842285, 14.555291175842285, 14.555296897888184, 14.555289268493652, 14.555289268493652, 14.55529499053955, 14.555291175842285, 14.555296897888184, 14.555350303649902, 14.555289268493652, 14.555299758911133, 14.555296897888184, 14.555342674255371, 14.555298805236816, 14.555296897888184, 14.555291175842285, 14.555289268493652, 14.55530071258545, 14.55529499053955, 14.555290222167969, 14.555291175842285, 14.555296897888184, 14.555289268493652, 14.555291175842285, 14.555289268493652, 14.555289268493652, 14.555292129516602, 14.555289268493652, 14.55529499053955, 14.555333137512207, 14.555291175842285, 14.555296897888184, 14.555325508117676, 14.555293083190918, 14.555289268493652, 14.5552978515625, 14.555319786071777, 14.55529499053955, 14.555289268493652, 14.55530834197998, 14.555296897888184, 14.555304527282715, 14.555296897888184, 14.555289268493652, 14.555304527282715, 14.555292129516602, 14.555292129516602, 14.555291175842285, 14.555293083190918, 14.555295944213867, 14.55529499053955, 14.555293083190918, 14.555325508117676, 14.555294036865234, 14.555295944213867, 14.555291175842285, 14.555293083190918, 14.555306434631348, 14.555304527282715, 14.555290222167969, 14.555291175842285, 14.55531120300293, 14.555291175842285, 14.555289268493652, 14.555302619934082, 14.555293083190918, 14.555295944213867, 14.55529499053955, 14.555289268493652, 14.555289268493652, 14.55529499053955, 14.555296897888184, 14.55529499053955, 14.555295944213867, 14.555289268493652, 14.555291175842285, 14.555295944213867, 14.555291175842285, 14.555292129516602, 14.555293083190918, 14.555293083190918, 14.555292129516602, 14.555306434631348, 14.55529499053955, 14.55529499053955, 14.555289268493652, 14.555291175842285, 14.55529499053955, 14.555296897888184, 14.555302619934082, 14.555289268493652, 14.555302619934082, 14.555291175842285, 14.55530071258545, 14.555291175842285, 14.555291175842285, 14.555293083190918, 14.55530071258545, 14.555291175842285, 14.555315971374512, 14.555291175842285, 14.555293083190918, 14.555299758911133, 14.555296897888184, 14.55529499053955, 14.555315971374512, 14.55528736114502, 14.555291175842285, 14.555290222167969, 14.555291175842285, 14.555302619934082, 14.555289268493652, 14.555289268493652, 14.555295944213867, 14.555291175842285, 14.555307388305664, 14.555291175842285, 14.55529499053955, 14.555295944213867, 14.555289268493652, 14.555291175842285, 14.555293083190918, 14.555289268493652, 14.555293083190918, 14.555289268493652, 14.555303573608398, 14.555294036865234, 14.555289268493652, 14.555293083190918, 14.555289268493652, 14.555293083190918]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([65.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64)]
MSE: 172.19035344430458
Predicted: [14.006682395935059, 14.006677627563477, 14.006675720214844, 14.006684303283691, 14.006677627563477, 14.006684303283691, 14.00667667388916, 14.006682395935059, 14.006678581237793, 14.00667953491211, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006682395935059, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006685256958008, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006678581237793, 14.006680488586426, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.00667667388916, 14.006665229797363, 14.006688117980957, 14.00667953491211, 14.006684303283691, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006683349609375, 14.006678581237793, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006678581237793, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.006680488586426, 14.006680488586426, 14.006677627563477, 14.006678581237793, 14.00667953491211, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.006675720214844, 14.006677627563477, 14.00667667388916, 14.006675720214844, 14.006680488586426, 14.006681442260742, 14.00667667388916, 14.006677627563477, 14.006684303283691, 14.00667667388916, 14.006683349609375, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006682395935059, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006680488586426, 14.006680488586426, 14.006677627563477, 14.00667667388916, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.006685256958008, 14.00667667388916, 14.00667667388916, 14.00667667388916, 14.006678581237793, 14.006680488586426, 14.006684303283691, 14.006678581237793, 14.006685256958008, 14.006684303283691, 14.006682395935059, 14.006680488586426, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006684303283691, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006682395935059, 14.00669002532959, 14.006677627563477, 14.006675720214844, 14.006680488586426, 14.006682395935059, 14.00667667388916, 14.00667667388916, 14.006685256958008, 14.006707191467285, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.006678581237793, 14.006678581237793, 14.006677627563477, 14.006682395935059, 14.00667667388916, 14.006680488586426, 14.006685256958008, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006685256958008, 14.006678581237793, 14.006677627563477, 14.006699562072754, 14.006678581237793, 14.006678581237793, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006681442260742, 14.006678581237793, 14.006684303283691, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006682395935059, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006688117980957, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006678581237793, 14.006680488586426, 14.006682395935059, 14.006678581237793, 14.006680488586426, 14.006680488586426, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.006691932678223, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006682395935059, 14.006693840026855, 14.006693840026855, 14.006678581237793, 14.006682395935059, 14.006684303283691, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006680488586426, 14.006677627563477, 14.00667667388916, 14.006678581237793, 14.00667953491211, 14.006677627563477, 14.006682395935059, 14.006677627563477, 14.006678581237793, 14.006680488586426, 14.006731986999512, 14.006682395935059, 14.006677627563477, 14.006682395935059, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.00667953491211, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006702423095703, 14.006693840026855, 14.006682395935059, 14.006678581237793, 14.006688117980957, 14.006677627563477, 14.00667953491211, 14.00667667388916, 14.00667667388916, 14.00667667388916, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006678581237793, 14.006678581237793, 14.006678581237793, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006678581237793, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006678581237793, 14.006682395935059, 14.006681442260742, 14.006680488586426, 14.006680488586426, 14.006680488586426, 14.00667667388916, 14.00667667388916, 14.006678581237793, 14.006678581237793, 14.006680488586426, 14.006684303283691, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006675720214844, 14.006677627563477, 14.006677627563477, 14.006693840026855, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006686210632324, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006681442260742, 14.00667667388916, 14.006684303283691, 14.006678581237793, 14.006693840026855, 14.00669002532959, 14.006678581237793, 14.006682395935059, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006688117980957, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006675720214844, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006681442260742, 14.006677627563477, 14.00667667388916, 14.006675720214844, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.006685256958008, 14.006678581237793, 14.00667667388916, 14.006680488586426, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006686210632324, 14.006677627563477, 14.006693840026855, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006682395935059, 14.00667953491211, 14.00667667388916, 14.006688117980957, 14.00667667388916, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.00667953491211, 14.006680488586426, 14.006684303283691, 14.006678581237793, 14.00667667388916, 14.006680488586426, 14.00667667388916, 14.006677627563477, 14.00669002532959, 14.006682395935059, 14.006678581237793, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006682395935059, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006680488586426, 14.006680488586426, 14.00667667388916, 14.00667667388916, 14.006677627563477, 14.00698184967041, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006678581237793, 14.00667953491211, 14.00667667388916, 14.006688117980957, 14.006677627563477, 14.006677627563477, 14.00667953491211, 14.006677627563477, 14.006677627563477, 14.006693840026855, 14.00667667388916, 14.006714820861816, 14.006677627563477, 14.006682395935059, 14.00667667388916, 14.00667953491211, 14.006680488586426, 14.00667667388916, 14.006680488586426, 14.00667667388916, 14.006677627563477, 14.006682395935059, 14.006682395935059, 14.00667667388916, 14.006680488586426, 14.006688117980957, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006682395935059, 14.006677627563477, 14.00667667388916, 14.006682395935059, 14.006677627563477, 14.006677627563477, 14.006686210632324, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006675720214844, 14.006680488586426, 14.00667667388916, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006680488586426, 14.006677627563477, 14.006685256958008, 14.006677627563477, 14.006674766540527, 14.00670337677002, 14.006688117980957, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.006678581237793, 14.006678581237793, 14.006677627563477, 14.006688117980957, 14.006684303283691, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.006686210632324, 14.006677627563477, 14.006691932678223, 14.006678581237793, 14.006686210632324, 14.006680488586426, 14.006680488586426, 14.00667667388916, 14.00667667388916, 14.006685256958008, 14.006695747375488, 14.006677627563477, 14.00667953491211, 14.00668716430664, 14.006681442260742, 14.006675720214844, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.006685256958008, 14.006678581237793, 14.006677627563477, 14.00669002532959, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006658554077148, 14.006696701049805, 14.006680488586426, 14.006684303283691, 14.006682395935059, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006682395935059, 14.006677627563477, 14.00667667388916, 14.006705284118652, 14.006677627563477, 14.006682395935059, 14.00667667388916, 14.00667667388916]
Actual: [tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([427.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([397.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([560.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([242.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3901.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([160.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1052.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([51.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 33901.60544251853
Predicted: [13.649177551269531, 13.649177551269531, 13.649175643920898, 13.649175643920898, 13.64918041229248, 13.649178504943848, 13.649176597595215, 13.649178504943848, 13.64918041229248, 13.649175643920898, 13.649176597595215, 13.649176597595215, 13.649179458618164, 13.649176597595215, 13.649176597595215, 13.64918041229248, 13.649178504943848, 13.64918041229248, 13.64917278289795, 13.649175643920898, 13.649174690246582, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.64918041229248, 13.649187088012695, 13.649176597595215, 13.649177551269531, 13.649175643920898, 13.649178504943848, 13.649178504943848, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.649187088012695, 13.649173736572266, 13.649187088012695, 13.649179458618164, 13.64917278289795, 13.649174690246582, 13.649177551269531, 13.64927864074707, 13.649175643920898, 13.649175643920898, 13.649177551269531, 13.649175643920898, 13.649173736572266, 13.649188041687012, 13.649175643920898, 13.649175643920898, 13.649189949035645, 13.64917278289795, 13.64917278289795, 13.649174690246582, 13.649175643920898, 13.64918041229248, 13.649175643920898, 13.64918041229248, 13.649177551269531, 13.64917278289795, 13.649176597595215, 13.649192810058594, 13.649303436279297, 13.649174690246582, 13.649176597595215, 13.649175643920898, 13.649182319641113, 13.649177551269531, 13.649175643920898, 13.649179458618164, 13.649178504943848, 13.649173736572266, 13.649179458618164, 13.649174690246582, 13.64919662475586, 13.649179458618164, 13.64917278289795, 13.649178504943848, 13.64918327331543, 13.649178504943848, 13.649177551269531, 13.649177551269531, 13.649177551269531, 13.649178504943848, 13.649179458618164, 13.649175643920898, 13.64918041229248, 13.649174690246582, 13.649176597595215, 13.649174690246582, 13.649175643920898, 13.649188041687012, 13.649176597595215, 13.649173736572266, 13.649174690246582, 13.649179458618164, 13.649184226989746, 13.649229049682617, 13.649177551269531, 13.649247169494629, 13.649179458618164, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.649186134338379, 13.649176597595215, 13.649175643920898, 13.649179458618164, 13.649176597595215, 13.649173736572266, 13.649568557739258, 13.649177551269531, 13.649187088012695, 13.649174690246582, 13.649177551269531, 13.649175643920898, 13.649173736572266, 13.649175643920898, 13.649177551269531, 13.649174690246582, 13.649179458618164, 13.64917278289795, 13.649190902709961, 13.649177551269531, 13.64925765991211, 13.649177551269531, 13.649195671081543, 13.64917278289795, 13.649175643920898, 13.649177551269531, 13.649179458618164, 13.649175643920898, 13.649175643920898, 13.649173736572266, 13.649174690246582, 13.649188995361328, 13.649188995361328, 13.649175643920898, 13.649174690246582, 13.649178504943848, 13.649173736572266, 13.649173736572266, 13.64917278289795, 13.649182319641113, 13.649175643920898, 13.649178504943848, 13.649190902709961, 13.649179458618164, 13.649173736572266, 13.649175643920898, 13.649173736572266, 13.649177551269531, 13.649175643920898, 13.649173736572266, 13.649173736572266, 13.649192810058594, 13.649176597595215, 13.649179458618164, 13.64918041229248, 13.649181365966797, 13.64918041229248, 13.649200439453125, 13.64918327331543, 13.649179458618164, 13.649175643920898, 13.649178504943848, 13.64918041229248, 13.649175643920898, 13.649175643920898, 13.649187088012695, 13.649175643920898, 13.649175643920898, 13.649181365966797, 13.649182319641113, 13.649175643920898, 13.649208068847656, 13.649175643920898, 13.64917278289795, 13.649178504943848, 13.649176597595215, 13.649179458618164, 13.649174690246582, 13.649178504943848, 13.649181365966797, 13.649176597595215, 13.649182319641113, 13.649173736572266, 13.649175643920898, 13.649179458618164, 13.649174690246582, 13.649176597595215, 13.64920425415039, 13.649177551269531, 13.649187088012695, 13.649175643920898, 13.649174690246582, 13.649184226989746, 13.649178504943848, 13.649173736572266, 13.649177551269531, 13.649177551269531, 13.649177551269531, 13.649177551269531, 13.649174690246582, 13.649175643920898, 13.649175643920898, 13.649178504943848, 13.649175643920898, 13.649173736572266, 13.649188995361328, 13.64918041229248, 13.649175643920898, 13.649174690246582, 13.649175643920898, 13.649175643920898, 13.649178504943848, 13.64920711517334, 13.649179458618164, 13.649188995361328, 13.649174690246582, 13.649175643920898, 13.649194717407227, 13.649188995361328, 13.649175643920898, 13.649185180664062, 13.649181365966797, 13.649176597595215, 13.649190902709961, 13.649179458618164, 13.649175643920898, 13.649185180664062, 13.649179458618164, 13.649177551269531, 13.649179458618164, 13.649175643920898, 13.64918327331543, 13.649175643920898, 13.649173736572266, 13.649174690246582, 13.649192810058594, 13.649175643920898, 13.649192810058594, 13.649177551269531, 13.649181365966797, 13.649179458618164, 13.64917278289795, 13.649205207824707, 13.64917278289795, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.649208068847656, 13.649174690246582, 13.64917278289795, 13.649179458618164, 13.649175643920898, 13.649173736572266, 13.649175643920898, 13.649175643920898, 13.649173736572266, 13.649178504943848, 13.649187088012695, 13.649188041687012, 13.649175643920898, 13.64918041229248, 13.649242401123047, 13.649179458618164, 13.649182319641113, 13.64918327331543, 13.649174690246582, 13.649175643920898, 13.649174690246582, 13.649177551269531, 13.649177551269531, 13.649178504943848, 13.649181365966797, 13.649178504943848, 13.649177551269531, 13.649175643920898, 13.649194717407227, 13.649175643920898, 13.649173736572266, 13.64917278289795, 13.649174690246582, 13.649176597595215, 13.649177551269531, 13.649316787719727, 13.649175643920898, 13.649215698242188, 13.649178504943848, 13.649173736572266, 13.649177551269531, 13.649177551269531, 13.649174690246582, 13.649181365966797, 13.649181365966797, 13.649174690246582, 13.649225234985352, 13.649178504943848, 13.649176597595215, 13.649189949035645, 13.649173736572266, 13.649179458618164, 13.649179458618164, 13.649198532104492, 13.64918327331543, 13.649175643920898, 13.649173736572266, 13.649178504943848, 13.649175643920898, 13.64917278289795, 13.649176597595215, 13.649175643920898, 13.649175643920898, 13.64917278289795, 13.649181365966797, 13.649174690246582, 13.649179458618164, 13.649181365966797, 13.649185180664062, 13.649177551269531, 13.649173736572266, 13.649181365966797, 13.649177551269531, 13.649173736572266, 13.649178504943848, 13.649173736572266, 13.649181365966797, 13.649178504943848, 13.649177551269531, 13.649177551269531, 13.649177551269531, 13.649179458618164, 13.649192810058594, 13.649181365966797, 13.649175643920898, 13.649176597595215, 13.649177551269531, 13.649179458618164, 13.649175643920898, 13.649174690246582, 13.649177551269531, 13.649175643920898, 13.649208068847656, 13.649173736572266, 13.64918041229248, 13.649234771728516, 13.649189949035645, 13.649181365966797, 13.649173736572266, 13.649173736572266, 13.649177551269531, 13.649173736572266, 13.649179458618164, 13.649177551269531, 13.64918041229248, 13.649188995361328, 13.649184226989746, 13.649175643920898, 13.649176597595215, 13.649173736572266, 13.649174690246582, 13.649181365966797, 13.64918327331543, 13.649187088012695, 13.64918041229248, 13.649175643920898, 13.649181365966797, 13.649173736572266, 13.649181365966797, 13.649175643920898, 13.649173736572266, 13.649175643920898, 13.649174690246582, 13.649173736572266, 13.649188995361328, 13.649177551269531, 13.649179458618164, 13.649178504943848, 13.649188041687012, 13.649175643920898, 13.649173736572266, 13.649174690246582, 13.64917278289795, 13.649174690246582, 13.649182319641113, 13.649178504943848, 13.649179458618164, 13.649260520935059, 13.649177551269531, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.64918327331543, 13.649175643920898, 13.649177551269531, 13.649175643920898, 13.649181365966797, 13.649177551269531, 13.649175643920898, 13.64918041229248, 13.649175643920898, 13.649179458618164, 13.649174690246582, 13.649181365966797, 13.649174690246582, 13.649181365966797, 13.649186134338379, 13.649190902709961, 13.649173736572266, 13.64917278289795, 13.649175643920898, 13.649177551269531, 13.649178504943848, 13.649178504943848, 13.649173736572266, 13.649177551269531, 13.649209976196289, 13.649175643920898, 13.64918041229248, 13.649181365966797, 13.649176597595215, 13.649188995361328, 13.649177551269531, 13.649173736572266, 13.649173736572266, 13.649177551269531, 13.649174690246582, 13.649174690246582, 13.649177551269531, 13.649176597595215, 13.649175643920898, 13.649177551269531, 13.649176597595215, 13.649178504943848, 13.649179458618164, 13.649175643920898, 13.649175643920898, 13.649177551269531, 13.64917278289795, 13.649176597595215, 13.649182319641113, 13.649177551269531, 13.649178504943848, 13.649184226989746, 13.649174690246582, 13.64917278289795, 13.649175643920898, 13.649175643920898, 13.649177551269531, 13.649177551269531, 13.649216651916504, 13.649175643920898, 13.649176597595215, 13.649177551269531, 13.649176597595215, 13.64917278289795, 13.649173736572266, 13.64918327331543, 13.649200439453125, 13.649177551269531, 13.649175643920898, 13.649176597595215, 13.649417877197266, 13.649175643920898, 13.649178504943848, 13.649178504943848, 13.649175643920898, 13.649356842041016, 13.649175643920898, 13.649175643920898, 13.649181365966797, 13.649174690246582, 13.649179458618164, 13.64918327331543, 13.649177551269531, 13.649173736572266, 13.649181365966797, 13.649179458618164, 13.649175643920898, 13.64917278289795, 13.649176597595215, 13.649173736572266, 13.64921760559082, 13.64917278289795, 13.649175643920898, 13.649192810058594, 13.649181365966797, 13.64918327331543, 13.649181365966797, 13.649175643920898, 13.649174690246582, 13.649178504943848, 13.649175643920898, 13.64917278289795, 13.649175643920898, 13.649181365966797, 13.649181365966797, 13.649187088012695]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([219.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([153.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([109.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([97.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 312.34808118598863
Predicted: [15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064703941345215, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702033996582, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702033996582, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.064827919006348, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.064719200134277, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064762115478516, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470775604248, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064850807189941, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06471061706543, 15.064699172973633, 15.064699172973633, 15.064705848693848, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064714431762695, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064711570739746, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702033996582, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064702033996582, 15.06470012664795, 15.064703941345215, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.065136909484863, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06478214263916, 15.064699172973633, 15.06470775604248, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064704895019531, 15.06470012664795, 15.06470012664795, 15.064702033996582, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064753532409668, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.064702033996582, 15.064699172973633, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064705848693848, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.064750671386719, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064750671386719, 15.06470012664795, 15.06470012664795, 15.064705848693848, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702033996582, 15.064704895019531, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064705848693848, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064703941345215, 15.06470012664795, 15.064699172973633, 15.064719200134277, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.064702033996582]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([930.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([48.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1853.3309940775603
Predicted: [15.842057228088379, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842061042785645, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842058181762695, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842057228088379, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842061042785645, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842061996459961, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.84210205078125, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842066764831543, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842061996459961, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842059135437012, 15.842058181762695, 15.842059135437012, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842082023620605, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([31213.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([263.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64)]
MSE: 1946846.941595708
Predicted: [17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.24319076538086, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594]
Actual: [tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1214.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([220.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([281.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([114.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([158.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([727.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([155.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 4428.463524646851
Predicted: [17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041170120239258, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.04117202758789, 17.041166305541992, 17.041166305541992, 17.041168212890625, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041170120239258, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041168212890625, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041173934936523, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041170120239258, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992]
Actual: [tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3675.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([51.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([151.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([421.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([930.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 29022.458498548203
Predicted: [18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28012466430664, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280120849609375, 18.280113220214844, 18.280120849609375, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280126571655273, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280132293701172, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280118942260742, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280120849609375, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011131286621, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844]
Actual: [tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([355.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([205.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6907.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([80.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([372.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([92.], dtype=torch.float64)]
MSE: 95742.83277306678
Predicted: [18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.00838851928711, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.00838851928711, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.00838851928711, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844]
Actual: [tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([688.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([49914.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([49.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 4980379.463896457
Predicted: [17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68791961669922, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68792724609375, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68791961669922, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687917709350586, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687917709350586, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68791961669922, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68791961669922, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953]
Actual: [tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([90.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([829.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4106.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7661.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([180.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([876.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 153373.09922863136
Predicted: [17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.29140281677246, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291404724121094, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.29140281677246, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291404724121094, 17.291400909423828, 17.291400909423828, 17.291400909423828]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([121.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([72.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([62.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([157.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([368.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2401.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([226.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([382.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([161.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 12310.854196729913
Predicted: [5.291390895843506, 5.279051780700684, 5.324124813079834, 5.2191925048828125, 5.326685428619385, 5.2227253913879395, 5.279008388519287, 5.289453506469727, 5.2337470054626465, 5.27865743637085, 5.291560649871826, 5.2187652587890625, 5.304637432098389, 5.2483811378479, 5.219999313354492, 5.11598014831543, 5.286718845367432, 5.302079677581787, 5.226287364959717, 5.278873920440674, 5.276762008666992, 5.221697807312012, 5.228137969970703, 5.270178318023682, 5.233148097991943, 5.265202045440674, 5.28821325302124, 5.243998050689697, 5.2207441329956055, 5.280051231384277, 5.218903064727783, 5.247647285461426, 5.120392322540283, 5.243694305419922, 5.340745449066162, 5.287312030792236, 5.255910396575928, 5.217627048492432, 5.3504109382629395, 5.287539482116699, 5.286186695098877, 5.228765964508057, 5.2665510177612305, 5.287181377410889, 5.290526866912842, 5.2219743728637695, 5.280788898468018, 5.281637191772461, 5.290289402008057, 5.2907586097717285, 5.23900842666626, 5.2916340827941895, 5.2262468338012695, 5.2852783203125, 5.290409564971924, 5.229588031768799, 5.286056995391846, 5.217946529388428, 5.341026782989502, 5.2847418785095215, 5.2643723487854, 5.287559986114502, 5.222171306610107, 5.289046287536621, 5.289071559906006, 5.350926876068115, 5.220457553863525, 5.285472393035889, 5.219611167907715, 5.257188320159912, 5.259644031524658, 5.288374423980713, 5.258973598480225, 5.291700839996338, 5.22495698928833, 5.220836162567139, 5.273618221282959, 5.2912116050720215, 5.275068759918213, 5.179382801055908, 5.289435863494873, 5.2911295890808105, 5.217121601104736, 5.274104595184326, 5.291767597198486, 5.260030269622803, 5.252866268157959, 5.274413108825684, 5.261904239654541, 5.230557918548584, 5.287988185882568, 5.285376071929932, 5.219690322875977, 5.265835762023926, 5.258820056915283, 5.241977214813232, 5.291510105133057, 5.2247700691223145, 5.231607437133789, 5.282559871673584, 5.284019947052002, 5.262252330780029, 5.263952732086182, 5.290308475494385, 5.268462657928467, 5.279086589813232, 5.265472888946533, 5.282156467437744, 5.2255024909973145, 5.277429580688477, 5.243144989013672, 5.288635730743408, 5.284529685974121, 5.2190680503845215, 5.329995632171631, 5.229321002960205, 5.262026786804199, 5.264626979827881, 5.2645978927612305, 5.249879837036133, 5.289635181427002, 5.232646465301514, 5.2389445304870605, 5.281324863433838, 5.2906174659729, 5.28300142288208, 5.279736042022705, 5.22108793258667, 5.226306438446045, 5.291055202484131, 5.260304927825928, 5.251610279083252, 5.277421951293945, 5.26421594619751, 5.262911319732666, 5.225043773651123, 5.226104259490967, 5.2778215408325195, 5.2200446128845215, 5.290714740753174, 5.267989635467529, 5.236311912536621, 5.535350322723389, 5.245111465454102, 5.234415531158447, 5.245401382446289, 5.289198398590088, 5.255721569061279, 5.227522850036621, 5.242245197296143, 5.246540546417236, 5.241309642791748, 5.291641712188721, 5.264894008636475, 5.289207935333252, 5.346456050872803, 5.218139171600342, 5.2515869140625, 5.220643520355225, 5.273483753204346, 5.277512550354004, 5.233477592468262, 5.255221843719482, 5.264484405517578, 5.2904558181762695, 5.270949840545654, 5.291560649871826, 5.218821048736572, 5.289228916168213, 5.219600200653076, 5.248222351074219, 5.2890706062316895, 5.2527241706848145, 5.259453296661377, 5.279061794281006, 5.255598545074463, 5.275414943695068, 5.267874240875244, 5.283204555511475, 5.264533519744873, 5.2174859046936035, 5.289309024810791, 5.276362419128418, 5.2307209968566895, 5.230088710784912, 5.266622066497803, 5.284862995147705, 5.223145008087158, 5.28607177734375, 5.286636829376221, 5.228454113006592, 5.220287322998047, 5.451537132263184, 5.219671726226807, 5.273806095123291, 5.286928176879883, 5.289782524108887, 5.5144243240356445, 5.244065761566162, 5.343423366546631, 5.5271525382995605, 5.250194549560547, 5.223249912261963, 5.288273334503174, 5.220111846923828, 5.285057544708252, 5.288609027862549, 5.234231948852539, 5.245911121368408, 5.24844217300415, 5.282637596130371, 5.2868781089782715, 5.217061519622803, 5.274960994720459, 5.256739616394043, 5.274752140045166, 5.249764919281006, 5.2736334800720215, 5.298089504241943, 5.318779468536377, 5.344839572906494, 5.2892374992370605, 5.291322231292725, 5.2915778160095215, 5.289513111114502, 5.2338547706604, 5.271854877471924, 5.291000843048096, 5.231186389923096, 5.279607772827148, 5.218404293060303, 5.281867504119873, 5.274569511413574, 5.237590312957764, 5.28643274307251, 5.257297992706299, 5.218743324279785, 5.285979747772217, 5.275846481323242, 5.291612148284912, 5.290821552276611, 5.289040565490723, 5.2887749671936035, 5.274692535400391, 5.272706508636475, 5.28761625289917, 5.290332794189453, 5.227198600769043, 5.225533962249756, 5.23128080368042, 5.273909091949463, 5.233103275299072, 5.280828952789307, 5.272468090057373, 5.28747034072876, 5.291457176208496, 5.290995121002197, 5.337584495544434, 5.230234146118164, 5.282556056976318, 5.290727138519287, 5.240537643432617, 5.291193962097168, 5.217311382293701, 5.267662048339844, 5.3056464195251465, 5.240802764892578, 5.219738483428955, 5.264959335327148, 5.260275363922119, 5.271006107330322, 5.288188457489014, 5.218491077423096, 5.281472682952881, 5.272495269775391, 5.287963390350342, 5.242077350616455, 5.232915878295898, 5.233574867248535, 5.244487762451172, 5.270776271820068, 5.2171759605407715, 5.260636806488037, 5.34095573425293, 5.284526824951172, 5.232972145080566, 5.315104961395264, 5.291507720947266, 5.3467116355896, 5.284224033355713, 5.235510349273682, 5.291701793670654, 5.247622013092041, 5.289116382598877, 5.2327446937561035, 5.282068252563477, 5.26470422744751, 5.237454891204834, 5.222652912139893, 5.283551216125488, 5.2190775871276855, 5.124629497528076, 5.287557601928711, 5.255117893218994, 5.285792827606201, 5.287519454956055, 5.29003381729126, 5.249886989593506, 5.285151958465576, 5.222286701202393, 5.231324672698975, 5.238925933837891, 5.24342155456543, 5.2902045249938965, 5.352600574493408, 5.259028911590576, 5.287836074829102, 5.27130651473999, 5.285933971405029, 5.2665581703186035, 5.281634330749512, 5.28485631942749, 5.24420690536499, 5.281915187835693, 5.231380939483643, 5.252529621124268, 5.2905402183532715, 5.2660040855407715, 5.220274925231934, 5.1079888343811035, 5.2902607917785645, 5.245469570159912, 5.274848461151123, 5.223938465118408, 5.260800361633301, 5.2424492835998535, 5.284383296966553, 5.28060245513916, 5.25827693939209, 5.220145225524902, 5.263124942779541, 5.290245532989502, 5.2690510749816895, 5.233840465545654, 5.283557415008545, 5.220695972442627, 5.290001392364502, 5.2191619873046875, 5.264436721801758, 5.280283451080322, 5.241072654724121, 5.286399841308594, 5.269813060760498, 5.2914814949035645, 5.267745494842529, 5.291436195373535, 5.261002540588379, 5.25017786026001, 5.290256977081299, 5.268487453460693, 5.291565895080566, 5.264824390411377, 5.285882949829102, 5.3399977684021, 5.2720818519592285, 5.279708385467529, 5.29117488861084, 5.269281387329102, 5.278062343597412, 5.251662731170654, 5.23021936416626, 5.218766212463379, 5.290677070617676, 5.26178503036499, 5.134896755218506, 5.287961959838867, 5.398111343383789, 5.332028865814209, 5.285048007965088, 5.288363933563232, 5.243780612945557, 5.230539798736572, 5.2915263175964355, 5.25936222076416, 5.291589260101318, 5.2760090827941895, 5.2262282371521, 5.268314838409424, 5.229178428649902, 5.291502952575684, 5.290704727172852, 5.262408256530762, 5.327243804931641, 5.285766124725342, 5.291639804840088, 5.2649688720703125, 5.272677898406982, 5.217967510223389, 5.2660722732543945, 5.285691738128662, 5.272624969482422, 5.287961959838867, 5.287450790405273, 5.218911647796631, 5.288282871246338, 5.250301837921143, 5.229028224945068, 5.2898054122924805, 5.291196346282959, 5.21815824508667, 5.254941940307617, 5.2702412605285645, 5.277717113494873, 5.247290134429932, 5.264894485473633, 5.284055233001709, 5.232769012451172, 5.279728412628174, 5.2777533531188965, 5.247479438781738, 5.224404811859131, 5.219346523284912, 5.290547847747803, 5.291306972503662, 5.259108066558838, 5.2169508934021, 5.2422099113464355, 5.54443883895874, 5.287021160125732, 5.291605472564697, 5.219356536865234, 5.290349006652832, 5.2574543952941895, 5.2827372550964355, 5.282646179199219, 5.234467506408691, 5.267273426055908, 5.272257328033447, 5.227146625518799, 5.253288745880127, 5.262716770172119, 5.2802252769470215, 5.287541389465332, 5.291597843170166, 5.261918544769287, 5.290812969207764, 5.2627482414245605, 5.133938312530518, 5.2377705574035645, 5.218961238861084, 5.257454872131348, 5.240529537200928, 5.281961917877197, 5.290371417999268, 5.291245937347412, 5.287939071655273, 5.223761081695557, 5.278043270111084, 5.223392009735107, 5.280052185058594, 5.222419261932373, 5.218148708343506, 5.224006175994873, 5.251873970031738, 5.261702060699463, 5.2375617027282715, 5.291508197784424, 5.223068714141846, 5.288851261138916, 5.291513919830322, 5.291257381439209, 5.231059551239014, 5.251551151275635, 5.283553600311279, 5.449364185333252, 5.256385326385498, 5.285769939422607, 5.233884334564209, 5.284210681915283, 5.262962818145752, 5.28187894821167, 5.219720363616943, 5.291083812713623, 5.264084339141846, 5.263575077056885, 5.270120143890381, 5.277695655822754, 5.267775535583496, 5.219166278839111, 5.222346782684326, 5.338286876678467, 5.245107650756836, 5.291439533233643, 5.243547439575195, 5.290513515472412, 5.2913432121276855, 5.221502304077148, 5.256887912750244, 5.239356994628906, 5.247856616973877]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([141.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([115.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([634.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1100.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([52.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([66.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 3286.169566965655
Predicted: [9.167102813720703, 13.500089645385742, 14.398578643798828, 9.644109725952148, 11.801006317138672, 8.966593742370605, 14.44320011138916, 9.567060470581055, 14.849847793579102, 10.768102645874023, 11.413175582885742, 13.420317649841309, 8.970230102539062, 9.493131637573242, 10.113012313842773, 15.093923568725586, 13.288764953613281, 8.990015029907227, 9.639936447143555, 10.757214546203613, 10.421546936035156, 9.339056015014648, 9.029869079589844, 12.078828811645508, 14.907747268676758, 9.235023498535156, 9.667550086975098, 10.533882141113281, 9.53597640991211, 10.588811874389648, 13.4146728515625, 9.473173141479492, 9.875801086425781, 9.278003692626953, 9.052871704101562, 9.600153923034668, 9.265287399291992, 12.289705276489258, 11.335474014282227, 8.966121673583984, 12.376424789428711, 13.148504257202148, 9.44891357421875, 9.069714546203613, 13.355385780334473, 13.16196060180664, 9.03951644897461, 11.751907348632812, 9.151506423950195, 9.09593391418457, 9.000211715698242, 9.386093139648438, 9.127979278564453, 11.788785934448242, 9.86870002746582, 11.930427551269531, 10.953540802001953, 9.932201385498047, 14.19821548461914, 11.298389434814453, 9.005926132202148, 14.403463363647461, 10.009012222290039, 9.040799140930176, 14.889686584472656, 9.166022300720215, 14.922042846679688, 9.756786346435547, 10.548360824584961, 10.685489654541016, 11.077333450317383, 11.692438125610352, 9.002607345581055, 10.163763046264648, 9.002565383911133, 11.056836128234863, 9.650114059448242, 9.298096656799316, 9.342445373535156, 12.609561920166016, 11.115533828735352, 14.918191909790039, 8.992688179016113, 9.122835159301758, 9.254915237426758, 12.493518829345703, 10.689719200134277, 13.237271308898926, 11.349111557006836, 9.169809341430664, 11.909900665283203, 11.667900085449219, 8.982141494750977, 10.654273986816406, 14.500920295715332, 11.34442138671875, 10.870660781860352, 14.952923774719238, 9.141988754272461, 9.616125106811523, 9.764650344848633, 10.72671890258789, 9.778663635253906, 9.07960319519043, 13.559304237365723, 9.372774124145508, 13.696030616760254, 11.521719932556152, 10.738422393798828, 9.365299224853516, 10.998004913330078, 9.035701751708984, 9.295316696166992, 10.170981407165527, 9.352956771850586, 10.916654586791992, 14.496635437011719, 14.601879119873047, 10.491376876831055, 8.999377250671387, 10.80401611328125, 9.44578742980957, 9.402397155761719, 11.237507820129395, 12.057153701782227, 9.001755714416504, 15.085216522216797, 11.150572776794434, 9.504107475280762, 10.538612365722656, 10.74361801147461, 12.78480339050293, 14.912786483764648, 11.076419830322266, 9.048913955688477, 14.996744155883789, 10.291221618652344, 9.376214981079102, 9.54631519317627, 10.956846237182617, 14.747872352600098, 8.966850280761719, 9.59376049041748, 8.965719223022461, 10.378861427307129, 9.911941528320312, 9.106101989746094, 9.05875015258789, 9.011438369750977, 11.244129180908203, 9.924398422241211, 9.076376914978027, 9.999412536621094, 10.484916687011719, 9.532590866088867, 14.446907043457031, 9.400653839111328, 9.405668258666992, 10.012288093566895, 12.945735931396484, 9.246055603027344, 9.181706428527832, 10.102386474609375, 9.019739151000977, 9.220940589904785, 12.421509742736816, 11.586128234863281, 14.035795211791992, 8.968124389648438, 11.546536445617676, 9.78824520111084, 8.968481063842773, 10.274665832519531, 14.748712539672852, 14.570777893066406, 8.976163864135742, 9.08142375946045, 10.865150451660156, 8.969730377197266, 9.323410034179688, 9.141059875488281, 11.493363380432129, 9.026249885559082, 14.499378204345703, 14.388177871704102, 11.745426177978516, 9.136697769165039, 8.98193073272705, 9.538991928100586, 9.041130065917969, 11.175241470336914, 9.445148468017578, 12.808208465576172, 8.98157787322998, 8.973428726196289, 9.11952018737793, 12.792013168334961, 11.419442176818848, 10.934585571289062, 14.592286109924316, 9.645956039428711, 9.086311340332031, 9.301429748535156, 10.777999877929688, 9.189802169799805, 11.096192359924316, 9.500724792480469, 9.451189041137695, 9.17902660369873, 9.006991386413574, 12.130029678344727, 12.596179962158203, 9.386900901794434, 13.166950225830078, 8.989306449890137, 12.57290267944336, 9.956439971923828, 9.072549819946289, 10.09568977355957, 9.429521560668945, 9.791872024536133, 14.702350616455078, 9.422298431396484, 14.936915397644043, 14.860489845275879, 10.782881736755371, 12.368902206420898, 10.717254638671875, 12.084888458251953, 11.51121711730957, 13.075191497802734, 10.235611915588379, 9.827434539794922, 12.784902572631836, 11.228164672851562, 10.48279094696045, 13.991010665893555, 9.563613891601562, 9.142623901367188, 9.078420639038086, 9.20287799835205, 12.892080307006836, 11.695564270019531, 9.840660095214844, 9.090129852294922, 9.308314323425293, 14.121694564819336, 12.375500679016113, 13.943713188171387, 11.007711410522461, 14.955080032348633, 10.191631317138672, 15.027971267700195, 11.2750244140625, 9.10836410522461, 13.12061595916748, 9.111328125, 9.582853317260742, 9.06371021270752, 11.393278121948242, 9.867074966430664, 11.074703216552734, 8.977290153503418, 9.130533218383789, 12.549875259399414, 8.9833984375, 11.492267608642578, 14.933500289916992, 11.676987648010254, 14.147239685058594, 10.111560821533203, 11.632123947143555, 9.50070858001709, 9.527273178100586, 14.009897232055664, 8.969395637512207, 15.067211151123047, 14.92541790008545, 9.01115894317627, 9.543027877807617, 12.756719589233398, 9.572807312011719, 8.984426498413086, 12.076894760131836, 12.675010681152344, 10.750750541687012, 9.27148723602295, 13.193639755249023, 9.133764266967773, 9.654991149902344, 9.815064430236816, 9.30919075012207, 9.499814987182617, 10.111546516418457, 10.194772720336914, 9.812788009643555, 10.651962280273438, 9.563587188720703, 9.09351921081543, 9.107038497924805, 9.341115951538086, 8.993637084960938, 12.797815322875977, 12.882884979248047, 14.906060218811035, 11.204686164855957, 9.056966781616211, 11.414466857910156, 12.943741798400879, 13.175224304199219, 11.413895606994629, 9.269186019897461, 10.982292175292969, 12.068795204162598, 11.002378463745117, 9.182211875915527, 11.472497940063477, 9.053236961364746, 11.639324188232422, 14.76192569732666, 15.007840156555176, 9.830227851867676, 9.021110534667969, 9.473098754882812, 9.568923950195312, 14.37289810180664, 12.996103286743164, 8.9821138381958, 9.369733810424805, 12.854571342468262, 8.966482162475586, 9.801241874694824, 9.161237716674805, 9.583367347717285, 9.531811714172363, 14.222875595092773, 9.10075569152832, 9.754833221435547, 14.958944320678711, 12.3062105178833, 9.239179611206055, 9.02107048034668, 12.680980682373047, 12.45576000213623, 9.198260307312012, 12.187736511230469, 9.248044967651367, 9.208295822143555, 9.501211166381836, 10.03563117980957, 11.159514427185059, 11.690571784973145, 8.97704029083252, 10.109963417053223, 10.787128448486328, 10.948751449584961, 9.780892372131348, 14.704547882080078, 9.009736061096191, 8.966102600097656, 9.555078506469727, 9.909172058105469, 10.011896133422852, 11.504522323608398, 10.145782470703125, 14.701807022094727, 13.62520980834961, 9.580188751220703, 9.211562156677246, 9.107361793518066, 9.429924964904785, 13.794651985168457, 10.383272171020508, 9.157055854797363, 9.048646926879883, 10.69124984741211, 13.060514450073242, 9.00413703918457, 10.076273918151855, 10.283832550048828, 11.240681648254395, 9.183361053466797, 10.555391311645508, 11.273263931274414, 13.793220520019531, 9.117390632629395, 12.026681900024414, 9.615669250488281, 9.19596004486084, 9.518355369567871, 8.984943389892578, 9.045326232910156, 10.871622085571289, 9.208822250366211, 11.34421157836914, 14.529861450195312, 10.27359676361084, 14.881237030029297, 11.976631164550781, 9.596514701843262, 8.971929550170898, 14.706762313842773, 9.150461196899414, 9.441920280456543, 10.623289108276367, 9.839224815368652, 8.96712589263916, 13.509244918823242, 15.067329406738281, 11.717479705810547, 9.026317596435547, 8.968765258789062, 13.716333389282227, 12.138383865356445, 9.568683624267578, 15.003894805908203, 9.102081298828125, 9.246318817138672, 15.058608055114746, 11.85354995727539, 9.677906036376953, 8.966362953186035, 13.214218139648438, 10.160198211669922, 9.069725036621094, 15.043346405029297, 14.491524696350098, 9.737150192260742, 9.03288459777832, 9.107396125793457, 9.168424606323242, 10.054147720336914, 9.370424270629883, 9.899070739746094, 10.229697227478027, 9.722570419311523, 13.970794677734375, 13.836891174316406, 8.990527153015137, 9.582387924194336, 10.102290153503418, 10.749831199645996, 9.97925090789795, 15.073208808898926, 8.967663764953613, 8.991491317749023, 9.686094284057617, 11.604436874389648, 10.450043678283691, 14.579676628112793, 14.001288414001465, 9.558961868286133, 14.41445255279541, 10.807615280151367, 8.973154067993164, 10.971404075622559, 13.113642692565918, 14.713229179382324, 11.250171661376953, 10.633399963378906, 9.319849967956543, 9.796273231506348, 13.2374267578125, 9.420415878295898, 9.281717300415039, 9.475366592407227, 10.900665283203125, 9.486723899841309, 14.890520095825195, 15.062612533569336, 9.602163314819336, 12.366839408874512, 14.453384399414062, 9.994308471679688, 10.306938171386719, 9.66305923461914, 10.90838623046875, 10.027360916137695, 12.78255844116211, 14.046876907348633, 12.463197708129883, 9.331186294555664, 9.790173530578613, 10.099004745483398, 10.18187427520752, 15.08234977722168, 10.657927513122559, 12.446637153625488, 9.190824508666992, 14.665987014770508, 14.544767379760742, 9.13430118560791, 8.98302936553955, 9.488821029663086, 9.760725021362305, 9.013928413391113, 9.313368797302246, 9.64134407043457, 12.478670120239258, 9.232866287231445]
Actual: [tensor([0.], dtype=torch.float64), tensor([71.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([206.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([417.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([196.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 592.941814231984
Predicted: [15.894943237304688, 15.894941329956055, 15.894501686096191, 15.894947052001953, 15.894948959350586, 15.89488410949707, 15.894942283630371, 15.894942283630371, 15.894939422607422, 15.894932746887207, 15.894944190979004, 15.89494514465332, 15.89493179321289, 15.894947052001953, 15.894936561584473, 15.894947052001953, 15.89494800567627, 15.894937515258789, 15.894943237304688, 15.894935607910156, 15.894946098327637, 15.894821166992188, 15.89494514465332, 15.894941329956055, 15.894909858703613, 15.89494514465332, 15.894776344299316, 15.89494800567627, 15.894868850708008, 15.894824981689453, 15.894948959350586, 15.89491081237793, 15.894837379455566, 15.894947052001953, 15.894941329956055, 15.89493465423584, 15.89494514465332, 15.894946098327637, 15.894947052001953, 15.894947052001953, 15.894943237304688, 15.894925117492676, 15.894947052001953, 15.89474105834961, 15.894935607910156, 15.894947052001953, 15.894944190979004, 15.894942283630371, 15.894939422607422, 15.894947052001953, 15.894947052001953, 15.894913673400879, 15.894947052001953, 15.89494800567627, 15.894947052001953, 15.894933700561523, 15.894947052001953, 15.894948959350586, 15.89494514465332, 15.894918441772461, 15.894939422607422, 15.89494800567627, 15.89494514465332, 15.894947052001953, 15.894947052001953, 15.894929885864258, 15.894947052001953, 15.89494800567627, 15.894946098327637, 15.894927024841309, 15.894193649291992, 15.89494514465332, 15.89493465423584, 15.894946098327637, 15.894941329956055, 15.89492130279541, 15.894941329956055, 15.89491081237793, 15.894947052001953, 15.894940376281738, 15.89494514465332, 15.894947052001953, 15.894942283630371, 15.894943237304688, 15.894946098327637, 15.89494514465332, 15.894932746887207, 15.894946098327637, 15.894928932189941, 15.894947052001953, 15.894901275634766, 15.89494514465332, 15.894914627075195, 15.894926071166992, 15.894941329956055, 15.894947052001953, 15.89492130279541, 15.894939422607422, 15.894941329956055, 15.894947052001953, 15.894946098327637, 15.89494800567627, 15.894912719726562, 15.894933700561523, 15.89494800567627, 15.894905090332031, 15.894157409667969, 15.894927978515625, 15.894917488098145, 15.894926071166992, 15.894947052001953, 15.894941329956055, 15.894936561584473, 15.894946098327637, 15.894939422607422, 15.894947052001953, 15.894948959350586, 15.894947052001953, 15.894933700561523, 15.894947052001953, 15.894927978515625, 15.89491081237793, 15.89494514465332, 15.894842147827148, 15.894947052001953, 15.894929885864258, 15.894947052001953, 15.894942283630371, 15.894936561584473, 15.894946098327637, 15.894948959350586, 15.894947052001953, 15.894941329956055, 15.894941329956055, 15.894941329956055, 15.894939422607422, 15.894933700561523, 15.894933700561523, 15.894947052001953, 15.894941329956055, 15.894942283630371, 15.894947052001953, 15.89494800567627, 15.894946098327637, 15.894947052001953, 15.894923210144043, 15.89494514465332, 15.894948959350586, 15.894947052001953, 15.894938468933105, 15.89477825164795, 15.894936561584473, 15.89470386505127, 15.894948959350586, 15.894943237304688, 15.89494800567627, 15.894947052001953, 15.89494800567627, 15.894906044006348, 15.894942283630371, 15.894810676574707, 15.894947052001953, 15.894872665405273, 15.894947052001953, 15.89494800567627, 15.894942283630371, 15.894928932189941, 15.894943237304688, 15.894947052001953, 15.894769668579102, 15.89494514465332, 15.894936561584473, 15.894932746887207, 15.894939422607422, 15.89494514465332, 15.894947052001953, 15.894822120666504, 15.894923210144043, 15.894937515258789, 15.894942283630371, 15.894718170166016, 15.894946098327637, 15.894793510437012, 15.894940376281738, 15.89494800567627, 15.894941329956055, 15.894942283630371, 15.894949913024902, 15.894941329956055, 15.894936561584473, 15.89494514465332, 15.894947052001953, 15.894942283630371, 15.894947052001953, 15.894940376281738, 15.894859313964844, 15.894947052001953, 15.894946098327637, 15.894942283630371, 15.894946098327637, 15.894943237304688, 15.89494514465332, 15.894947052001953, 15.89494514465332, 15.894947052001953, 15.894936561584473, 15.89493179321289, 15.894937515258789, 15.89494800567627, 15.89494514465332, 15.894947052001953, 15.894940376281738, 15.894916534423828, 15.894947052001953, 15.894920349121094, 15.894946098327637, 15.894917488098145, 15.894906997680664, 15.894932746887207, 15.894939422607422, 15.894947052001953, 15.89494800567627, 15.894947052001953, 15.894947052001953, 15.894929885864258, 15.894918441772461, 15.894942283630371, 15.894947052001953, 15.894941329956055, 15.894948959350586, 15.894941329956055, 15.894949913024902, 15.894927978515625, 15.894938468933105, 15.89494800567627, 15.89493179321289, 15.894937515258789, 15.894944190979004, 15.894696235656738, 15.89494800567627, 15.894948959350586, 15.894947052001953, 15.894927978515625, 15.894942283630371, 15.894943237304688, 15.894932746887207, 15.894943237304688, 15.894845962524414, 15.894941329956055, 15.894947052001953, 15.89494800567627, 15.894936561584473, 15.894939422607422, 15.894947052001953, 15.894872665405273, 15.894899368286133, 15.894944190979004, 15.894948959350586, 15.894940376281738, 15.89494800567627, 15.894941329956055, 15.894940376281738, 15.894940376281738, 15.894946098327637, 15.89492130279541, 15.894942283630371, 15.894947052001953, 15.894947052001953, 15.894940376281738, 15.89494514465332, 15.894942283630371, 15.89494800567627, 15.894947052001953, 15.894941329956055, 15.894922256469727, 15.894933700561523, 15.89494800567627, 15.894941329956055, 15.894942283630371, 15.894925117492676, 15.894937515258789, 15.894941329956055, 15.894947052001953, 15.894947052001953, 15.894887924194336, 15.894942283630371, 15.894947052001953, 15.894941329956055, 15.894901275634766, 15.89494800567627, 15.894912719726562, 15.894923210144043, 15.894939422607422, 15.894947052001953, 15.89494514465332, 15.89494800567627, 15.894706726074219, 15.89494800567627, 15.894937515258789, 15.894898414611816, 15.894939422607422, 15.89494800567627, 15.894929885864258, 15.894947052001953, 15.894927978515625, 15.894949913024902, 15.894948959350586, 15.894946098327637, 15.894947052001953, 15.89492416381836, 15.89494514465332, 15.894947052001953, 15.894906044006348, 15.894948959350586, 15.894949913024902, 15.894948959350586, 15.894918441772461, 15.89494800567627, 15.894922256469727, 15.894940376281738, 15.89494800567627, 15.894933700561523, 15.89494800567627, 15.89494800567627, 15.894937515258789, 15.894927024841309, 15.89494800567627, 15.894937515258789, 15.894947052001953, 15.894941329956055, 15.89494514465332, 15.894947052001953, 15.8948974609375, 15.894678115844727, 15.894939422607422, 15.894947052001953, 15.894929885864258, 15.894918441772461, 15.894712448120117, 15.894947052001953, 15.894944190979004, 15.894922256469727, 15.894933700561523, 15.894947052001953, 15.894940376281738, 15.894946098327637, 15.894937515258789, 15.894946098327637, 15.894946098327637, 15.894941329956055, 15.894937515258789, 15.89494800567627, 15.894946098327637, 15.89489459991455, 15.894935607910156, 15.894946098327637, 15.894942283630371, 15.894942283630371, 15.894943237304688, 15.89492416381836, 15.894935607910156, 15.894914627075195, 15.894927978515625, 15.894943237304688, 15.894938468933105, 15.894933700561523, 15.894871711730957, 15.894947052001953, 15.894937515258789, 15.894899368286133, 15.894947052001953, 15.894947052001953, 15.894944190979004, 15.894935607910156, 15.894877433776855, 15.894903182983398, 15.894855499267578, 15.894946098327637, 15.894949913024902, 15.894947052001953, 15.894947052001953, 15.894841194152832, 15.894947052001953, 15.894940376281738, 15.89494800567627, 15.894943237304688, 15.894947052001953, 15.894928932189941, 15.894943237304688, 15.894947052001953, 15.894947052001953, 15.894947052001953, 15.894946098327637, 15.894878387451172, 15.894935607910156, 15.894933700561523, 15.894941329956055, 15.894941329956055, 15.894946098327637, 15.89494800567627, 15.894926071166992, 15.894946098327637, 15.894929885864258, 15.89493179321289, 15.89494514465332, 15.894947052001953, 15.894928932189941, 15.89494514465332, 15.894946098327637, 15.894906997680664, 15.894943237304688, 15.894933700561523, 15.894937515258789, 15.894946098327637, 15.894948959350586, 15.894947052001953, 15.894947052001953, 15.894942283630371, 15.894941329956055, 15.894943237304688, 15.894943237304688, 15.89493179321289, 15.894797325134277, 15.89494800567627, 15.894947052001953, 15.894940376281738, 15.894948959350586, 15.894947052001953, 15.894947052001953, 15.890403747558594, 15.894929885864258, 15.89494514465332, 15.89494514465332, 15.894947052001953, 15.894947052001953, 15.894947052001953, 15.894865989685059, 15.894947052001953, 15.894947052001953, 15.894947052001953, 15.894947052001953, 15.89494800567627, 15.894926071166992, 15.894940376281738, 15.89494800567627, 15.89494800567627, 15.894939422607422, 15.894927978515625, 15.894948959350586, 15.894923210144043, 15.894944190979004, 15.89494514465332, 15.894908905029297, 15.89494514465332, 15.894940376281738, 15.894947052001953, 15.894947052001953, 15.89494800567627, 15.894932746887207, 15.894941329956055, 15.894942283630371, 15.894939422607422, 15.89494514465332, 15.89492416381836, 15.894948959350586, 15.894927024841309, 15.894937515258789, 15.894947052001953, 15.894947052001953, 15.894943237304688, 15.894942283630371, 15.89494800567627, 15.8948974609375, 15.894947052001953, 15.894941329956055, 15.894938468933105, 15.89494514465332, 15.894947052001953, 15.894939422607422, 15.894947052001953, 15.894933700561523, 15.894941329956055, 15.894936561584473, 15.894947052001953, 15.894947052001953, 15.894947052001953, 15.894942283630371, 15.888134956359863, 15.894942283630371, 15.89494800567627, 15.894889831542969, 15.894940376281738, 15.89493465423584, 15.894947052001953, 15.894905090332031, 15.894949913024902, 15.89493179321289, 15.894837379455566, 15.89494800567627, 15.894886016845703]
Actual: [tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([157.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([696.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 1158.9198719120204
Predicted: [17.683595657348633, 17.683629989624023, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683616638183594, 17.683631896972656, 17.683626174926758, 17.68362045288086, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.68353843688965, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.68360137939453, 17.683629989624023, 17.68337631225586, 17.683635711669922, 17.68363380432129, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683624267578125, 17.68363380432129, 17.683635711669922, 17.683626174926758, 17.683635711669922, 17.683631896972656, 17.683609008789062, 17.683626174926758, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683624267578125, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.68362808227539, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.68363380432129, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683225631713867, 17.683629989624023, 17.68358039855957, 17.683612823486328, 17.683635711669922, 17.68363380432129, 17.683624267578125, 17.683635711669922, 17.68359375, 17.68362808227539, 17.68363380432129, 17.683635711669922, 17.6835880279541, 17.68363380432129, 17.683631896972656, 17.683616638183594, 17.68362808227539, 17.68363380432129, 17.683635711669922, 17.68362808227539, 17.68360137939453, 17.683629989624023, 17.683629989624023, 17.683063507080078, 17.683635711669922, 17.68362808227539, 17.683589935302734, 17.68362045288086, 17.683631896972656, 17.683616638183594, 17.683631896972656, 17.68362808227539, 17.683631896972656, 17.683635711669922, 17.683624267578125, 17.683635711669922, 17.683631896972656, 17.683624267578125, 17.68363380432129, 17.683631896972656, 17.683555603027344, 17.683624267578125, 17.683629989624023, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.68363380432129, 17.683631896972656, 17.683483123779297, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.68362808227539, 17.68363380432129, 17.683635711669922, 17.68363380432129, 17.683631896972656, 17.68363380432129, 17.683635711669922, 17.68363380432129, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.68360710144043, 17.683631896972656, 17.6834716796875, 17.683631896972656, 17.68362808227539, 17.683618545532227, 17.683631896972656, 17.683631896972656, 17.683609008789062, 17.683631896972656, 17.68363380432129, 17.683622360229492, 17.68362808227539, 17.68363380432129, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.68362808227539, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683162689208984, 17.683635711669922, 17.68363380432129, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.68362808227539, 17.683589935302734, 17.683612823486328, 17.68362808227539, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683624267578125, 17.683605194091797, 17.68363380432129, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.68362045288086, 17.683574676513672, 17.683635711669922, 17.683624267578125, 17.682090759277344, 17.683631896972656, 17.683635711669922, 17.68362808227539, 17.683635711669922, 17.683631896972656, 17.683626174926758, 17.683635711669922, 17.683624267578125, 17.683631896972656, 17.683631896972656, 17.68362808227539, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.68363380432129, 17.683635711669922, 17.682851791381836, 17.683635711669922, 17.68362808227539, 17.68280029296875, 17.683635711669922, 17.683635711669922, 17.68363380432129, 17.683635711669922, 17.68315315246582, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683629989624023, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683616638183594, 17.683605194091797, 17.68363380432129, 17.683635711669922, 17.683624267578125, 17.683624267578125, 17.68363380432129, 17.683565139770508, 17.683605194091797, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683536529541016, 17.68360137939453, 17.68362808227539, 17.683631896972656, 17.68363380432129, 17.683635711669922, 17.683609008789062, 17.68362808227539, 17.68363380432129, 17.68362808227539, 17.683626174926758, 17.683624267578125, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.683631896972656, 17.68363380432129, 17.683629989624023, 17.68362808227539, 17.683578491210938, 17.683635711669922, 17.68362045288086, 17.683631896972656, 17.683631896972656, 17.683624267578125, 17.68363380432129, 17.683635711669922, 17.68363380432129, 17.683631896972656, 17.683616638183594, 17.683609008789062, 17.683635711669922, 17.683635711669922, 17.683509826660156, 17.683629989624023, 17.68362045288086, 17.68353843688965, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683622360229492, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.68362045288086, 17.683631896972656, 17.683635711669922, 17.683624267578125, 17.68363380432129, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.68362808227539, 17.683612823486328, 17.683549880981445, 17.68362808227539, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683574676513672, 17.683631896972656, 17.68359375, 17.68363380432129, 17.683635711669922, 17.68363380432129, 17.683609008789062, 17.68362045288086, 17.683635711669922, 17.68362045288086, 17.683631896972656, 17.683635711669922, 17.68362808227539, 17.68362808227539, 17.68362808227539, 17.683629989624023, 17.683635711669922, 17.68363380432129, 17.68362808227539, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.68363380432129, 17.683631896972656, 17.68362808227539, 17.683629989624023, 17.68360137939453, 17.683631896972656, 17.683618545532227, 17.6834716796875, 17.683631896972656, 17.683635711669922, 17.683609008789062, 17.683626174926758, 17.68362045288086, 17.68363380432129, 17.68362808227539, 17.683635711669922, 17.683635711669922, 17.68362045288086, 17.683574676513672, 17.683635711669922, 17.683631896972656, 17.683574676513672, 17.683635711669922, 17.68362808227539, 17.683631896972656, 17.68362808227539, 17.683635711669922, 17.683635711669922, 17.68363380432129, 17.68362045288086, 17.683635711669922, 17.68363380432129, 17.683597564697266, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.683597564697266, 17.68362045288086, 17.68362808227539, 17.683635711669922, 17.683622360229492, 17.683624267578125, 17.68363380432129, 17.683629989624023, 17.683635711669922, 17.683629989624023, 17.683528900146484, 17.683624267578125, 17.683635711669922, 17.68363380432129, 17.683631896972656, 17.68362808227539, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.683624267578125, 17.683635711669922, 17.683631896972656, 17.683626174926758, 17.683635711669922, 17.683618545532227, 17.683631896972656, 17.6835880279541, 17.68363380432129, 17.683635711669922, 17.683629989624023, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683574676513672, 17.683624267578125, 17.68363380432129, 17.683635711669922, 17.683624267578125, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.683631896972656, 17.683631896972656, 17.68363380432129, 17.683635711669922, 17.683624267578125, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.6835880279541, 17.68363380432129, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.68363380432129, 17.683631896972656, 17.683631896972656, 17.68355941772461, 17.683635711669922, 17.683609008789062, 17.683635711669922, 17.68319320678711, 17.68363380432129, 17.68362045288086, 17.683624267578125, 17.683631896972656, 17.683629989624023, 17.683635711669922, 17.683612823486328, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.68363380432129, 17.683631896972656, 17.68359375, 17.683626174926758, 17.683635711669922, 17.68362808227539, 17.683635711669922, 17.683629989624023, 17.68363380432129, 17.683624267578125, 17.683624267578125, 17.683635711669922, 17.683582305908203, 17.683635711669922, 17.683612823486328, 17.683561325073242, 17.683631896972656, 17.683624267578125, 17.683635711669922, 17.68363380432129, 17.68362808227539, 17.683635711669922, 17.683624267578125, 17.683635711669922, 17.683626174926758, 17.683631896972656, 17.68363380432129, 17.68363380432129, 17.68363380432129, 17.683496475219727, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683626174926758, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.68363380432129, 17.683589935302734, 17.683609008789062, 17.68362808227539, 17.683631896972656, 17.68363380432129, 17.683618545532227, 17.683635711669922, 17.683626174926758, 17.683605194091797, 17.683635711669922, 17.683483123779297, 17.683605194091797, 17.683631896972656, 17.68362808227539, 17.683635711669922, 17.683631896972656, 17.683629989624023, 17.683635711669922, 17.68363380432129, 17.683626174926758, 17.68362808227539, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683452606201172]
Actual: [tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([167.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([366.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([226.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([121.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([394.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([111.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([37.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 949.5470078787307
Predicted: [16.5553035736084, 16.555299758911133, 16.5553035736084, 16.555288314819336, 16.5553035736084, 16.5552921295166, 16.555299758911133, 16.555295944213867, 16.5552921295166, 16.555301666259766, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.55528450012207, 16.555299758911133, 16.555307388305664, 16.5552921295166, 16.555295944213867, 16.5553035736084, 16.555301666259766, 16.555299758911133, 16.555294036865234, 16.555299758911133, 16.555307388305664, 16.555307388305664, 16.555294036865234, 16.5552921295166, 16.5553035736084, 16.555295944213867, 16.5553035736084, 16.55529022216797, 16.5553035736084, 16.5553035736084, 16.555280685424805, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.555295944213867, 16.55527114868164, 16.5553035736084, 16.555294036865234, 16.555301666259766, 16.5553035736084, 16.555294036865234, 16.555234909057617, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.55527114868164, 16.555295944213867, 16.555307388305664, 16.5553035736084, 16.555252075195312, 16.55523681640625, 16.555295944213867, 16.555273056030273, 16.5553035736084, 16.5553035736084, 16.554975509643555, 16.5553035736084, 16.555301666259766, 16.555282592773438, 16.555307388305664, 16.555307388305664, 16.5553035736084, 16.555295944213867, 16.5552921295166, 16.5553035736084, 16.555307388305664, 16.555299758911133, 16.555299758911133, 16.555294036865234, 16.5553035736084, 16.555299758911133, 16.555307388305664, 16.5553035736084, 16.555299758911133, 16.555265426635742, 16.55530548095703, 16.5553035736084, 16.555301666259766, 16.555299758911133, 16.555299758911133, 16.55530548095703, 16.55525016784668, 16.55530548095703, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.555036544799805, 16.5553035736084, 16.555288314819336, 16.555246353149414, 16.5552921295166, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.555295944213867, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.55528450012207, 16.5553035736084, 16.555286407470703, 16.55530548095703, 16.555286407470703, 16.55527114868164, 16.5553035736084, 16.555299758911133, 16.5553035736084, 16.55527114868164, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.5552921295166, 16.5553035736084, 16.555278778076172, 16.5553035736084, 16.555307388305664, 16.555299758911133, 16.55530548095703, 16.555301666259766, 16.5553035736084, 16.555301666259766, 16.555301666259766, 16.555295944213867, 16.55530548095703, 16.555217742919922, 16.5553035736084, 16.55530548095703, 16.555288314819336, 16.5552921295166, 16.5552921295166, 16.5552921295166, 16.5553035736084, 16.555301666259766, 16.55529022216797, 16.5553035736084, 16.5552921295166, 16.555246353149414, 16.555295944213867, 16.55527687072754, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.555301666259766, 16.5552921295166, 16.55519676208496, 16.55525016784668, 16.555280685424805, 16.555295944213867, 16.555307388305664, 16.555307388305664, 16.555299758911133, 16.55527114868164, 16.5552921295166, 16.555278778076172, 16.5553035736084, 16.5553035736084, 16.5552978515625, 16.5553035736084, 16.55530548095703, 16.555294036865234, 16.555307388305664, 16.5553035736084, 16.555068969726562, 16.5553035736084, 16.555301666259766, 16.555307388305664, 16.5553035736084, 16.555301666259766, 16.555288314819336, 16.555299758911133, 16.555295944213867, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.555294036865234, 16.5552978515625, 16.5553035736084, 16.555274963378906, 16.555295944213867, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555295944213867, 16.555301666259766, 16.555301666259766, 16.5553035736084, 16.5553035736084, 16.5552921295166, 16.5553035736084, 16.555280685424805, 16.55530548095703, 16.555295944213867, 16.5552921295166, 16.5553035736084, 16.555299758911133, 16.555299758911133, 16.555286407470703, 16.555307388305664, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555288314819336, 16.55530548095703, 16.55524444580078, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.555288314819336, 16.555301666259766, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.555278778076172, 16.55528450012207, 16.55530548095703, 16.555255889892578, 16.555295944213867, 16.5553035736084, 16.55527114868164, 16.5552921295166, 16.55530548095703, 16.555301666259766, 16.555301666259766, 16.5553035736084, 16.55530548095703, 16.55530548095703, 16.55530548095703, 16.5552921295166, 16.555301666259766, 16.555307388305664, 16.5552978515625, 16.555217742919922, 16.555307388305664, 16.5552978515625, 16.5553035736084, 16.555286407470703, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.555288314819336, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.5552978515625, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555301666259766, 16.55530548095703, 16.555252075195312, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.553186416625977, 16.555307388305664, 16.5552978515625, 16.55527687072754, 16.5553035736084, 16.555301666259766, 16.5552978515625, 16.5553035736084, 16.555307388305664, 16.55524253845215, 16.55530548095703, 16.555288314819336, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.555295944213867, 16.5553035736084, 16.555299758911133, 16.55529022216797, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.555301666259766, 16.55530548095703, 16.5553035736084, 16.555269241333008, 16.555294036865234, 16.555301666259766, 16.555307388305664, 16.5553035736084, 16.555307388305664, 16.555307388305664, 16.555273056030273, 16.55530548095703, 16.55530548095703, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555301666259766, 16.555299758911133, 16.55529022216797, 16.55527687072754, 16.555295944213867, 16.5553035736084, 16.555234909057617, 16.555301666259766, 16.5553035736084, 16.555307388305664, 16.55528450012207, 16.555307388305664, 16.555255889892578, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.555307388305664, 16.5553035736084, 16.555295944213867, 16.555295944213867, 16.555166244506836, 16.555299758911133, 16.555307388305664, 16.5553035736084, 16.55518913269043, 16.55529022216797, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.555307388305664, 16.5552921295166, 16.5552978515625, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.55530548095703, 16.555086135864258, 16.5553035736084, 16.55527114868164, 16.555307388305664, 16.55529022216797, 16.555307388305664, 16.555299758911133, 16.55530548095703, 16.555301666259766, 16.555282592773438, 16.555288314819336, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555301666259766, 16.555307388305664, 16.555295944213867, 16.555299758911133, 16.5553035736084, 16.55524253845215, 16.555299758911133, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.555301666259766, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.555299758911133, 16.5553035736084, 16.55530548095703, 16.554895401000977, 16.55530548095703, 16.5553035736084, 16.555307388305664, 16.555301666259766, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555294036865234, 16.555307388305664, 16.55529022216797, 16.555307388305664, 16.555299758911133, 16.555307388305664, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.555295944213867, 16.5553035736084, 16.555301666259766, 16.55527687072754, 16.555295944213867, 16.555295944213867, 16.555299758911133, 16.5553035736084, 16.5552978515625, 16.5553035736084, 16.555307388305664, 16.5552921295166, 16.5553035736084, 16.555299758911133, 16.555294036865234, 16.555301666259766, 16.555301666259766, 16.5553035736084, 16.5553035736084, 16.555288314819336, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.555299758911133, 16.555294036865234, 16.5553035736084, 16.555288314819336, 16.555301666259766, 16.5553035736084, 16.555299758911133, 16.55530548095703, 16.555295944213867, 16.5553035736084, 16.555295944213867, 16.5553035736084, 16.5553035736084, 16.5552921295166, 16.5553035736084, 16.5553035736084, 16.555294036865234, 16.555299758911133, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.555299758911133, 16.55530548095703, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.555294036865234, 16.55530548095703, 16.555301666259766, 16.5552921295166, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.55530548095703, 16.555307388305664, 16.55530548095703, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555219650268555, 16.5553035736084, 16.5553035736084, 16.555301666259766, 16.5553035736084, 16.555273056030273, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.5553035736084, 16.555280685424805, 16.555307388305664, 16.555307388305664, 16.555307388305664, 16.5553035736084, 16.555301666259766, 16.5553035736084, 16.555301666259766, 16.55530548095703, 16.55530548095703, 16.555278778076172, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.555274963378906, 16.555301666259766]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([978.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10747.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([42681.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6620.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([95.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2093.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([315.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([107.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([448.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1525.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 3973822.213542909
Predicted: [16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.911075592041016, 16.911067962646484, 16.911075592041016, 16.911067962646484, 16.91107177734375, 16.91107177734375, 16.91106605529785, 16.91107177734375, 16.91106414794922, 16.911069869995117, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.911060333251953, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911060333251953, 16.91107177734375, 16.91107177734375, 16.911062240600586, 16.91107177734375, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.91107177734375, 16.911069869995117, 16.911073684692383, 16.911069869995117, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91100311279297, 16.911073684692383, 16.910968780517578, 16.91107177734375, 16.911075592041016, 16.911014556884766, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911075592041016, 16.911048889160156, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.910940170288086, 16.911075592041016, 16.911073684692383, 16.911041259765625, 16.91107177734375, 16.91103744506836, 16.91107177734375, 16.911067962646484, 16.911073684692383, 16.911052703857422, 16.911067962646484, 16.91107177734375, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.911026000976562, 16.91107177734375, 16.91107177734375, 16.911060333251953, 16.911073684692383, 16.911060333251953, 16.911073684692383, 16.91106414794922, 16.91107177734375, 16.911073684692383, 16.911067962646484, 16.91107177734375, 16.91107177734375, 16.911067962646484, 16.911060333251953, 16.91107177734375, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.911075592041016, 16.91107177734375, 16.911060333251953, 16.911075592041016, 16.911060333251953, 16.91106414794922, 16.91107177734375, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.911060333251953, 16.91107177734375, 16.91106414794922, 16.911069869995117, 16.91107177734375, 16.911073684692383, 16.91106414794922, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911067962646484, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.911075592041016, 16.911062240600586, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91103744506836, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.911069869995117, 16.911067962646484, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911069869995117, 16.911073684692383, 16.91107177734375, 16.911067962646484, 16.91107177734375, 16.911073684692383, 16.911062240600586, 16.91107177734375, 16.911069869995117, 16.91106605529785, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911067962646484, 16.911056518554688, 16.911075592041016, 16.911073684692383, 16.911067962646484, 16.911048889160156, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911060333251953, 16.91107177734375, 16.911067962646484, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911069869995117, 16.911073684692383, 16.91107177734375, 16.91106414794922, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911043167114258, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.9110164642334, 16.911067962646484, 16.911073684692383, 16.911075592041016, 16.911069869995117, 16.91107177734375, 16.91107177734375, 16.91105079650879, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911067962646484, 16.911067962646484, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91104507446289, 16.911073684692383, 16.91107177734375, 16.911052703857422, 16.91107177734375, 16.91107177734375, 16.911069869995117, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911041259765625, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.91106605529785, 16.91107177734375, 16.91105842590332, 16.911062240600586, 16.911069869995117, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.910995483398438, 16.911073684692383, 16.911067962646484, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911069869995117, 16.911067962646484, 16.911075592041016, 16.91106414794922, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911075592041016, 16.911067962646484, 16.91106605529785, 16.91106414794922, 16.911073684692383, 16.91107177734375, 16.911075592041016, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.911029815673828, 16.911073684692383, 16.911067962646484, 16.91107177734375, 16.911067962646484, 16.911067962646484, 16.911073684692383, 16.911075592041016, 16.911067962646484, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.91107177734375, 16.91103744506836, 16.911067962646484, 16.91107177734375, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911067962646484, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91101837158203, 16.91107177734375, 16.911073684692383, 16.911033630371094, 16.91107177734375, 16.91102409362793, 16.91107177734375, 16.910987854003906, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911069869995117, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91103172302246, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911075592041016, 16.911067962646484, 16.91107177734375, 16.911073684692383, 16.91106414794922, 16.911067962646484, 16.91107177734375, 16.911073684692383, 16.911069869995117, 16.911075592041016, 16.911073684692383, 16.911075592041016, 16.91106605529785, 16.911056518554688, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.911067962646484, 16.911067962646484, 16.91107177734375, 16.91104507446289, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.91106605529785, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911062240600586, 16.911067962646484, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911075592041016, 16.911075592041016, 16.91103744506836, 16.91107177734375, 16.911075592041016, 16.91106414794922, 16.91107177734375, 16.911073684692383, 16.911067962646484, 16.91107177734375, 16.911073684692383, 16.911062240600586, 16.91106414794922, 16.911069869995117, 16.911073684692383, 16.911062240600586, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.91106414794922, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.911054611206055, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911075592041016, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.911020278930664, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.911060333251953, 16.911073684692383, 16.91106414794922, 16.91107177734375, 16.911067962646484, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911075592041016, 16.911069869995117, 16.91104507446289, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.91098976135254, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.91106414794922, 16.911073684692383, 16.911075592041016, 16.911062240600586]
Actual: [tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([466.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([125.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([56.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7726.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 119530.84982111982
Predicted: [16.148351669311523, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14838981628418, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.14838409423828, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148311614990234, 16.148406982421875, 16.148395538330078, 16.148408889770508, 16.148408889770508, 16.14840316772461, 16.148401260375977, 16.14838409423828, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.14840316772461, 16.148405075073242, 16.148408889770508, 16.148405075073242, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14837646484375, 16.148406982421875, 16.148406982421875, 16.14777946472168, 16.148405075073242, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148405075073242, 16.148408889770508, 16.14840316772461, 16.14840316772461, 16.148273468017578, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.148399353027344, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148399353027344, 16.148408889770508, 16.148387908935547, 16.148380279541016, 16.148406982421875, 16.148406982421875, 16.148393630981445, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14838409423828, 16.148406982421875, 16.148406982421875, 16.148391723632812, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.14838409423828, 16.148406982421875, 16.148406982421875, 16.148405075073242, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.14822769165039, 16.148391723632812, 16.148365020751953, 16.148401260375977, 16.148408889770508, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148393630981445, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148405075073242, 16.148406982421875, 16.148408889770508, 16.148399353027344, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.14840316772461, 16.14840316772461, 16.148406982421875, 16.148393630981445, 16.148361206054688, 16.148399353027344, 16.148387908935547, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.14839744567871, 16.148391723632812, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148395538330078, 16.148395538330078, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148399353027344, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148401260375977, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148401260375977, 16.148408889770508, 16.14838409423828, 16.148405075073242, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14838981628418, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148405075073242, 16.148406982421875, 16.14834213256836, 16.14840316772461, 16.148408889770508, 16.14840316772461, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148324966430664, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.14839744567871, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.14839744567871, 16.148408889770508, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148406982421875, 16.148399353027344, 16.148406982421875, 16.148408889770508, 16.148395538330078, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148372650146484, 16.14840316772461, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14839744567871, 16.14840316772461, 16.14840316772461, 16.14840316772461, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148406982421875, 16.148405075073242, 16.148391723632812, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.14840316772461, 16.148401260375977, 16.148395538330078, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.148406982421875, 16.148408889770508, 16.148405075073242, 16.148405075073242, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14840316772461, 16.148405075073242, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.14840316772461, 16.14839744567871, 16.148408889770508, 16.148326873779297, 16.148399353027344, 16.148406982421875, 16.148357391357422, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.14839744567871, 16.148395538330078, 16.148406982421875, 16.14840316772461, 16.148391723632812, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148408889770508, 16.148326873779297, 16.14839744567871, 16.148408889770508, 16.148401260375977, 16.148399353027344, 16.148408889770508, 16.14840316772461, 16.14838409423828, 16.14840316772461, 16.148408889770508, 16.14840316772461, 16.148406982421875, 16.1483154296875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14839744567871, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.148340225219727, 16.14840316772461, 16.148406982421875, 16.14839744567871, 16.148406982421875, 16.148406982421875, 16.148399353027344, 16.148395538330078, 16.148406982421875, 16.148406982421875, 16.148399353027344, 16.14840316772461, 16.148406982421875, 16.148408889770508, 16.148399353027344, 16.148405075073242, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.148277282714844, 16.14840316772461, 16.148406982421875, 16.148405075073242, 16.14840316772461, 16.148406982421875, 16.148405075073242, 16.148399353027344, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.148393630981445, 16.14840316772461, 16.148408889770508, 16.148406982421875, 16.148391723632812, 16.14837646484375, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148408889770508, 16.148401260375977, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148387908935547, 16.148359298706055, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.14840316772461, 16.148406982421875, 16.148391723632812, 16.148168563842773, 16.148408889770508, 16.148406982421875, 16.148401260375977, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148391723632812, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.148387908935547, 16.148406982421875, 16.148406982421875, 16.148340225219727, 16.148387908935547, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148393630981445, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148405075073242, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148406982421875, 16.14840316772461, 16.14840316772461, 16.148406982421875, 16.148408889770508, 16.148391723632812, 16.148406982421875, 16.148406982421875, 16.14839744567871, 16.14840316772461, 16.148405075073242, 16.14840316772461, 16.148408889770508]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([798.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([606.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2133.3138269716574
Predicted: [13.672572135925293, 13.672574996948242, 13.672553062438965, 13.672560691833496, 13.672584533691406, 13.67257308959961, 13.672568321228027, 13.672585487365723, 13.672337532043457, 13.672533988952637, 13.67258071899414, 13.672579765319824, 13.670492172241211, 13.672562599182129, 13.672577857971191, 13.672581672668457, 13.672578811645508, 13.672500610351562, 13.672581672668457, 13.671736717224121, 13.6725435256958, 13.672533988952637, 13.672566413879395, 13.672577857971191, 13.672572135925293, 13.672568321228027, 13.672574043273926, 13.67255973815918, 13.672442436218262, 13.672539710998535, 13.672575950622559, 13.672579765319824, 13.672463417053223, 13.67258071899414, 13.672538757324219, 13.672564506530762, 13.672564506530762, 13.672576904296875, 13.672467231750488, 13.672575950622559, 13.672575950622559, 13.672581672668457, 13.672562599182129, 13.672563552856445, 13.67238998413086, 13.672526359558105, 13.672581672668457, 13.67258358001709, 13.672581672668457, 13.672574996948242, 13.67258071899414, 13.672506332397461, 13.67258071899414, 13.67258358001709, 13.672567367553711, 13.672578811645508, 13.672572135925293, 13.672575950622559, 13.672560691833496, 13.672581672668457, 13.672564506530762, 13.672579765319824, 13.672581672668457, 13.672574043273926, 13.672541618347168, 13.672574043273926, 13.672560691833496, 13.672478675842285, 13.672587394714355, 13.672558784484863, 13.672574996948242, 13.672574043273926, 13.67257308959961, 13.672525405883789, 13.672579765319824, 13.672577857971191, 13.672581672668457, 13.672574996948242, 13.672575950622559, 13.672568321228027, 13.672590255737305, 13.672558784484863, 13.672572135925293, 13.672581672668457, 13.672585487365723, 13.67257022857666, 13.672562599182129, 13.672578811645508, 13.672574996948242, 13.672579765319824, 13.672568321228027, 13.672510147094727, 13.672552108764648, 13.67258358001709, 13.672436714172363, 13.672436714172363, 13.672560691833496, 13.672586441040039, 13.672577857971191, 13.67258358001709, 13.672528266906738, 13.672577857971191, 13.672581672668457, 13.67258358001709, 13.672585487365723, 13.672579765319824, 13.672563552856445, 13.672577857971191, 13.672585487365723, 13.672586441040039, 13.67250919342041, 13.67257022857666, 13.67258358001709, 13.672577857971191, 13.672581672668457, 13.672394752502441, 13.672585487365723, 13.672579765319824, 13.67258071899414, 13.67258071899414, 13.672477722167969, 13.672577857971191, 13.672574996948242, 13.672472953796387, 13.672551155090332, 13.670401573181152, 13.672574043273926, 13.672579765319824, 13.67258358001709, 13.672566413879395, 13.672541618347168, 13.672575950622559, 13.672589302062988, 13.672566413879395, 13.672480583190918, 13.672545433044434, 13.672561645507812, 13.67255973815918, 13.672581672668457, 13.672579765319824, 13.672554969787598, 13.672579765319824, 13.67257022857666, 13.672545433044434, 13.672547340393066, 13.672578811645508, 13.672510147094727, 13.672564506530762, 13.672582626342773, 13.672575950622559, 13.672575950622559, 13.672588348388672, 13.672575950622559, 13.672577857971191, 13.672574043273926, 13.672175407409668, 13.672577857971191, 13.672518730163574, 13.672564506530762, 13.672553062438965, 13.672574996948242, 13.672576904296875, 13.672574043273926, 13.67258358001709, 13.67257022857666, 13.672587394714355, 13.672501564025879, 13.672578811645508, 13.672568321228027, 13.672532081604004, 13.672577857971191, 13.6725435256958, 13.67258358001709, 13.672524452209473, 13.672582626342773, 13.672572135925293, 13.672576904296875, 13.672579765319824, 13.672517776489258, 13.672581672668457, 13.672578811645508, 13.672558784484863, 13.672582626342773, 13.672471046447754, 13.672530174255371, 13.67258358001709, 13.672579765319824, 13.67257308959961, 13.672564506530762, 13.672581672668457, 13.672581672668457, 13.672566413879395, 13.672577857971191, 13.672547340393066, 13.672530174255371, 13.672575950622559, 13.67255973815918, 13.672572135925293, 13.672566413879395, 13.672562599182129, 13.672520637512207, 13.672581672668457, 13.672579765319824, 13.672533988952637, 13.672536849975586, 13.672574996948242, 13.672566413879395, 13.672579765319824, 13.672585487365723, 13.672578811645508, 13.672553062438965, 13.67255973815918, 13.672497749328613, 13.67253589630127, 13.672568321228027, 13.672572135925293, 13.6724853515625, 13.672516822814941, 13.672564506530762, 13.672562599182129, 13.672579765319824, 13.672564506530762, 13.672540664672852, 13.672565460205078, 13.672586441040039, 13.67255687713623, 13.672553062438965, 13.672575950622559, 13.672367095947266, 13.672566413879395, 13.672555923461914, 13.672577857971191, 13.672579765319824, 13.672514915466309, 13.6725492477417, 13.672578811645508, 13.672446250915527, 13.672462463378906, 13.672554969787598, 13.672209739685059, 13.67257022857666, 13.672551155090332, 13.67257308959961, 13.672545433044434, 13.672553062438965, 13.672579765319824, 13.672565460205078, 13.672468185424805, 13.672175407409668, 13.672575950622559, 13.672568321228027, 13.67227554321289, 13.672564506530762, 13.672480583190918, 13.672548294067383, 13.67258358001709, 13.67257308959961, 13.672552108764648, 13.672576904296875, 13.672575950622559, 13.67257308959961, 13.672587394714355, 13.672539710998535, 13.67258358001709, 13.672181129455566, 13.67255687713623, 13.672585487365723, 13.672581672668457, 13.672532081604004, 13.672579765319824, 13.672566413879395, 13.672578811645508, 13.672574996948242, 13.672514915466309, 13.672396659851074, 13.672364234924316, 13.672581672668457, 13.672565460205078, 13.672585487365723, 13.67257308959961, 13.672560691833496, 13.672579765319824, 13.672577857971191, 13.672581672668457, 13.6725492477417, 13.672537803649902, 13.67226505279541, 13.672572135925293, 13.672572135925293, 13.67257022857666, 13.67258358001709, 13.672575950622559, 13.672531127929688, 13.672585487365723, 13.672581672668457, 13.672577857971191, 13.672550201416016, 13.672578811645508, 13.67255687713623, 13.672578811645508, 13.672575950622559, 13.672471046447754, 13.672585487365723, 13.672562599182129, 13.6725435256958, 13.67258358001709, 13.672581672668457, 13.672566413879395, 13.672528266906738, 13.672574043273926, 13.672562599182129, 13.67240047454834, 13.672577857971191, 13.67257022857666, 13.672587394714355, 13.672575950622559, 13.672585487365723, 13.672568321228027, 13.672581672668457, 13.672574996948242, 13.67258358001709, 13.672585487365723, 13.672581672668457, 13.672513008117676, 13.672578811645508, 13.67258358001709, 13.672577857971191, 13.672557830810547, 13.672581672668457, 13.672494888305664, 13.6725435256958, 13.672526359558105, 13.67258071899414, 13.672564506530762, 13.67258358001709, 13.672576904296875, 13.672545433044434, 13.67258358001709, 13.67257308959961, 13.672577857971191, 13.672578811645508, 13.672586441040039, 13.672568321228027, 13.672581672668457, 13.672493934631348, 13.67258071899414, 13.672581672668457, 13.672579765319824, 13.672565460205078, 13.672568321228027, 13.672579765319824, 13.67255973815918, 13.672587394714355, 13.672564506530762, 13.672585487365723, 13.672579765319824, 13.672528266906738, 13.672545433044434, 13.67258071899414, 13.672582626342773, 13.672581672668457, 13.67257308959961, 13.672579765319824, 13.672581672668457, 13.672572135925293, 13.672510147094727, 13.672576904296875, 13.672565460205078, 13.672581672668457, 13.672572135925293, 13.6725492477417, 13.672589302062988, 13.672587394714355, 13.672554969787598, 13.672575950622559, 13.672566413879395, 13.672579765319824, 13.672574043273926, 13.672494888305664, 13.672528266906738, 13.67250919342041, 13.672579765319824, 13.672577857971191, 13.672586441040039, 13.672565460205078, 13.672572135925293, 13.672562599182129, 13.672564506530762, 13.67258358001709, 13.672577857971191, 13.672560691833496, 13.672539710998535, 13.67249584197998, 13.672562599182129, 13.67257022857666, 13.672564506530762, 13.672499656677246, 13.672557830810547, 13.672564506530762, 13.67258358001709, 13.672567367553711, 13.672528266906738, 13.672585487365723, 13.67255973815918, 13.672581672668457, 13.67258358001709, 13.672574996948242, 13.672579765319824, 13.672577857971191, 13.672532081604004, 13.672577857971191, 13.67258358001709, 13.672575950622559, 13.672576904296875, 13.672577857971191, 13.672538757324219, 13.672528266906738, 13.67258358001709, 13.672106742858887, 13.672565460205078, 13.67258358001709, 13.672455787658691, 13.672574043273926, 13.672524452209473, 13.672435760498047, 13.672507286071777, 13.672564506530762, 13.672574996948242, 13.67257022857666, 13.672562599182129, 13.672551155090332, 13.67257022857666, 13.67236614227295, 13.67258358001709, 13.67255973815918, 13.672585487365723, 13.67258358001709, 13.672566413879395, 13.672510147094727, 13.672396659851074, 13.672567367553711, 13.672566413879395, 13.672586441040039, 13.672567367553711, 13.67258071899414, 13.672545433044434, 13.67257308959961, 13.67253303527832, 13.672568321228027, 13.67255973815918, 13.672581672668457, 13.672579765319824, 13.67257308959961, 13.672581672668457, 13.672566413879395, 13.672564506530762, 13.672586441040039, 13.672574043273926, 13.671195030212402, 13.672587394714355, 13.672505378723145, 13.67258358001709, 13.672553062438965, 13.672560691833496, 13.672533988952637, 13.67257308959961, 13.672577857971191, 13.67258358001709, 13.672579765319824, 13.67258358001709, 13.672579765319824, 13.672585487365723, 13.672581672668457, 13.67255687713623, 13.672585487365723, 13.672574996948242, 13.672541618347168, 13.672574043273926, 13.672585487365723, 13.672449111938477, 13.67258358001709, 13.672574996948242, 13.672564506530762, 13.672577857971191, 13.672564506530762, 13.672553062438965, 13.672554016113281, 13.672579765319824, 13.672582626342773, 13.672503471374512, 13.67258358001709, 13.67257308959961, 13.672581672668457, 13.67258071899414, 13.672566413879395, 13.672572135925293, 13.672453880310059, 13.672581672668457, 13.672562599182129, 13.672577857971191]
Actual: [tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([49914.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([49.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 4980230.674091402
Predicted: [13.18616008758545, 13.186161994934082, 13.186159133911133, 13.186208724975586, 13.186164855957031, 13.186161041259766, 13.186162948608398, 13.186174392700195, 13.186165809631348, 13.18617057800293, 13.18617057800293, 13.186164855957031, 13.18617057800293, 13.186164855957031, 13.186165809631348, 13.186161041259766, 13.186161994934082, 13.186163902282715, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186631202697754, 13.18617057800293, 13.186161041259766, 13.186235427856445, 13.186164855957031, 13.186162948608398, 13.186172485351562, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186165809631348, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186197280883789, 13.186161041259766, 13.186163902282715, 13.186161994934082, 13.186159133911133, 13.186173439025879, 13.186159133911133, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186172485351562, 13.186161041259766, 13.186161041259766, 13.186163902282715, 13.18616008758545, 13.186187744140625, 13.18616008758545, 13.186176300048828, 13.186178207397461, 13.186164855957031, 13.18616008758545, 13.186159133911133, 13.18616008758545, 13.186159133911133, 13.186161041259766, 13.18616008758545, 13.186199188232422, 13.186164855957031, 13.186161994934082, 13.18634033203125, 13.186162948608398, 13.186161041259766, 13.186166763305664, 13.186159133911133, 13.186172485351562, 13.186161041259766, 13.186450958251953, 13.186182022094727, 13.18616008758545, 13.186166763305664, 13.186161041259766, 13.186172485351562, 13.186161041259766, 13.186176300048828, 13.186161041259766, 13.186217308044434, 13.186161041259766, 13.18616771697998, 13.186174392700195, 13.186161041259766, 13.18618392944336, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186175346374512, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186163902282715, 13.186161041259766, 13.186161041259766, 13.186169624328613, 13.186161041259766, 13.186163902282715, 13.18618392944336, 13.186172485351562, 13.18616008758545, 13.186174392700195, 13.18616008758545, 13.186161041259766, 13.186165809631348, 13.18618392944336, 13.186185836791992, 13.186164855957031, 13.186159133911133, 13.1862211227417, 13.186161041259766, 13.186185836791992, 13.186161041259766, 13.186605453491211, 13.186161994934082, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186164855957031, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186162948608398, 13.186159133911133, 13.186161041259766, 13.186159133911133, 13.186161994934082, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186164855957031, 13.18616008758545, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186172485351562, 13.186161994934082, 13.186161041259766, 13.18617057800293, 13.186159133911133, 13.186161041259766, 13.186161041259766, 13.186161994934082, 13.18616008758545, 13.186161041259766, 13.186192512512207, 13.186175346374512, 13.186176300048828, 13.186182022094727, 13.186163902282715, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186162948608398, 13.186164855957031, 13.186161041259766, 13.186159133911133, 13.186159133911133, 13.186161041259766, 13.186164855957031, 13.18616008758545, 13.186165809631348, 13.186161994934082, 13.186161041259766, 13.186187744140625, 13.186161041259766, 13.18617057800293, 13.186174392700195, 13.186180114746094, 13.186166763305664, 13.186164855957031, 13.186161041259766, 13.186168670654297, 13.186166763305664, 13.18626594543457, 13.18616771697998, 13.186161041259766, 13.186164855957031, 13.18616008758545, 13.186165809631348, 13.18617057800293, 13.186165809631348, 13.186164855957031, 13.186195373535156, 13.186176300048828, 13.186161041259766, 13.186182022094727, 13.186164855957031, 13.186162948608398, 13.186162948608398, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186179161071777, 13.186162948608398, 13.186166763305664, 13.186162948608398, 13.186161994934082, 13.186166763305664, 13.18616008758545, 13.186163902282715, 13.186270713806152, 13.186161041259766, 13.186164855957031, 13.186161041259766, 13.186212539672852, 13.186164855957031, 13.186161041259766, 13.186164855957031, 13.186164855957031, 13.186161041259766, 13.186168670654297, 13.186161994934082, 13.186164855957031, 13.186161041259766, 13.186189651489258, 13.186176300048828, 13.186161041259766, 13.186175346374512, 13.186159133911133, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186172485351562, 13.186171531677246, 13.186162948608398, 13.186161041259766, 13.186164855957031, 13.186164855957031, 13.186161041259766, 13.18618106842041, 13.186166763305664, 13.186162948608398, 13.186163902282715, 13.186161041259766, 13.18632698059082, 13.186161041259766, 13.18617057800293, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186161994934082, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.18616008758545, 13.18616008758545, 13.18617057800293, 13.186162948608398, 13.186161041259766, 13.186166763305664, 13.186210632324219, 13.186166763305664, 13.186161994934082, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186173439025879, 13.186174392700195, 13.186162948608398, 13.186164855957031, 13.186166763305664, 13.186169624328613, 13.186161041259766, 13.186161041259766, 13.186164855957031, 13.186177253723145, 13.186161041259766, 13.186164855957031, 13.186180114746094, 13.186162948608398, 13.186166763305664, 13.186161041259766, 13.186161041259766, 13.186169624328613, 13.186165809631348, 13.186159133911133, 13.186161041259766, 13.186161041259766, 13.18616771697998, 13.186162948608398, 13.186159133911133, 13.186161041259766, 13.186161041259766, 13.186161994934082, 13.186161041259766, 13.186180114746094, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186161994934082, 13.186172485351562, 13.186161041259766, 13.186161994934082, 13.18616008758545, 13.186161041259766, 13.186159133911133, 13.186162948608398, 13.186178207397461, 13.18616008758545, 13.186161041259766, 13.186163902282715, 13.18618106842041, 13.186177253723145, 13.186168670654297, 13.186161041259766, 13.186178207397461, 13.18616008758545, 13.186168670654297, 13.186161041259766, 13.186165809631348, 13.186162948608398, 13.186164855957031, 13.186172485351562, 13.186173439025879, 13.186172485351562, 13.186159133911133, 13.186176300048828, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186159133911133, 13.186161041259766, 13.186162948608398, 13.186166763305664, 13.186166763305664, 13.186193466186523, 13.186159133911133, 13.18616008758545, 13.186161041259766, 13.186168670654297, 13.186159133911133, 13.186161041259766, 13.186162948608398, 13.186161041259766, 13.186164855957031, 13.18617057800293, 13.186163902282715, 13.18616008758545, 13.186161041259766, 13.186182975769043, 13.186161041259766, 13.186162948608398, 13.18616008758545, 13.186161994934082, 13.186161994934082, 13.186159133911133, 13.186165809631348, 13.186161041259766, 13.186286926269531, 13.186193466186523, 13.186161041259766, 13.18616008758545, 13.186162948608398, 13.186166763305664, 13.186161041259766, 13.186159133911133, 13.186161041259766, 13.186159133911133, 13.186168670654297, 13.186177253723145, 13.186176300048828, 13.186161041259766, 13.186166763305664, 13.18616008758545, 13.186161041259766, 13.18616008758545, 13.18620777130127, 13.186159133911133, 13.186161041259766, 13.186159133911133, 13.18618392944336, 13.186214447021484, 13.186188697814941, 13.186161041259766, 13.186175346374512, 13.186172485351562, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186159133911133, 13.186164855957031, 13.186161041259766, 13.186161041259766, 13.186166763305664, 13.18616008758545, 13.186169624328613, 13.186161041259766, 13.186161994934082, 13.186161041259766, 13.186163902282715, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186176300048828, 13.186164855957031, 13.186162948608398, 13.186162948608398, 13.186162948608398, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186159133911133, 13.186161041259766, 13.186164855957031, 13.18616008758545, 13.186164855957031, 13.186168670654297, 13.186162948608398, 13.186159133911133, 13.186161041259766, 13.186185836791992, 13.186161041259766, 13.187414169311523, 13.186161041259766, 13.186176300048828, 13.18619155883789, 13.186161041259766, 13.18617057800293, 13.186172485351562, 13.186163902282715, 13.186166763305664, 13.186159133911133, 13.186161041259766, 13.186172485351562, 13.186161041259766, 13.186159133911133, 13.186161041259766, 13.186189651489258, 13.18624496459961, 13.186161041259766, 13.186166763305664, 13.186161041259766, 13.186164855957031, 13.186161041259766, 13.18616771697998, 13.186172485351562, 13.186161041259766, 13.186166763305664, 13.186162948608398, 13.186161041259766, 13.186166763305664, 13.186161041259766, 13.186189651489258, 13.186164855957031, 13.186162948608398, 13.186172485351562, 13.186187744140625, 13.186161994934082, 13.186169624328613, 13.18616008758545, 13.186159133911133, 13.18616008758545, 13.186162948608398, 13.186164855957031, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186161994934082, 13.186163902282715, 13.186161041259766, 13.186159133911133, 13.186161041259766, 13.18616008758545, 13.186165809631348, 13.186159133911133, 13.186210632324219, 13.186187744140625, 13.186271667480469, 13.186161041259766, 13.186164855957031, 13.186162948608398, 13.186161041259766, 13.186168670654297, 13.186161041259766, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186166763305664, 13.186161041259766]
Actual: [tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([389.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23216.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2051.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1079.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1031.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([52.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1089807.3651340466
Predicted: [12.5355863571167, 12.535707473754883, 12.535945892333984, 12.53572940826416, 12.536087036132812, 12.535449981689453, 12.535441398620605, 12.535943031311035, 12.536018371582031, 12.535625457763672, 12.536056518554688, 12.536114692687988, 12.535944938659668, 12.536002159118652, 12.535876274108887, 12.536086082458496, 12.536133766174316, 12.535841941833496, 12.53598403930664, 12.535920143127441, 12.536168098449707, 12.535579681396484, 12.536005973815918, 12.536137580871582, 12.535886764526367, 12.536035537719727, 12.53591251373291, 12.536091804504395, 12.536093711853027, 12.535983085632324, 12.53553295135498, 12.536776542663574, 12.53550910949707, 12.535782814025879, 12.53612995147705, 12.535642623901367, 12.536166191101074, 12.535930633544922, 12.535687446594238, 12.53604793548584, 12.535565376281738, 12.536018371582031, 12.536120414733887, 12.535649299621582, 12.536091804504395, 12.535393714904785, 12.536057472229004, 12.535923957824707, 12.536083221435547, 12.535832405090332, 12.536011695861816, 12.535713195800781, 12.535579681396484, 12.535771369934082, 12.535944938659668, 12.536160469055176, 12.536008834838867, 12.536181449890137, 12.535515785217285, 12.536046028137207, 12.536046028137207, 12.536017417907715, 12.535776138305664, 12.535771369934082, 12.536187171936035, 12.536087989807129, 12.53614330291748, 12.535510063171387, 12.535662651062012, 12.535638809204102, 12.536089897155762, 12.536019325256348, 12.535965919494629, 12.535683631896973, 12.535500526428223, 12.535990715026855, 12.53597354888916, 12.536164283752441, 12.535781860351562, 12.53567123413086, 12.5354642868042, 12.53564167022705, 12.536192893981934, 12.536205291748047, 12.536154747009277, 12.535865783691406, 12.536023139953613, 12.535880088806152, 12.535706520080566, 12.535828590393066, 12.53600788116455, 12.535984992980957, 12.535677909851074, 12.536136627197266, 12.535700798034668, 12.53610897064209, 12.536131858825684, 12.535902976989746, 12.535941123962402, 12.536188125610352, 12.536005020141602, 12.535727500915527, 12.536029815673828, 12.535862922668457, 12.535576820373535, 12.536114692687988, 12.535755157470703, 12.536002159118652, 12.53567123413086, 12.535917282104492, 12.535920143127441, 12.535733222961426, 12.536090850830078, 12.535879135131836, 12.535831451416016, 12.535764694213867, 12.535693168640137, 12.536015510559082, 12.535948753356934, 12.536090850830078, 12.535543441772461, 12.53600025177002, 12.53610897064209, 12.535792350769043, 12.535771369934082, 12.535746574401855, 12.5355863571167, 12.536038398742676, 12.535805702209473, 12.535905838012695, 12.535895347595215, 12.535759925842285, 12.536046028137207, 12.536112785339355, 12.53554630279541, 12.5360107421875, 12.535924911499023, 12.535456657409668, 12.53602123260498, 12.535500526428223, 12.535919189453125, 12.53564453125, 12.535568237304688, 12.535903930664062, 12.535923957824707, 12.535926818847656, 12.536099433898926, 12.535506248474121, 12.53598690032959, 12.535874366760254, 12.535979270935059, 12.5357027053833, 12.53601360321045, 12.53620433807373, 12.5360689163208, 12.536050796508789, 12.535660743713379, 12.536116600036621, 12.536086082458496, 12.535524368286133, 12.535968780517578, 12.535795211791992, 12.535645484924316, 12.535965919494629, 12.535543441772461, 12.535902976989746, 12.535466194152832, 12.535794258117676, 12.535490989685059, 12.536003112792969, 12.53589916229248, 12.535897254943848, 12.535933494567871, 12.536042213439941, 12.536176681518555, 12.535933494567871, 12.535828590393066, 12.536054611206055, 12.536054611206055, 12.535874366760254, 12.535469055175781, 12.536042213439941, 12.536063194274902, 12.536162376403809, 12.536118507385254, 12.536206245422363, 12.536187171936035, 12.536009788513184, 12.536114692687988, 12.535698890686035, 12.535904884338379, 12.535991668701172, 12.53614330291748, 12.536166191101074, 12.535689353942871, 12.535933494567871, 12.536111831665039, 12.53577995300293, 12.535964965820312, 12.536076545715332, 12.535975456237793, 12.53547191619873, 12.5355806350708, 12.535778999328613, 12.535844802856445, 12.535980224609375, 12.536118507385254, 12.535994529724121, 12.535517692565918, 12.535737991333008, 12.535877227783203, 12.53544807434082, 12.535567283630371, 12.535870552062988, 12.535676002502441, 12.536076545715332, 12.535502433776855, 12.535948753356934, 12.535694122314453, 12.535970687866211, 12.535611152648926, 12.536084175109863, 12.535937309265137, 12.535834312438965, 12.5358304977417, 12.53540325164795, 12.5355863571167, 12.53565788269043, 12.536086082458496, 12.536175727844238, 12.536026954650879, 12.536138534545898, 12.535923957824707, 12.535971641540527, 12.535431861877441, 12.535872459411621, 12.536072731018066, 12.536188125610352, 12.536053657531738, 12.536149978637695, 12.535873413085938, 12.53610897064209, 12.536057472229004, 12.535439491271973, 12.535887718200684, 12.53614330291748, 12.536171913146973, 12.53593921661377, 12.536134719848633, 12.535707473754883, 12.53545093536377, 12.53564167022705, 12.536113739013672, 12.53597354888916, 12.536136627197266, 12.53584098815918, 12.535771369934082, 12.535920143127441, 12.536124229431152, 12.53602123260498, 12.535928726196289, 12.535975456237793, 12.535660743713379, 12.536055564880371, 12.535882949829102, 12.536118507385254, 12.536077499389648, 12.53569221496582, 12.5359468460083, 12.53589153289795, 12.536197662353516, 12.536168098449707, 12.536076545715332, 12.536072731018066, 12.53598690032959, 12.536028861999512, 12.535554885864258, 12.535653114318848, 12.536080360412598, 12.535796165466309, 12.53614330291748, 12.535685539245605, 12.536185264587402, 12.536131858825684, 12.536206245422363, 12.536131858825684, 12.53803539276123, 12.535914421081543, 12.538978576660156, 12.535819053649902, 12.536086082458496, 12.535998344421387, 12.535961151123047, 12.535578727722168, 12.53567123413086, 12.535490989685059, 12.535921096801758, 12.536016464233398, 12.535452842712402, 12.536133766174316, 12.5357027053833, 12.536002159118652, 12.536198616027832, 12.536087989807129, 12.535895347595215, 12.5355863571167, 12.536080360412598, 12.536044120788574, 12.536147117614746, 12.535836219787598, 12.536093711853027, 12.535635948181152, 12.535710334777832, 12.535606384277344, 12.53576946258545, 12.536036491394043, 12.5358304977417, 12.536131858825684, 12.535691261291504, 12.53546142578125, 12.535441398620605, 12.535547256469727, 12.536118507385254, 12.536141395568848, 12.536065101623535, 12.536029815673828, 12.535447120666504, 12.535944938659668, 12.535922050476074, 12.536189079284668, 12.535810470581055, 12.535558700561523, 12.535428047180176, 12.535937309265137, 12.535816192626953, 12.536210060119629, 12.53549861907959, 12.536097526550293, 12.536086082458496, 12.536072731018066, 12.53597354888916, 12.536112785339355, 12.53600025177002, 12.535550117492676, 12.536093711853027, 12.53580379486084, 12.535883903503418, 12.536057472229004, 12.536009788513184, 12.536057472229004, 12.544015884399414, 12.53600788116455, 12.537225723266602, 12.535475730895996, 12.5361328125, 12.535956382751465, 12.536057472229004, 12.536012649536133, 12.536110877990723, 12.53618049621582, 12.535659790039062, 12.536004066467285, 12.53609561920166, 12.535935401916504, 12.536080360412598, 12.536087036132812, 12.536051750183105, 12.5354585647583, 12.536002159118652, 12.536164283752441, 12.535801887512207, 12.536075592041016, 12.536012649536133, 12.536195755004883, 12.536040306091309, 12.536192893981934, 12.536009788513184, 12.536133766174316, 12.536105155944824, 12.535597801208496, 12.535935401916504, 12.535513877868652, 12.535445213317871, 12.535574913024902, 12.535872459411621, 12.53604507446289, 12.536145210266113, 12.536089897155762, 12.535599708557129, 12.535548210144043, 12.536057472229004, 12.5358304977417, 12.535835266113281, 12.535737991333008, 12.535883903503418, 12.535988807678223, 12.535480499267578, 12.53612995147705, 12.535452842712402, 12.535477638244629, 12.535733222961426, 12.53613567352295, 12.536192893981934, 12.535482406616211, 12.536162376403809, 12.535781860351562, 12.53581428527832, 12.53591537475586, 12.536137580871582, 12.535909652709961, 12.535926818847656, 12.535487174987793, 12.53601360321045, 12.53605842590332, 12.5354642868042, 12.536139488220215, 12.535778045654297, 12.535449028015137, 12.535599708557129, 12.535683631896973, 12.536103248596191, 12.535738945007324, 12.536118507385254, 12.536772727966309, 12.535996437072754, 12.536173820495605, 12.535855293273926, 12.535943031311035, 12.535776138305664, 12.536019325256348, 12.53597640991211, 12.535431861877441, 12.53612232208252, 12.535895347595215, 12.536189079284668, 12.536070823669434, 12.535625457763672, 12.535786628723145, 12.536182403564453, 12.535958290100098, 12.535666465759277, 12.53615665435791, 12.536185264587402, 12.53589916229248, 12.536103248596191, 12.536205291748047, 12.53598690032959, 12.536028861999512, 12.536162376403809, 12.535979270935059, 12.535727500915527, 12.536177635192871, 12.536035537719727, 12.535841941833496, 12.536121368408203, 12.536081314086914, 12.536030769348145, 12.536030769348145, 12.535792350769043, 12.535758018493652, 12.535502433776855, 12.536028861999512, 12.535922050476074, 12.5360689163208, 12.536001205444336, 12.535958290100098, 12.535807609558105, 12.535761833190918, 12.535866737365723, 12.536111831665039, 12.535975456237793, 12.535920143127441, 12.535843849182129, 12.536032676696777, 12.536111831665039, 12.535441398620605, 12.535628318786621, 12.5358304977417, 12.536011695861816, 12.536168098449707, 12.536049842834473, 12.535918235778809, 12.535937309265137, 12.535798072814941, 12.53615665435791, 12.536152839660645, 12.536149978637695, 12.535927772521973, 12.536195755004883, 12.535890579223633, 12.536093711853027, 12.536051750183105, 12.536543846130371, 12.53606128692627, 12.535901069641113, 12.535881996154785, 12.535823822021484, 12.536049842834473, 12.535965919494629, 12.536195755004883]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([116.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 158.17283894076076
Predicted: [13.306705474853516, 13.306705474853516, 13.306714057922363, 13.306689262390137, 13.306694030761719, 13.306703567504883, 13.306706428527832, 13.306709289550781, 13.306708335876465, 13.30671215057373, 13.306696891784668, 13.30669116973877, 13.306714057922363, 13.306713104248047, 13.306707382202148, 13.306710243225098, 13.306710243225098, 13.30669116973877, 13.306708335876465, 13.306714057922363, 13.306711196899414, 13.3066987991333, 13.306707382202148, 13.306694030761719, 13.306714057922363, 13.30670166015625, 13.306708335876465, 13.3066987991333, 13.306707382202148, 13.306689262390137, 13.306714057922363, 13.306700706481934, 13.306693077087402, 13.306714057922363, 13.306694030761719, 13.30671215057373, 13.306708335876465, 13.306715965270996, 13.306696891784668, 13.306702613830566, 13.30671215057373, 13.306685447692871, 13.306714057922363, 13.306694030761719, 13.30669116973877, 13.306705474853516, 13.306714057922363, 13.3067045211792, 13.306715965270996, 13.306706428527832, 13.30670166015625, 13.30669116973877, 13.306713104248047, 13.30670166015625, 13.306710243225098, 13.306710243225098, 13.30670166015625, 13.306687355041504, 13.306709289550781, 13.306708335876465, 13.30671501159668, 13.306714057922363, 13.306715965270996, 13.306711196899414, 13.30671501159668, 13.306706428527832, 13.3067045211792, 13.30671501159668, 13.306713104248047, 13.306713104248047, 13.306710243225098, 13.306714057922363, 13.306709289550781, 13.306715965270996, 13.306696891784668, 13.306706428527832, 13.30671501159668, 13.306706428527832, 13.306715965270996, 13.306714057922363, 13.306707382202148, 13.306714057922363, 13.306696891784668, 13.306708335876465, 13.306703567504883, 13.306711196899414, 13.30671501159668, 13.306709289550781, 13.306706428527832, 13.306702613830566, 13.306715965270996, 13.30671215057373, 13.306711196899414, 13.306694984436035, 13.306709289550781, 13.30671215057373, 13.306706428527832, 13.306705474853516, 13.30671501159668, 13.306694984436035, 13.30671215057373, 13.306716918945312, 13.306700706481934, 13.306711196899414, 13.306696891784668, 13.306714057922363, 13.306714057922363, 13.306702613830566, 13.306714057922363, 13.306709289550781, 13.306706428527832, 13.306714057922363, 13.306715965270996, 13.306707382202148, 13.306696891784668, 13.306710243225098, 13.306706428527832, 13.306710243225098, 13.306685447692871, 13.306713104248047, 13.306713104248047, 13.306713104248047, 13.30671215057373, 13.306715965270996, 13.306715965270996, 13.30671215057373, 13.306714057922363, 13.306715965270996, 13.306714057922363, 13.306716918945312, 13.306709289550781, 13.306706428527832, 13.306709289550781, 13.306709289550781, 13.306693077087402, 13.306700706481934, 13.306702613830566, 13.306715965270996, 13.30728816986084, 13.306703567504883, 13.306690216064453, 13.306711196899414, 13.306708335876465, 13.306700706481934, 13.30671215057373, 13.306713104248047, 13.306708335876465, 13.306707382202148, 13.306699752807617, 13.306711196899414, 13.30671215057373, 13.306710243225098, 13.306709289550781, 13.306709289550781, 13.306706428527832, 13.306694984436035, 13.306710243225098, 13.306695938110352, 13.306714057922363, 13.30671215057373, 13.306696891784668, 13.306714057922363, 13.3067045211792, 13.306702613830566, 13.306714057922363, 13.30671501159668, 13.306707382202148, 13.306706428527832, 13.306710243225098, 13.30671215057373, 13.306700706481934, 13.306706428527832, 13.306687355041504, 13.306694984436035, 13.306697845458984, 13.30671215057373, 13.3067045211792, 13.306694984436035, 13.306714057922363, 13.306706428527832, 13.306710243225098, 13.30670166015625, 13.306693077087402, 13.306708335876465, 13.306711196899414, 13.30671215057373, 13.306687355041504, 13.306696891784668, 13.306711196899414, 13.30670166015625, 13.306706428527832, 13.306710243225098, 13.30671215057373, 13.30671215057373, 13.306708335876465, 13.306715965270996, 13.306690216064453, 13.3067045211792, 13.306694984436035, 13.306707382202148, 13.306694030761719, 13.306709289550781, 13.306708335876465, 13.306696891784668, 13.306715965270996, 13.306696891784668, 13.307005882263184, 13.306710243225098, 13.306708335876465, 13.30671215057373, 13.306694030761719, 13.30671215057373, 13.30671501159668, 13.30671501159668, 13.306784629821777, 13.306706428527832, 13.306703567504883, 13.30670166015625, 13.306715965270996, 13.30671215057373, 13.306715965270996, 13.30671215057373, 13.30671501159668, 13.30671215057373, 13.306715965270996, 13.306694030761719, 13.306711196899414, 13.306696891784668, 13.306700706481934, 13.306710243225098, 13.3066987991333, 13.306708335876465, 13.306715965270996, 13.306716918945312, 13.306709289550781, 13.306714057922363, 13.306705474853516, 13.30671501159668, 13.306713104248047, 13.30671215057373, 13.306709289550781, 13.306715965270996, 13.306702613830566, 13.306699752807617, 13.306705474853516, 13.306707382202148, 13.306708335876465, 13.306699752807617, 13.306707382202148, 13.306706428527832, 13.306714057922363, 13.306706428527832, 13.306706428527832, 13.306713104248047, 13.30671215057373, 13.306715965270996, 13.30671215057373, 13.306708335876465, 13.306707382202148, 13.306699752807617, 13.306700706481934, 13.306715965270996, 13.306703567504883, 13.306714057922363, 13.306706428527832, 13.30671215057373, 13.30671215057373, 13.306709289550781, 13.306696891784668, 13.306710243225098, 13.306708335876465, 13.306708335876465, 13.306709289550781, 13.306705474853516, 13.306690216064453, 13.306703567504883, 13.306714057922363, 13.306713104248047, 13.306699752807617, 13.306685447692871, 13.30671215057373, 13.306702613830566, 13.30671501159668, 13.306700706481934, 13.30671215057373, 13.306693077087402, 13.30671215057373, 13.30715274810791, 13.30671215057373, 13.306694984436035, 13.30671215057373, 13.306713104248047, 13.306714057922363, 13.306715965270996, 13.306714057922363, 13.306706428527832, 13.306708335876465, 13.306696891784668, 13.306702613830566, 13.30671215057373, 13.306706428527832, 13.306714057922363, 13.306694030761719, 13.30669116973877, 13.30671501159668, 13.30671215057373, 13.3067045211792, 13.306702613830566, 13.306673049926758, 13.306702613830566, 13.306715965270996, 13.306708335876465, 13.306714057922363, 13.306714057922363, 13.306714057922363, 13.306715965270996, 13.306714057922363, 13.306859016418457, 13.306707382202148, 13.306710243225098, 13.306702613830566, 13.30671215057373, 13.306708335876465, 13.306671142578125, 13.306702613830566, 13.306702613830566, 13.306714057922363, 13.306706428527832, 13.30671215057373, 13.306706428527832, 13.30671215057373, 13.306696891784668, 13.306715965270996, 13.3066987991333, 13.306710243225098, 13.306716918945312, 13.306675910949707, 13.306714057922363, 13.306709289550781, 13.306714057922363, 13.306715965270996, 13.306690216064453, 13.306714057922363, 13.306699752807617, 13.30671215057373, 13.3066987991333, 13.306694984436035, 13.30671501159668, 13.306696891784668, 13.306714057922363, 13.306716918945312, 13.306700706481934, 13.306705474853516, 13.306715965270996, 13.306693077087402, 13.306706428527832, 13.306692123413086, 13.306708335876465, 13.306706428527832, 13.306699752807617, 13.306710243225098, 13.306695938110352, 13.306693077087402, 13.3066987991333, 13.306714057922363, 13.306714057922363, 13.30671215057373, 13.306714057922363, 13.306991577148438, 13.30671215057373, 13.306700706481934, 13.306694984436035, 13.30671215057373, 13.306710243225098, 13.306679725646973, 13.30671215057373, 13.306714057922363, 13.306693077087402, 13.306699752807617, 13.30668830871582, 13.306705474853516, 13.306708335876465, 13.3066987991333, 13.306709289550781, 13.306709289550781, 13.30671501159668, 13.306692123413086, 13.306695938110352, 13.306689262390137, 13.306709289550781, 13.306700706481934, 13.3067045211792, 13.306699752807617, 13.30671215057373, 13.30671215057373, 13.306710243225098, 13.3066987991333, 13.306710243225098, 13.306708335876465, 13.306708335876465, 13.306703567504883, 13.306705474853516, 13.306713104248047, 13.306692123413086, 13.3067045211792, 13.306678771972656, 13.306705474853516, 13.306713104248047, 13.3067045211792, 13.306700706481934, 13.306709289550781, 13.306705474853516, 13.3066987991333, 13.306714057922363, 13.306694984436035, 13.306715965270996, 13.306683540344238, 13.306710243225098, 13.306714057922363, 13.306710243225098, 13.306696891784668, 13.306703567504883, 13.30671215057373, 13.306706428527832, 13.30671215057373, 13.306706428527832, 13.306710243225098, 13.306695938110352, 13.306700706481934, 13.306713104248047, 13.306708335876465, 13.306696891784668, 13.306710243225098, 13.30671215057373, 13.306706428527832, 13.306708335876465, 13.306714057922363, 13.306706428527832, 13.306715965270996, 13.3067045211792, 13.30670166015625, 13.30670166015625, 13.306878089904785, 13.306714057922363, 13.306696891784668, 13.306690216064453, 13.306709289550781, 13.30671215057373, 13.306710243225098, 13.30671215057373, 13.30671215057373, 13.306694984436035, 13.306709289550781, 13.306708335876465, 13.306710243225098, 13.306707382202148, 13.306710243225098, 13.306714057922363, 13.306687355041504, 13.30671215057373, 13.306713104248047, 13.3066987991333, 13.30671501159668, 13.30671215057373, 13.306697845458984, 13.30671215057373, 13.306703567504883, 13.306710243225098, 13.306710243225098, 13.306709289550781, 13.3067045211792, 13.3067045211792, 13.306709289550781, 13.306708335876465, 13.30671215057373, 13.306715965270996, 13.306710243225098, 13.306700706481934, 13.306696891784668, 13.306696891784668, 13.306710243225098, 13.306710243225098, 13.306708335876465, 13.306714057922363, 13.306700706481934, 13.306715965270996, 13.306707382202148, 13.306710243225098, 13.3067045211792, 13.306709289550781, 13.306702613830566, 13.306706428527832, 13.306714057922363, 13.306702613830566, 13.306702613830566, 13.306708335876465, 13.306715965270996, 13.30671215057373, 13.30671215057373, 13.306710243225098]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([372.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([92.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21340.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([87.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([278.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1214.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([220.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([281.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 913330.6154213889
Predicted: [13.670265197753906, 13.670257568359375, 13.670269012451172, 13.670271873474121, 13.670272827148438, 13.670272827148438, 13.670272827148438, 13.670272827148438, 13.670272827148438, 13.670272827148438, 13.67026424407959, 13.670273780822754, 13.670270919799805, 13.670260429382324, 13.670270919799805, 13.670272827148438, 13.670230865478516, 13.670272827148438, 13.670269966125488, 13.670267105102539, 13.670271873474121, 13.670267105102539, 13.67026424407959, 13.670263290405273, 13.670272827148438, 13.670272827148438, 13.670249938964844, 13.670272827148438, 13.670269966125488, 13.670272827148438, 13.670271873474121, 13.670268058776855, 13.670269012451172, 13.670230865478516, 13.670272827148438, 13.670266151428223, 13.670270919799805, 13.67026138305664, 13.670267105102539, 13.670270919799805, 13.670263290405273, 13.670271873474121, 13.670270919799805, 13.670267105102539, 13.67025375366211, 13.670270919799805, 13.670258522033691, 13.670263290405273, 13.670269012451172, 13.670263290405273, 13.670272827148438, 13.670234680175781, 13.67024040222168, 13.670269012451172, 13.670270919799805, 13.670259475708008, 13.670270919799805, 13.670272827148438, 13.670269012451172, 13.670270919799805, 13.670268058776855, 13.670272827148438, 13.670272827148438, 13.670267105102539, 13.670270919799805, 13.670269012451172, 13.670272827148438, 13.670257568359375, 13.670269966125488, 13.670272827148438, 13.670267105102539, 13.670271873474121, 13.670269012451172, 13.670272827148438, 13.670272827148438, 13.670270919799805, 13.670255661010742, 13.670124053955078, 13.67025375366211, 13.670265197753906, 13.670272827148438, 13.67026138305664, 13.670272827148438, 13.670269012451172, 13.67026138305664, 13.670271873474121, 13.670256614685059, 13.670270919799805, 13.670272827148438, 13.670262336730957, 13.670272827148438, 13.670236587524414, 13.670270919799805, 13.670269012451172, 13.670272827148438, 13.670267105102539, 13.670270919799805, 13.670263290405273, 13.670257568359375, 13.670265197753906, 13.670269012451172, 13.670272827148438, 13.670270919799805, 13.670273780822754, 13.670255661010742, 13.670270919799805, 13.670270919799805, 13.670270919799805, 13.670184135437012, 13.670265197753906, 13.670273780822754, 13.670272827148438, 13.67027473449707, 13.670249938964844, 13.67026138305664, 13.670259475708008, 13.670272827148438, 13.670270919799805, 13.670269966125488, 13.67026138305664, 13.67025089263916, 13.670270919799805, 13.670269012451172, 13.670272827148438, 13.670266151428223, 13.670193672180176, 13.670228004455566, 13.670259475708008, 13.670272827148438, 13.67027473449707, 13.670273780822754, 13.670267105102539, 13.670271873474121, 13.670267105102539, 13.670263290405273, 13.670267105102539, 13.670270919799805, 13.670270919799805, 13.67026138305664, 13.670272827148438, 13.670262336730957, 13.670272827148438, 13.670272827148438, 13.670269012451172, 13.670269012451172, 13.67027473449707, 13.670162200927734, 13.670265197753906, 13.670270919799805, 13.670267105102539, 13.670256614685059, 13.670272827148438, 13.67026424407959, 13.670270919799805, 13.67026138305664, 13.670269012451172, 13.670269012451172, 13.67026424407959, 13.670272827148438, 13.670268058776855, 13.670267105102539, 13.670265197753906, 13.670263290405273, 13.670270919799805, 13.670269012451172, 13.670272827148438, 13.670255661010742, 13.670269966125488, 13.670272827148438, 13.670266151428223, 13.670265197753906, 13.670265197753906, 13.670257568359375, 13.670271873474121, 13.670265197753906, 13.670269012451172, 13.670269012451172, 13.67026424407959, 13.670271873474121, 13.670272827148438, 13.670255661010742, 13.670270919799805, 13.670269012451172, 13.670244216918945, 13.670270919799805, 13.670251846313477, 13.670269012451172, 13.67026138305664, 13.670255661010742, 13.670269012451172, 13.670269012451172, 13.670269012451172, 13.670272827148438, 13.670251846313477, 13.670270919799805, 13.670267105102539, 13.670270919799805, 13.670263290405273, 13.670270919799805, 13.67027473449707, 13.670271873474121, 13.670270919799805, 13.67026138305664, 13.670272827148438, 13.670272827148438, 13.670254707336426, 13.670269012451172, 13.670266151428223, 13.670204162597656, 13.670269012451172, 13.670254707336426, 13.670269012451172, 13.670246124267578, 13.670265197753906, 13.670251846313477, 13.670270919799805, 13.670269012451172, 13.670269012451172, 13.670269012451172, 13.670270919799805, 13.670273780822754, 13.670269012451172, 13.670267105102539, 13.670270919799805, 13.670270919799805, 13.670268058776855, 13.670246124267578, 13.670271873474121, 13.670270919799805, 13.670272827148438, 13.670272827148438, 13.67027473449707, 13.67027473449707, 13.670270919799805, 13.670272827148438, 13.670262336730957, 13.670269012451172, 13.670270919799805, 13.670272827148438, 13.670272827148438, 13.670262336730957, 13.670269012451172, 13.670272827148438, 13.670266151428223, 13.670269012451172, 13.670272827148438, 13.670269012451172, 13.670249938964844, 13.670257568359375, 13.670265197753906, 13.670267105102539, 13.670270919799805, 13.670272827148438, 13.670270919799805, 13.670254707336426, 13.670166015625, 13.670268058776855, 13.670238494873047, 13.670255661010742, 13.670268058776855, 13.67026138305664, 13.670270919799805, 13.670251846313477, 13.670269012451172, 13.670262336730957, 13.670269012451172, 13.670259475708008, 13.670272827148438, 13.670269012451172, 13.670267105102539, 13.670266151428223, 13.670236587524414, 13.670257568359375, 13.67026138305664, 13.670272827148438, 13.670273780822754, 13.670270919799805, 13.670272827148438, 13.670269012451172, 13.670270919799805, 13.670246124267578, 13.670267105102539, 13.670270919799805, 13.67027473449707, 13.670270919799805, 13.670272827148438, 13.670268058776855, 13.670272827148438, 13.670270919799805, 13.670245170593262, 13.670269012451172, 13.670272827148438, 13.670273780822754, 13.670269012451172, 13.670272827148438, 13.670263290405273, 13.670238494873047, 13.670259475708008, 13.670272827148438, 13.670270919799805, 13.670272827148438, 13.670267105102539, 13.670265197753906, 13.670269012451172, 13.670272827148438, 13.670270919799805, 13.670269012451172, 13.670269966125488, 13.67026138305664, 13.670270919799805, 13.670268058776855, 13.670272827148438, 13.670272827148438, 13.670263290405273, 13.670269012451172, 13.670269012451172, 13.670273780822754, 13.670272827148438, 13.670272827148438, 13.670270919799805, 13.670270919799805, 13.670271873474121, 13.670257568359375, 13.670260429382324, 13.670270919799805, 13.670265197753906, 13.670272827148438, 13.670263290405273, 13.670273780822754, 13.670272827148438, 13.670273780822754, 13.670272827148438, 13.67004680633545, 13.670269012451172, 13.669960021972656, 13.670267105102539, 13.670272827148438, 13.670270919799805, 13.670269012451172, 13.670257568359375, 13.67026138305664, 13.670249938964844, 13.670269012451172, 13.670270919799805, 13.670241355895996, 13.670272827148438, 13.670263290405273, 13.670270919799805, 13.67027473449707, 13.670272827148438, 13.670269012451172, 13.670257568359375, 13.670272827148438, 13.670270919799805, 13.670272827148438, 13.670267105102539, 13.670272827148438, 13.670260429382324, 13.67026138305664, 13.670258522033691, 13.67026424407959, 13.670271873474121, 13.670267105102539, 13.670272827148438, 13.670262336730957, 13.670231819152832, 13.670248985290527, 13.670255661010742, 13.670272827148438, 13.670272827148438, 13.670270919799805, 13.670270919799805, 13.670247077941895, 13.670269966125488, 13.670269012451172, 13.670273780822754, 13.670267105102539, 13.670256614685059, 13.670238494873047, 13.670269012451172, 13.670267105102539, 13.67027473449707, 13.670248985290527, 13.670272827148438, 13.670272827148438, 13.670270919799805, 13.670269966125488, 13.670272827148438, 13.670270919799805, 13.670256614685059, 13.670272827148438, 13.670266151428223, 13.670268058776855, 13.670271873474121, 13.670270919799805, 13.670270919799805, 13.669820785522461, 13.670270919799805, 13.670062065124512, 13.6702241897583, 13.670272827148438, 13.670269012451172, 13.670270919799805, 13.670270919799805, 13.670272827148438, 13.670273780822754, 13.67026138305664, 13.670270919799805, 13.670272827148438, 13.670269012451172, 13.670272827148438, 13.670272827148438, 13.670270919799805, 13.670243263244629, 13.670270919799805, 13.670272827148438, 13.670267105102539, 13.670270919799805, 13.670270919799805, 13.67027473449707, 13.670271873474121, 13.67027473449707, 13.670270919799805, 13.670272827148438, 13.670272827148438, 13.670257568359375, 13.670269012451172, 13.670249938964844, 13.670239448547363, 13.670257568359375, 13.670268058776855, 13.670270919799805, 13.670272827148438, 13.670272827148438, 13.670257568359375, 13.67021369934082, 13.670270919799805, 13.670267105102539, 13.670267105102539, 13.670265197753906, 13.670269012451172, 13.670270919799805, 13.670246124267578, 13.670272827148438, 13.67022705078125, 13.670244216918945, 13.67026424407959, 13.670271873474121, 13.67027473449707, 13.670246124267578, 13.670272827148438, 13.670265197753906, 13.670267105102539, 13.670269012451172, 13.670272827148438, 13.670269012451172, 13.670269012451172, 13.67025375366211, 13.670270919799805, 13.670270919799805, 13.670244216918945, 13.670272827148438, 13.670265197753906, 13.6702299118042, 13.670259475708008, 13.67026138305664, 13.670272827148438, 13.670263290405273, 13.670272827148438, 13.670110702514648, 13.670269966125488, 13.670273780822754, 13.670267105102539, 13.670269012451172, 13.670265197753906, 13.670270919799805, 13.670269966125488, 13.670234680175781, 13.670272827148438, 13.670269012451172, 13.670273780822754, 13.670271873474121, 13.670259475708008, 13.670265197753906, 13.670273780822754, 13.670269012451172, 13.67026138305664, 13.670272827148438, 13.670273780822754, 13.670269012451172, 13.670272827148438, 13.67027473449707, 13.670270919799805, 13.670270919799805, 13.670272827148438, 13.670269966125488, 13.670186996459961, 13.670273780822754, 13.670271873474121, 13.670267105102539]
Actual: [tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64)]
MSE: 160.6851801434157
Predicted: [12.3190336227417, 12.3190336227417, 12.319025993347168, 12.3190336227417, 12.319025993347168, 12.318928718566895, 12.3190336227417, 12.319036483764648, 12.319032669067383, 12.319018363952637, 12.319034576416016, 12.319032669067383, 12.319034576416016, 12.31903076171875, 12.319032669067383, 12.31902027130127, 12.319031715393066, 12.319028854370117, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.319028854370117, 12.3190336227417, 12.319029808044434, 12.319022178649902, 12.319021224975586, 12.31902027130127, 12.319012641906738, 12.3190336227417, 12.319031715393066, 12.319028854370117, 12.319032669067383, 12.319025993347168, 12.3190336227417, 12.319032669067383, 12.319031715393066, 12.319031715393066, 12.319031715393066, 12.3190336227417, 12.318976402282715, 12.319005012512207, 12.319032669067383, 12.319031715393066, 12.3190336227417, 12.319035530090332, 12.319034576416016, 12.319034576416016, 12.3190279006958, 12.319005012512207, 12.319025993347168, 12.319022178649902, 12.3190336227417, 12.319035530090332, 12.319031715393066, 12.319025993347168, 12.319032669067383, 12.3190279006958, 12.319034576416016, 12.319026947021484, 12.319032669067383, 12.3190336227417, 12.3190336227417, 12.319035530090332, 12.319034576416016, 12.319035530090332, 12.3190336227417, 12.3190336227417, 12.3190279006958, 12.319012641906738, 12.319034576416016, 12.319028854370117, 12.3190336227417, 12.3190336227417, 12.3190279006958, 12.319001197814941, 12.3190336227417, 12.319029808044434, 12.3190279006958, 12.319031715393066, 12.319034576416016, 12.3190336227417, 12.3190336227417, 12.319024085998535, 12.319035530090332, 12.319032669067383, 12.3190336227417, 12.319031715393066, 12.318962097167969, 12.3190336227417, 12.319029808044434, 12.319018363952637, 12.319031715393066, 12.31902027130127, 12.319024085998535, 12.3190336227417, 12.319031715393066, 12.319034576416016, 12.319002151489258, 12.3190336227417, 12.319034576416016, 12.319024085998535, 12.319029808044434, 12.319032669067383, 12.3190336227417, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.319025039672852, 12.319034576416016, 12.319026947021484, 12.319031715393066, 12.319029808044434, 12.3190336227417, 12.319035530090332, 12.3190279006958, 12.3190336227417, 12.319035530090332, 12.319031715393066, 12.319029808044434, 12.319031715393066, 12.319031715393066, 12.31903076171875, 12.319029808044434, 12.319034576416016, 12.31893253326416, 12.31899356842041, 12.3190336227417, 12.319035530090332, 12.319025039672852, 12.3190336227417, 12.319032669067383, 12.319035530090332, 12.3190336227417, 12.3190336227417, 12.319016456604004, 12.319035530090332, 12.319025993347168, 12.3190336227417, 12.319024085998535, 12.319026947021484, 12.319032669067383, 12.319035530090332, 12.319032669067383, 12.3190336227417, 12.318984031677246, 12.3190336227417, 12.319003105163574, 12.319029808044434, 12.3190336227417, 12.3190279006958, 12.319029808044434, 12.3190336227417, 12.319035530090332, 12.318963050842285, 12.319031715393066, 12.319035530090332, 12.3190336227417, 12.319034576416016, 12.3190279006958, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.319035530090332, 12.319031715393066, 12.319008827209473, 12.3190336227417, 12.3190336227417, 12.319034576416016, 12.3190279006958, 12.319031715393066, 12.3190336227417, 12.3190279006958, 12.319034576416016, 12.319025993347168, 12.319034576416016, 12.319031715393066, 12.3190279006958, 12.3190336227417, 12.319035530090332, 12.319014549255371, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.319022178649902, 12.319035530090332, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.319029808044434, 12.319031715393066, 12.319025993347168, 12.319032669067383, 12.318922996520996, 12.319035530090332, 12.3190279006958, 12.3190336227417, 12.319035530090332, 12.31902027130127, 12.319029808044434, 12.319031715393066, 12.319031715393066, 12.319032669067383, 12.319032669067383, 12.3190336227417, 12.319010734558105, 12.319034576416016, 12.319034576416016, 12.319034576416016, 12.3190336227417, 12.3190336227417, 12.319034576416016, 12.3190336227417, 12.319031715393066, 12.319031715393066, 12.319034576416016, 12.318937301635742, 12.31899356842041, 12.319029808044434, 12.319029808044434, 12.319029808044434, 12.319032669067383, 12.319035530090332, 12.319025993347168, 12.3190336227417, 12.318928718566895, 12.319029808044434, 12.319029808044434, 12.319028854370117, 12.319029808044434, 12.319023132324219, 12.319029808044434, 12.319035530090332, 12.3190336227417, 12.319029808044434, 12.3190336227417, 12.319029808044434, 12.319035530090332, 12.31903076171875, 12.319018363952637, 12.319035530090332, 12.319034576416016, 12.319034576416016, 12.3190336227417, 12.3190279006958, 12.3190336227417, 12.319034576416016, 12.319035530090332, 12.319031715393066, 12.319031715393066, 12.31902027130127, 12.319031715393066, 12.319031715393066, 12.319031715393066, 12.3190336227417, 12.319028854370117, 12.3190336227417, 12.319031715393066, 12.319035530090332, 12.319031715393066, 12.319029808044434, 12.319026947021484, 12.319031715393066, 12.318987846374512, 12.31902027130127, 12.3190279006958, 12.318963050842285, 12.319026947021484, 12.3190336227417, 12.319035530090332, 12.319035530090332, 12.319032669067383, 12.3190336227417, 12.319032669067383, 12.319034576416016, 12.31902027130127, 12.3190336227417, 12.3190336227417, 12.319031715393066, 12.319025039672852, 12.3190336227417, 12.3190336227417, 12.319009780883789, 12.318985939025879, 12.319032669067383, 12.319031715393066, 12.319035530090332, 12.3190336227417, 12.319034576416016, 12.319028854370117, 12.318924903869629, 12.3190336227417, 12.319031715393066, 12.3190279006958, 12.319034576416016, 12.3190336227417, 12.319029808044434, 12.31902027130127, 12.3190336227417, 12.319025993347168, 12.3190336227417, 12.319016456604004, 12.3190336227417, 12.319032669067383, 12.3190336227417, 12.319025993347168, 12.3190336227417, 12.319024085998535, 12.319031715393066, 12.318999290466309, 12.319032669067383, 12.319022178649902, 12.319005012512207, 12.3190336227417, 12.3190336227417, 12.319034576416016, 12.3190336227417, 12.318917274475098, 12.319022178649902, 12.3190336227417, 12.3190279006958, 12.3190336227417, 12.319031715393066, 12.319028854370117, 12.319031715393066, 12.318913459777832, 12.319034576416016, 12.319034576416016, 12.319029808044434, 12.319032669067383, 12.3190336227417, 12.3190336227417, 12.319034576416016, 12.319029808044434, 12.319026947021484, 12.3190336227417, 12.319034576416016, 12.319035530090332, 12.319015502929688, 12.3190336227417, 12.3190336227417, 12.319032669067383, 12.319031715393066, 12.3190336227417, 12.319025993347168, 12.319034576416016, 12.3190336227417, 12.3190279006958, 12.319034576416016, 12.319008827209473, 12.319029808044434, 12.319034576416016, 12.319035530090332, 12.319032669067383, 12.319029808044434, 12.3190336227417, 12.319034576416016, 12.319032669067383, 12.31902027130127, 12.319029808044434, 12.3190336227417, 12.319018363952637, 12.318940162658691, 12.319022178649902, 12.319029808044434, 12.319029808044434, 12.31903076171875, 12.319035530090332, 12.319035530090332, 12.3190279006958, 12.319035530090332, 12.319026947021484, 12.319031715393066, 12.3190336227417, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.319034576416016, 12.3190336227417, 12.319032669067383, 12.319031715393066, 12.319001197814941, 12.3190336227417, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.319035530090332, 12.319034576416016, 12.319035530090332, 12.3190336227417, 12.3190336227417, 12.319901466369629, 12.319031715393066, 12.319035530090332, 12.319034576416016, 12.319025993347168, 12.3190336227417, 12.319031715393066, 12.319034576416016, 12.3190336227417, 12.3190336227417, 12.319034576416016, 12.319031715393066, 12.3190336227417, 12.319034576416016, 12.3190279006958, 12.319028854370117, 12.3190336227417, 12.319025993347168, 12.319032669067383, 12.319023132324219, 12.319021224975586, 12.319034576416016, 12.319034576416016, 12.319031715393066, 12.319032669067383, 12.319029808044434, 12.3190336227417, 12.319035530090332, 12.319025039672852, 12.319034576416016, 12.319035530090332, 12.319031715393066, 12.3190336227417, 12.319011688232422, 12.319031715393066, 12.319031715393066, 12.3190336227417, 12.319025993347168, 12.3190336227417, 12.3190336227417, 12.319016456604004, 12.319032669067383, 12.319029808044434, 12.319031715393066, 12.319032669067383, 12.319031715393066, 12.319031715393066, 12.3190336227417, 12.319034576416016, 12.319008827209473, 12.319025993347168, 12.319024085998535, 12.31903076171875, 12.319031715393066, 12.319035530090332, 12.319025039672852, 12.3190336227417, 12.31903076171875, 12.319032669067383, 12.319028854370117, 12.319031715393066, 12.3190336227417, 12.319031715393066, 12.319025039672852, 12.3190336227417, 12.319029808044434, 12.319032669067383, 12.318928718566895, 12.319031715393066, 12.319029808044434, 12.319034576416016, 12.3190279006958, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.3190279006958, 12.319032669067383, 12.3190279006958, 12.3190336227417, 12.319031715393066, 12.319000244140625, 12.3190336227417, 12.319031715393066, 12.319025993347168, 12.318934440612793, 12.319031715393066, 12.3190336227417, 12.319035530090332, 12.31899642944336, 12.3190336227417, 12.318978309631348, 12.319025993347168, 12.319025039672852, 12.319031715393066, 12.3190336227417, 12.3190336227417, 12.319018363952637, 12.319032669067383, 12.319034576416016, 12.3190336227417, 12.319036483764648, 12.319035530090332, 12.3190336227417, 12.319031715393066, 12.319031715393066, 12.319032669067383]
Actual: [tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([52.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5708.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1850.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 71753.49946047807
Predicted: [13.400339126586914, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400357246398926, 13.400338172912598, 13.400341987609863, 13.400343894958496, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400343894958496, 13.400341987609863, 13.40034008026123, 13.400341987609863, 13.400341987609863, 13.40034294128418, 13.400341987609863, 13.400341987609863, 13.400345802307129, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400347709655762, 13.400339126586914, 13.400339126586914, 13.400343894958496, 13.400339126586914, 13.400341987609863, 13.400338172912598, 13.400339126586914, 13.400344848632812, 13.40034008026123, 13.400344848632812, 13.400341033935547, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400379180908203, 13.400341987609863, 13.400341033935547, 13.400339126586914, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400444984436035, 13.40034008026123, 13.400338172912598, 13.400341987609863, 13.400338172912598, 13.400344848632812, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.400351524353027, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400341987609863, 13.400343894958496, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.400399208068848, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400341033935547, 13.400339126586914, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400362968444824, 13.400338172912598, 13.40034008026123, 13.400343894958496, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.40109634399414, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.400341987609863, 13.400339126586914, 13.40034008026123, 13.400351524353027, 13.40034008026123, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400343894958496, 13.400341033935547, 13.40034008026123, 13.400343894958496, 13.40034294128418, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.400341987609863, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400343894958496, 13.40034008026123, 13.400343894958496, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.400341987609863, 13.400341987609863, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400341033935547, 13.400339126586914, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.400364875793457, 13.40034008026123, 13.400339126586914, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.400350570678711, 13.40034008026123, 13.400338172912598, 13.400338172912598, 13.400341987609863, 13.400338172912598, 13.40034008026123, 13.400352478027344, 13.400338172912598, 13.40034008026123, 13.400341033935547, 13.40034008026123, 13.40034294128418, 13.400341987609863, 13.400345802307129, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400344848632812, 13.400360107421875, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400338172912598, 13.400344848632812, 13.40034008026123, 13.400341987609863, 13.400338172912598, 13.400339126586914, 13.40034008026123, 13.400343894958496, 13.400341987609863, 13.40034008026123, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400338172912598, 13.400344848632812, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400341987609863, 13.400339126586914, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.40034294128418, 13.400339126586914, 13.40034008026123, 13.400341987609863, 13.400343894958496, 13.400341033935547, 13.400341987609863, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400341033935547, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400341987609863, 13.400338172912598, 13.40034008026123, 13.400345802307129, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.400343894958496, 13.40034008026123, 13.400341033935547, 13.400372505187988, 13.400341987609863, 13.400341987609863, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.400341987609863, 13.400338172912598, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400346755981445, 13.40034008026123, 13.400341987609863, 13.40034008026123, 13.400338172912598, 13.400352478027344, 13.400341987609863, 13.400338172912598, 13.400338172912598, 13.400338172912598, 13.400382995605469, 13.400341033935547, 13.400338172912598, 13.400339126586914, 13.400338172912598, 13.400339126586914, 13.400338172912598, 13.400341987609863, 13.400355339050293, 13.400338172912598, 13.400341987609863, 13.400341987609863, 13.400338172912598, 13.400343894958496, 13.40034008026123, 13.400338172912598, 13.400344848632812, 13.400339126586914, 13.400341987609863, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400345802307129, 13.400338172912598, 13.401100158691406, 13.400346755981445, 13.400341987609863, 13.400338172912598, 13.40034008026123, 13.400344848632812, 13.400343894958496, 13.400429725646973, 13.400339126586914, 13.400339126586914, 13.400354385375977, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400347709655762, 13.40034008026123, 13.40034008026123, 13.400341987609863, 13.400338172912598, 13.400339126586914, 13.400341987609863, 13.400339126586914, 13.40034294128418, 13.40034008026123, 13.400338172912598, 13.400341033935547, 13.400338172912598, 13.40034008026123, 13.400341987609863, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.40036678314209, 13.400338172912598, 13.40034294128418, 13.400370597839355, 13.400339126586914, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400339126586914, 13.400350570678711, 13.40034008026123, 13.400344848632812, 13.400358200073242, 13.400343894958496, 13.400339126586914, 13.400341987609863, 13.400343894958496, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400343894958496, 13.400572776794434, 13.400339126586914, 13.400341987609863, 13.40034008026123, 13.400345802307129, 13.400339126586914, 13.40034008026123, 13.400341987609863, 13.400345802307129, 13.400343894958496, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400345802307129, 13.40034008026123, 13.400341033935547, 13.400396347045898, 13.400345802307129, 13.40034008026123, 13.40034008026123, 13.40034294128418, 13.40034008026123, 13.400339126586914, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.40034294128418, 13.400338172912598, 13.400357246398926, 13.400339126586914, 13.400346755981445, 13.400339126586914, 13.400338172912598, 13.400347709655762, 13.400355339050293, 13.400338172912598, 13.400341987609863, 13.40034294128418, 13.400339126586914, 13.40034294128418, 13.400339126586914, 13.400338172912598, 13.400352478027344, 13.400382041931152, 13.400341987609863, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.40034294128418, 13.40034008026123, 13.400345802307129, 13.400338172912598, 13.402344703674316, 13.400339126586914, 13.40034294128418, 13.40034008026123, 13.400345802307129, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400341987609863, 13.40034008026123, 13.400343894958496, 13.40034008026123, 13.400420188903809, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.40035343170166, 13.40034008026123, 13.400339126586914, 13.400339126586914, 13.400341033935547, 13.400339126586914, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.400341987609863, 13.400341987609863, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.400406837463379, 13.400339126586914, 13.400343894958496, 13.400341033935547, 13.400339126586914, 13.400350570678711, 13.400339126586914, 13.40034294128418, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400345802307129, 13.40034008026123, 13.400389671325684, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400341987609863, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.400341987609863, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.400345802307129, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400341033935547]
Actual: [tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([175.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([196.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([322.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([330.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([418.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 974.9374534843448
Predicted: [12.687320709228516, 12.6873197555542, 12.68732738494873, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687383651733398, 12.6873197555542, 12.687325477600098, 12.687397956848145, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687325477600098, 12.687333106994629, 12.687334060668945, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687320709228516, 12.687329292297363, 12.687324523925781, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687324523925781, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687338829040527, 12.687321662902832, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.68737506866455, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687342643737793, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687325477600098, 12.687321662902832, 12.687322616577148, 12.687321662902832, 12.6873197555542, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.68732738494873, 12.6873197555542, 12.68736743927002, 12.687323570251465, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.687320709228516, 12.687320709228516, 12.687335014343262, 12.687321662902832, 12.6873197555542, 12.687326431274414, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.687321662902832, 12.687325477600098, 12.687321662902832, 12.6873197555542, 12.687324523925781, 12.687320709228516, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687321662902832, 12.687323570251465, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.687322616577148, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.687323570251465, 12.687424659729004, 12.687321662902832, 12.687320709228516, 12.687323570251465, 12.6873197555542, 12.687324523925781, 12.687320709228516, 12.687394142150879, 12.68732738494873, 12.6873197555542, 12.687320709228516, 12.687322616577148, 12.687335014343262, 12.6873197555542, 12.687320709228516, 12.687322616577148, 12.6873197555542, 12.687320709228516, 12.687322616577148, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687329292297363, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.687321662902832, 12.687381744384766, 12.687331199645996, 12.687322616577148, 12.687320709228516, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.687325477600098, 12.687325477600098, 12.687321662902832, 12.687335014343262, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.6873197555542, 12.68736457824707, 12.687322616577148, 12.687320709228516, 12.6873197555542, 12.687323570251465, 12.687321662902832, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.687321662902832, 12.687323570251465, 12.6873197555542, 12.687323570251465, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.687322616577148, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.687323570251465, 12.687320709228516, 12.687321662902832, 12.687320709228516, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.68732738494873, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687325477600098, 12.687320709228516, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687320709228516, 12.687325477600098, 12.687321662902832, 12.687325477600098, 12.6873197555542, 12.6873197555542, 12.687332153320312, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687329292297363, 12.6873197555542, 12.687321662902832, 12.687320709228516, 12.687321662902832, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.688106536865234, 12.687320709228516, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687323570251465, 12.687332153320312, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.687323570251465, 12.6873197555542, 12.687408447265625, 12.6873197555542, 12.687325477600098, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.68733024597168, 12.687321662902832, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.687321662902832, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.687321662902832, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.687321662902832, 12.687331199645996, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687418937683105, 12.68738842010498, 12.687344551086426, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.687320709228516, 12.687329292297363, 12.687320709228516, 12.687321662902832, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687325477600098, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687333106994629, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.68732738494873, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.687322616577148, 12.687344551086426, 12.687333106994629, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687333106994629, 12.6873197555542, 12.687323570251465, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.687320709228516, 12.687321662902832, 12.687323570251465, 12.687325477600098, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687324523925781, 12.687322616577148, 12.6873197555542, 12.687320709228516, 12.687322616577148, 12.6873197555542, 12.687346458435059, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687326431274414, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687331199645996, 12.687322616577148, 12.687332153320312, 12.687321662902832, 12.687325477600098, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.687331199645996, 12.687321662902832, 12.687323570251465, 12.6873779296875, 12.6873197555542, 12.687355995178223, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.687321662902832, 12.687320709228516, 12.687321662902832, 12.68732738494873, 12.6873197555542, 12.687325477600098, 12.687323570251465, 12.6873197555542, 12.687321662902832, 12.687324523925781, 12.687427520751953, 12.687321662902832, 12.687334060668945, 12.68732738494873, 12.687320709228516, 12.687322616577148, 12.687335968017578, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687321662902832]
Actual: [tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2588.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2720.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([98.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([231.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5518.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2160.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([141.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 98037.04758045218
Predicted: [13.611161231994629, 13.611161231994629, 13.611157417297363, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611159324645996, 13.611161231994629, 13.611161231994629, 13.611159324645996, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611156463623047, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611152648925781, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611157417297363, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611159324645996, 13.611160278320312, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.61115837097168, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611159324645996, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.61115837097168, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611157417297363, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611159324645996, 13.611161231994629, 13.611159324645996, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611159324645996, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611156463623047, 13.611159324645996, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611159324645996, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312]
Actual: [tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([126.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3698.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([190.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([60.], dtype=torch.float64), tensor([157.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([78.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([695.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 28368.289566966883
Predicted: [14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.22281551361084, 14.222829818725586, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.22281551361084, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.222816467285156, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222826957702637, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222816467285156, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222827911376953, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222824096679688, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.224641799926758, 14.222814559936523, 14.222922325134277, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222816467285156, 14.222814559936523, 14.22302532196045, 14.222814559936523, 14.22281551361084, 14.222822189331055, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222819328308105, 14.22281551361084, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222816467285156, 14.222816467285156, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222817420959473, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22282600402832, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222830772399902, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22294807434082, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.223148345947266, 14.222814559936523, 14.222941398620605, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222819328308105, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222825050354004, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222816467285156, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222823143005371, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22282886505127, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222820281982422, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222817420959473, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.22281551361084, 14.22281551361084, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222816467285156, 14.222816467285156, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.223030090332031, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.22281551361084, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222817420959473, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222820281982422, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22282600402832, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222817420959473, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222817420959473, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222823143005371, 14.222814559936523, 14.222814559936523]
Actual: [tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([391.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([183.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([45.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 499.8648543182052
Predicted: [15.172572135925293, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.172572135925293, 15.172615051269531, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172569274902344, 15.172572135925293, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257022857666, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172569274902344, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172572135925293, 15.172571182250977, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.172571182250977, 15.172587394714355, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257022857666, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.17257022857666, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172578811645508, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172574043273926, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.172572135925293, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172574043273926, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172569274902344, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172572135925293]
Actual: [tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([63.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([120.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([324.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64)]
MSE: 418.447382774389
