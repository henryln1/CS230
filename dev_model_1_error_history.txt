Predicted: [1.2020262479782104, 1.202042818069458, 1.2020639181137085, 1.2020286321640015, 1.2020217180252075, 1.202079176902771, 1.2020373344421387, 1.2020602226257324, 1.2020267248153687, 1.2020263671875, 1.2020858526229858, 1.2020314931869507, 1.2020193338394165, 1.2020363807678223, 1.2020543813705444, 1.202017903327942, 1.2020217180252075, 1.2020548582077026, 1.2021714448928833, 1.2020254135131836, 1.2020190954208374, 1.202073335647583, 1.2020286321640015, 1.202027440071106, 1.202031135559082, 1.2020422220230103, 1.2020398378372192, 1.2020283937454224, 1.2020505666732788, 1.2020235061645508, 1.2020267248153687, 1.20204758644104, 1.2020341157913208, 1.2020338773727417, 1.2020355463027954, 1.2020238637924194, 1.2020288705825806, 1.2020244598388672, 1.202025055885315, 1.2020310163497925, 1.202020525932312, 1.2020255327224731, 1.2020453214645386, 1.2021881341934204, 1.2020272016525269, 1.202252984046936, 1.2020363807678223, 1.2020643949508667, 1.2020273208618164, 1.2020436525344849, 1.2020564079284668, 1.2020221948623657, 1.2020431756973267, 1.2021578550338745, 1.2020364999771118, 1.202033519744873, 1.202022910118103, 1.2020331621170044, 1.2020183801651, 1.2020214796066284, 1.2020353078842163, 1.2020224332809448, 1.2020318508148193, 1.2020225524902344, 1.2020267248153687, 1.202024221420288, 1.2020174264907837, 1.2020257711410522, 1.202062726020813, 1.2020596265792847, 1.2020621299743652, 1.202022910118103, 1.202038049697876, 1.202020525932312, 1.2020370960235596, 1.2020262479782104, 1.2021772861480713, 1.2020522356033325, 1.202030062675476, 1.202022671699524, 1.2020303010940552, 1.2020312547683716, 1.2020636796951294, 1.2020254135131836, 1.2020258903503418, 1.202047348022461, 1.2020317316055298, 1.202027440071106, 1.2022302150726318, 1.2020940780639648, 1.2020307779312134, 1.2020246982574463, 1.2020238637924194, 1.2020343542099, 1.2020288705825806, 1.2020385265350342, 1.2020461559295654, 1.2020262479782104, 1.2020827531814575, 1.2020293474197388, 1.202029824256897, 1.2020454406738281, 1.2020331621170044, 1.2020814418792725, 1.2020272016525269, 1.2020238637924194, 1.2020505666732788, 1.2028948068618774, 1.202020525932312, 1.2020310163497925, 1.2020436525344849, 1.2020313739776611, 1.2020232677459717, 1.202039122581482, 1.2020264863967896, 1.202032208442688, 1.2020291090011597, 1.2020176649093628, 1.2020263671875, 1.2020213603973389, 1.2020262479782104, 1.2020238637924194, 1.2020237445831299, 1.202026605606079, 1.2020310163497925, 1.2020254135131836, 1.202038049697876, 1.202029824256897, 1.2020293474197388, 1.2020305395126343, 1.202270269393921, 1.2020292282104492, 1.2020407915115356, 1.202025055885315, 1.2021759748458862, 1.2020272016525269, 1.2020336389541626, 1.2020249366760254, 1.2020210027694702, 1.2020331621170044, 1.202020525932312, 1.2020231485366821, 1.2022143602371216, 1.2020361423492432, 1.202417254447937, 1.2020273208618164, 1.2020357847213745, 1.2020248174667358, 1.2020200490951538, 1.2020338773727417, 1.2027467489242554, 1.2020295858383179, 1.202022671699524, 1.2020249366760254, 1.2020407915115356, 1.2020246982574463, 1.2020351886749268, 1.2020174264907837, 1.2020195722579956, 1.2020245790481567, 1.2020405530929565, 1.2020310163497925, 1.2020254135131836, 1.2020195722579956, 1.2020269632339478, 1.2021867036819458, 1.2020235061645508, 1.2020221948623657, 1.2020386457443237, 1.202020287513733, 1.202022671699524, 1.2020272016525269, 1.2020282745361328, 1.2020224332809448, 1.2020258903503418, 1.2020431756973267, 1.202027440071106, 1.2020244598388672, 1.202020287513733, 1.2020193338394165, 1.2020680904388428, 1.2020450830459595, 1.2020231485366821, 1.202022671699524, 1.2020303010940552, 1.2020246982574463, 1.2020353078842163, 1.202020287513733, 1.2020444869995117, 1.202029824256897, 1.2020477056503296, 1.2020646333694458, 1.2020670175552368, 1.202039122581482, 1.202023983001709, 1.2020400762557983, 1.2020267248153687, 1.202046275138855, 1.2020548582077026, 1.2020398378372192, 1.202022671699524, 1.2020775079727173, 1.202032208442688, 1.2022582292556763, 1.202018141746521, 1.2020655870437622, 1.2020301818847656, 1.2020224332809448, 1.2020171880722046, 1.20244562625885, 1.2020374536514282, 1.20207941532135, 1.2020331621170044, 1.202053189277649, 1.2020682096481323, 1.2020210027694702, 1.2020307779312134, 1.2020331621170044, 1.2020267248153687, 1.2020224332809448, 1.2020310163497925, 1.2020258903503418, 1.2020212411880493, 1.2020227909088135, 1.2020572423934937, 1.2020610570907593, 1.2020689249038696, 1.202023983001709, 1.2021023035049438, 1.2020310163497925, 1.2020255327224731, 1.2020343542099, 1.202022910118103, 1.202027678489685, 1.2020219564437866, 1.2020241022109985, 1.20204758644104, 1.2020587921142578, 1.2020291090011597, 1.202023983001709, 1.2020219564437866, 1.2020272016525269, 1.2021337747573853, 1.2020363807678223, 1.2020639181137085, 1.2020370960235596, 1.2020224332809448, 1.202041745185852, 1.202035665512085, 1.2074943780899048, 1.2020219564437866, 1.2020378112792969, 1.202026605606079, 1.2020295858383179, 1.2020319700241089, 1.2025315761566162, 1.202027678489685, 1.202026605606079, 1.2020254135131836, 1.2083884477615356, 1.2020258903503418, 1.2020331621170044, 1.202079176902771, 1.2020925283432007, 1.2020212411880493, 1.20204758644104, 1.2020670175552368, 1.2020231485366821, 1.2023745775222778, 1.202022671699524, 1.2020490169525146, 1.2020255327224731, 1.2020251750946045, 1.2020195722579956, 1.2021722793579102, 1.2020944356918335, 1.2020314931869507, 1.2020248174667358, 1.2020231485366821, 1.2020238637924194, 1.2020419836044312, 1.2020256519317627, 1.2020186185836792, 1.2020254135131836, 1.202062726020813, 1.2020249366760254, 1.2020305395126343, 1.2020363807678223, 1.2020190954208374, 1.2020244598388672, 1.2020790576934814, 1.2020350694656372, 1.2020291090011597, 1.202402949333191, 1.2020312547683716, 1.2020251750946045, 1.2020806074142456, 1.2020368576049805, 1.2026749849319458, 1.2020357847213745, 1.2020505666732788, 1.2020269632339478, 1.2020796537399292, 1.2020742893218994, 1.2020207643508911, 1.202030062675476, 1.2020200490951538, 1.2020227909088135, 1.2020498514175415, 1.2020207643508911, 1.2020269632339478, 1.2020334005355835, 1.2020230293273926, 1.2020249366760254, 1.2020272016525269, 1.202027440071106, 1.2020264863967896, 1.2020634412765503, 1.2020317316055298, 1.202019214630127, 1.2020214796066284, 1.2020200490951538, 1.202041745185852, 1.2020426988601685, 1.2020260095596313, 1.202088475227356, 1.2020527124404907, 1.2020217180252075, 1.2020363807678223, 1.2020349502563477, 1.2020407915115356, 1.2020293474197388, 1.2020368576049805, 1.2020460367202759, 1.2020236253738403, 1.2020237445831299, 1.202034831047058, 1.2020190954208374, 1.2020453214645386, 1.2020232677459717, 1.2020212411880493, 1.2020503282546997, 1.2020310163497925, 1.2021034955978394, 1.2020339965820312, 1.2020748853683472, 1.2020233869552612, 1.2020624876022339, 1.202035903930664, 1.2020200490951538, 1.2020280361175537, 1.202035903930664, 1.202027440071106, 1.2020457983016968, 1.2020220756530762, 1.202034831047058, 1.2020269632339478, 1.2020224332809448, 1.2020196914672852, 1.2020233869552612, 1.2020214796066284, 1.2021355628967285, 1.2020288705825806, 1.2020515203475952, 1.2020224332809448, 1.2020245790481567, 1.2020200490951538, 1.202027678489685, 1.2020326852798462, 1.202029824256897, 1.2020256519317627, 1.202027678489685, 1.2020392417907715, 1.2020395994186401, 1.2020224332809448, 1.2020279169082642, 1.2020492553710938, 1.202032208442688, 1.202025294303894, 1.2020775079727173, 1.2021557092666626, 1.2020677328109741, 1.2020245790481567, 1.2020221948623657, 1.2021104097366333, 1.2020286321640015, 1.2020236253738403, 1.2020213603973389, 1.2020598649978638, 1.2020217180252075, 1.2020395994186401, 1.202020287513733, 1.2020258903503418, 1.2021043300628662, 1.202032446861267, 1.2020283937454224, 1.2020398378372192, 1.2021260261535645, 1.2025128602981567, 1.2020217180252075, 1.2020243406295776, 1.2020230293273926, 1.2020492553710938, 1.202032208442688, 1.2020244598388672, 1.2033101320266724, 1.2020293474197388, 1.2020349502563477, 1.2020195722579956, 1.2020246982574463, 1.2084296941757202, 1.2020251750946045, 1.2020286321640015, 1.202028751373291, 1.2021561861038208, 1.202142357826233, 1.202023983001709, 1.2020245790481567, 1.2020434141159058, 1.2020349502563477, 1.2020434141159058, 1.2020262479782104, 1.202054738998413, 1.2020655870437622, 1.202025294303894, 1.2020207643508911, 1.2020341157913208, 1.202033519744873, 1.202070951461792, 1.202030062675476, 1.2020310163497925, 1.2020207643508911, 1.2020248174667358, 1.2021077871322632, 1.2020244598388672, 1.2020361423492432, 1.2020244598388672, 1.2020317316055298, 1.202053189277649, 1.2020336389541626, 1.2020611763000488, 1.202027440071106, 1.2020195722579956, 1.2020338773727417, 1.2020350694656372, 1.202021598815918, 1.202043890953064, 1.203004002571106, 1.202044129371643, 1.2020536661148071, 1.2020305395126343, 1.202022671699524, 1.2020174264907837, 1.202028751373291, 1.2020366191864014, 1.2020248174667358, 1.2020270824432373, 1.2020471096038818, 1.202027678489685, 1.2020713090896606, 1.2020264863967896, 1.2021061182022095, 1.2020258903503418, 1.2020233869552612, 1.2020305395126343, 1.2020429372787476, 1.2020262479782104, 1.202025294303894, 1.2024508714675903, 1.2020522356033325, 1.2020343542099, 1.2020291090011597, 1.2021044492721558, 1.2020231485366821, 1.2020257711410522, 1.2020260095596313, 1.2020844221115112, 1.2020503282546997, 1.2020272016525269, 1.2020376920700073, 1.202027678489685, 1.2020277976989746, 1.2020366191864014, 1.2020288705825806, 1.2020314931869507, 1.202028512954712, 1.2021822929382324, 1.2020217180252075, 1.2020341157913208, 1.202026605606079, 1.202028751373291, 1.2020326852798462, 1.202022910118103, 1.2020517587661743, 1.202034831047058, 1.2021492719650269, 1.202022671699524, 1.202103853225708, 1.202024221420288, 1.202027678489685]
Actual: [tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([65.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10703.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([59.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([113.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([93.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 229137.8514264293
Predicted: [4.58310079574585, 4.583099842071533, 4.583101272583008, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583101749420166, 4.583101749420166, 4.583099842071533, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583100318908691, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.583101749420166, 4.583099842071533, 4.583100318908691, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583100318908691, 4.583098888397217, 4.583100318908691, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.583101749420166, 4.583103656768799, 4.58310079574585, 4.583099842071533, 4.583099365234375, 4.583101749420166, 4.583103656768799, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.583102703094482, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583098411560059, 4.583099842071533, 4.583052635192871, 4.58310079574585, 4.583101749420166, 4.583099842071533, 4.583101749420166, 4.58310079574585, 4.583100318908691, 4.583099365234375, 4.583101749420166, 4.583099365234375, 4.583099842071533, 4.583101749420166, 4.583100318908691, 4.583099365234375, 4.583101749420166, 4.583101749420166, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583096981048584, 4.58310079574585, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583098888397217, 4.583101749420166, 4.583100318908691, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.5830979347229, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583099365234375, 4.583099365234375, 4.58310079574585, 4.583096027374268, 4.58310079574585, 4.583101272583008, 4.583101749420166, 4.58310079574585, 4.583100318908691, 4.583103656768799, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583101272583008, 4.583100318908691, 4.583101272583008, 4.583101749420166, 4.583098888397217, 4.583100318908691, 4.58310079574585, 4.583101272583008, 4.583101749420166, 4.583100318908691, 4.583099842071533, 4.583101749420166, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583099842071533, 4.583100318908691, 4.58310079574585, 4.583099842071533, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.583099842071533, 4.58310079574585, 4.583098888397217, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583099842071533, 4.583099365234375, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.583098888397217, 4.583099842071533, 4.583099842071533, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583101749420166, 4.583099842071533, 4.583101749420166, 4.583100318908691, 4.58310079574585, 4.583099365234375, 4.583099365234375, 4.58310079574585, 4.583099842071533, 4.583099842071533, 4.583099842071533, 4.583102703094482, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.583099842071533, 4.58310079574585, 4.583098888397217, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.583100318908691, 4.58301305770874, 4.583099365234375, 4.583101749420166, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.583098888397217, 4.583100318908691, 4.583099365234375, 4.583101749420166, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583099365234375, 4.583099842071533, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583101749420166, 4.583100318908691, 4.58310079574585, 4.583099842071533, 4.583100318908691, 4.583101749420166, 4.583100318908691, 4.58310079574585, 4.583101749420166, 4.583099842071533, 4.583101749420166, 4.583101749420166, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583099365234375, 4.583099365234375, 4.583100318908691, 4.583101749420166, 4.583100318908691, 4.583099842071533, 4.583098888397217, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583100318908691, 4.583099365234375, 4.583099365234375, 4.58310079574585, 4.58310079574585, 4.583103656768799, 4.583100318908691, 4.58310079574585, 4.583098888397217, 4.583100318908691, 4.583101749420166, 4.583101749420166, 4.583099842071533, 4.583103656768799, 4.583100318908691, 4.583099842071533, 4.583103656768799, 4.583099842071533, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.583099842071533, 4.583100318908691, 4.583099365234375, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.583102703094482, 4.583100318908691, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583082675933838, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.583099365234375, 4.583100318908691, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583101272583008, 4.583100318908691, 4.583068370819092, 4.583099365234375, 4.583099842071533, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.583100318908691, 4.583100318908691, 4.583096981048584, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.583101749420166, 4.583101749420166, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583101272583008, 4.583100318908691, 4.583101749420166, 4.583099842071533, 4.583101749420166, 4.583099842071533, 4.58310079574585, 4.583099365234375, 4.583099365234375, 4.583099842071533, 4.583099842071533, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583101749420166, 4.583098888397217, 4.583100318908691, 4.583006381988525, 4.583094120025635, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.583100318908691, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583048343658447, 4.583101749420166, 4.58310079574585, 4.583099365234375, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.583099842071533, 4.583099842071533, 4.58310079574585, 4.583101749420166, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.583100318908691, 4.583099365234375, 4.583099365234375, 4.583099365234375, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.583100318908691, 4.583099365234375, 4.583102703094482, 4.583101749420166, 4.5830817222595215, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583101749420166, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583104610443115, 4.583095073699951, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.583096027374268, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583098888397217, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583101749420166, 4.583099365234375, 4.583099842071533, 4.583099842071533, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.583098888397217, 4.583100318908691, 4.583098888397217, 4.583101749420166, 4.583100318908691, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583101749420166, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.583101749420166, 4.583099842071533, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583099365234375, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583099842071533, 4.583099842071533, 4.583098888397217, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583101272583008, 4.583101272583008, 4.583100318908691, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583099365234375, 4.583099842071533, 4.583100318908691, 4.583099842071533, 4.583099365234375, 4.583099842071533, 4.583099365234375, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.583101749420166, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.58310079574585]
Actual: [tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2764.], dtype=torch.float64), tensor([239.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1201.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1766.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([179.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([90.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 24508.33074376054
Predicted: [6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.627781391143799, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([829.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4106.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7661.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([180.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([876.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([225.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([499.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([217.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([69.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([31705.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2163998.3784434353
Predicted: [8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789]
Actual: [tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([448.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1525.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([999.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([591.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 7696.217576373276
Predicted: [9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188]
Actual: [tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([48.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([28097.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1577892.9538066334
Predicted: [9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219]
Actual: [tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([62.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([96.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([126.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([610.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([253.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 957.1265420654457
Predicted: [8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8925.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([77.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([978.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 160933.95931096416
Predicted: [10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8925.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([77.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([978.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10747.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([42681.], dtype=torch.float64)]
MSE: 4033006.1650901763
Predicted: [10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602]
Actual: [tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([94.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([356.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6302.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 79510.67320025049
Predicted: [9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3000.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([105.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([93.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([457.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([45.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 18387.914918486014
Predicted: [11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918]
Actual: [tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6907.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([80.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([372.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([92.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21340.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([87.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([278.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1214.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([220.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([281.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 1008583.4072368034
Predicted: [12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([217.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64)]
MSE: 200.43999987315863
Predicted: [12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719]
Actual: [tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([63.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([120.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([324.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2934.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1623.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 22617.523607548253
Predicted: [13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309]
Actual: [tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([157.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([696.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 1108.8774544134812
Predicted: [13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([49.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 158.974391279737
Predicted: [13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695]
Actual: [tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([117.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([71.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([206.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64)]
