Predicted: [1.2020528316497803, 1.2020319700241089, 1.2020375728607178, 1.2020204067230225, 1.2020184993743896, 1.2020319700241089, 1.2020354270935059, 1.2020246982574463, 1.2020295858383179, 1.2020217180252075, 1.2020260095596313, 1.2020219564437866, 1.2020289897918701, 1.202051043510437, 1.2020363807678223, 1.202027678489685, 1.202026128768921, 1.2020471096038818, 1.202032208442688, 1.202067255973816, 1.2020307779312134, 1.2020632028579712, 1.2020212411880493, 1.2020294666290283, 1.2020236253738403, 1.2020355463027954, 1.2020212411880493, 1.2020291090011597, 1.2020918130874634, 1.2020679712295532, 1.2020190954208374, 1.2020368576049805, 1.202035903930664, 1.2020481824874878, 1.2020256519317627, 1.2020232677459717, 1.2020419836044312, 1.2020363807678223, 1.2020483016967773, 1.2028390169143677, 1.202023983001709, 1.2020260095596313, 1.2020281553268433, 1.2020227909088135, 1.2021225690841675, 1.2020188570022583, 1.2020232677459717, 1.2020336389541626, 1.2020258903503418, 1.20204758644104, 1.202022910118103, 1.2020243406295776, 1.202022910118103, 1.202053427696228, 1.2020221948623657, 1.2020632028579712, 1.2020279169082642, 1.2020283937454224, 1.2020329236984253, 1.2021193504333496, 1.2020368576049805, 1.202024221420288, 1.2020283937454224, 1.2020336389541626, 1.2020303010940552, 1.2020283937454224, 1.2020193338394165, 1.2020336389541626, 1.202062726020813, 1.2020963430404663, 1.2020213603973389, 1.202025294303894, 1.2020771503448486, 1.202024221420288, 1.2020649909973145, 1.2020931243896484, 1.2020260095596313, 1.2020642757415771, 1.202032446861267, 1.202025055885315, 1.2020217180252075, 1.202022671699524, 1.202025294303894, 1.2020529508590698, 1.202022671699524, 1.2020249366760254, 1.2020233869552612, 1.2020514011383057, 1.2020264863967896, 1.2070765495300293, 1.2020584344863892, 1.2020262479782104, 1.2020231485366821, 1.2020329236984253, 1.2020351886749268, 1.202046275138855, 1.2020272016525269, 1.2020599842071533, 1.2020364999771118, 1.2020295858383179, 1.202030062675476, 1.2020809650421143, 1.2020530700683594, 1.2020219564437866, 1.202023983001709, 1.2020213603973389, 1.202026128768921, 1.2020212411880493, 1.2020186185836792, 1.2020249366760254, 1.2020471096038818, 1.202026605606079, 1.2020200490951538, 1.202022671699524, 1.202043890953064, 1.202025055885315, 1.2020388841629028, 1.202022671699524, 1.2020747661590576, 1.2020341157913208, 1.2020263671875, 1.2020384073257446, 1.2031898498535156, 1.2020511627197266, 1.2020366191864014, 1.20210599899292, 1.2020212411880493, 1.2020256519317627, 1.2020351886749268, 1.2020303010940552, 1.2020407915115356, 1.2020262479782104, 1.2020183801651, 1.2020219564437866, 1.2020363807678223, 1.2020200490951538, 1.202026128768921, 1.2020655870437622, 1.2020200490951538, 1.2020416259765625, 1.2020291090011597, 1.2020493745803833, 1.202026605606079, 1.202074408531189, 1.2020217180252075, 1.2020325660705566, 1.2020541429519653, 1.2020231485366821, 1.2020283937454224, 1.2020257711410522, 1.2020286321640015, 1.2020326852798462, 1.2020272016525269, 1.2020217180252075, 1.2026327848434448, 1.202032208442688, 1.2020325660705566, 1.2020294666290283, 1.2020319700241089, 1.2020246982574463, 1.2021113634109497, 1.2020728588104248, 1.2020286321640015, 1.2020235061645508, 1.2020747661590576, 1.2021123170852661, 1.202025294303894, 1.2020258903503418, 1.2020289897918701, 1.2020756006240845, 1.2020231485366821, 1.2020232677459717, 1.2020338773727417, 1.2020200490951538, 1.202028751373291, 1.2023066282272339, 1.2020230293273926, 1.2020293474197388, 1.2020214796066284, 1.202025055885315, 1.2020224332809448, 1.202023983001709, 1.2020434141159058, 1.202023983001709, 1.202049732208252, 1.2020854949951172, 1.2022346258163452, 1.2020256519317627, 1.2020587921142578, 1.2020286321640015, 1.2020231485366821, 1.202026605606079, 1.2020248174667358, 1.202028751373291, 1.2020364999771118, 1.2020291090011597, 1.2020279169082642, 1.2026855945587158, 1.2020245790481567, 1.202041745185852, 1.202059268951416, 1.202028751373291, 1.2020426988601685, 1.202027678489685, 1.2020429372787476, 1.2020221948623657, 1.2020643949508667, 1.2020233869552612, 1.202086329460144, 1.202029824256897, 1.202020525932312, 1.2020254135131836, 1.2020246982574463, 1.2020350694656372, 1.2020254135131836, 1.202029824256897, 1.2020255327224731, 1.2020254135131836, 1.202022910118103, 1.2020303010940552, 1.202027678489685, 1.2020193338394165, 1.2020233869552612, 1.2020305395126343, 1.202041745185852, 1.202030062675476, 1.2020231485366821, 1.202041506767273, 1.2020490169525146, 1.2020251750946045, 1.202109932899475, 1.2020254135131836, 1.2020431756973267, 1.2020195722579956, 1.202030062675476, 1.202025055885315, 1.2020193338394165, 1.2020407915115356, 1.2024000883102417, 1.2020263671875, 1.202035665512085, 1.2020235061645508, 1.2020269632339478, 1.2020374536514282, 1.202032208442688, 1.2020936012268066, 1.2021242380142212, 1.2020426988601685, 1.202026605606079, 1.2020225524902344, 1.2020670175552368, 1.2020231485366821, 1.2023693323135376, 1.2020384073257446, 1.2020221948623657, 1.2020219564437866, 1.2020244598388672, 1.202064871788025, 1.2020468711853027, 1.2020716667175293, 1.2020245790481567, 1.202024221420288, 1.202026128768921, 1.2020272016525269, 1.2020376920700073, 1.2020221948623657, 1.202023983001709, 1.2020256519317627, 1.2021198272705078, 1.2020361423492432, 1.2020310163497925, 1.2020351886749268, 1.2020782232284546, 1.2020325660705566, 1.2020267248153687, 1.2020511627197266, 1.202022671699524, 1.2020392417907715, 1.2020224332809448, 1.2020281553268433, 1.202036738395691, 1.202038049697876, 1.20204758644104, 1.2020217180252075, 1.2020236253738403, 1.2020224332809448, 1.2020463943481445, 1.2020221948623657, 1.2020362615585327, 1.2020244598388672, 1.2020236253738403, 1.2020398378372192, 1.2020279169082642, 1.2020742893218994, 1.2020211219787598, 1.2020301818847656, 1.202224850654602, 1.2020200490951538, 1.2020291090011597, 1.2020233869552612, 1.2020870447158813, 1.2020221948623657, 1.2020760774612427, 1.2020366191864014, 1.2020350694656372, 1.202020287513733, 1.2024054527282715, 1.2023327350616455, 1.202091097831726, 1.2020314931869507, 1.2020200490951538, 1.2020233869552612, 1.2020249366760254, 1.202036738395691, 1.202032208442688, 1.2020375728607178, 1.2020355463027954, 1.2020254135131836, 1.2020463943481445, 1.202030062675476, 1.2020221948623657, 1.2020195722579956, 1.2020310163497925, 1.2020233869552612, 1.2020230293273926, 1.2020221948623657, 1.2020255327224731, 1.2020319700241089, 1.2020196914672852, 1.202034592628479, 1.2020303010940552, 1.2020267248153687, 1.2020236253738403, 1.2020288705825806, 1.2020399570465088, 1.202034592628479, 1.2020219564437866, 1.2020446062088013, 1.2020394802093506, 1.2020256519317627, 1.2020336389541626, 1.2020516395568848, 1.2020305395126343, 1.202246069908142, 1.202021837234497, 1.202131986618042, 1.202227234840393, 1.2020403146743774, 1.202026605606079, 1.202027678489685, 1.202023983001709, 1.2020188570022583, 1.2020213603973389, 1.202044129371643, 1.2020221948623657, 1.2020221948623657, 1.2020243406295776, 1.2020304203033447, 1.2021337747573853, 1.2020636796951294, 1.2020293474197388, 1.2023499011993408, 1.2020281553268433, 1.202034831047058, 1.2020211219787598, 1.2020262479782104, 1.2020221948623657, 1.202020287513733, 1.2020431756973267, 1.2020196914672852, 1.2020269632339478, 1.2020319700241089, 1.2020303010940552, 1.2020268440246582, 1.2020219564437866, 1.2020457983016968, 1.2021211385726929, 1.2023614645004272, 1.2021394968032837, 1.2020305395126343, 1.2020448446273804, 1.2020254135131836, 1.2020336389541626, 1.202025294303894, 1.2020281553268433, 1.2020246982574463, 1.202038288116455, 1.2020231485366821, 1.2020249366760254, 1.2020212411880493, 1.2020494937896729, 1.2020186185836792, 1.2020210027694702, 1.2020244598388672, 1.2020208835601807, 1.2020349502563477, 1.2020245790481567, 1.2020326852798462, 1.2020221948623657, 1.2020246982574463, 1.2020200490951538, 1.2020268440246582, 1.2022536993026733, 1.2020314931869507, 1.2020295858383179, 1.2020217180252075, 1.2020207643508911, 1.202032208442688, 1.2020329236984253, 1.2020295858383179, 1.2020353078842163, 1.2020198106765747, 1.2020200490951538, 1.2020395994186401, 1.202049732208252, 1.202027678489685, 1.202026605606079, 1.2020272016525269, 1.2020918130874634, 1.202027678489685, 1.2020217180252075, 1.2020940780639648, 1.2020307779312134, 1.2023053169250488, 1.202057123184204, 1.202017903327942, 1.2025631666183472, 1.2020403146743774, 1.2020249366760254, 1.2020329236984253, 1.2020314931869507, 1.2020305395126343, 1.2020251750946045, 1.2020480632781982, 1.2020381689071655, 1.2020243406295776, 1.2020374536514282, 1.2020291090011597, 1.2020312547683716, 1.2020193338394165, 1.2020224332809448, 1.2020249366760254, 1.202117681503296, 1.2020283937454224, 1.2020283937454224, 1.2020236253738403, 1.2021104097366333, 1.2020319700241089, 1.2020326852798462, 1.2020387649536133, 1.2026084661483765, 1.2020336389541626, 1.2021981477737427, 1.2020314931869507, 1.2020548582077026, 1.2020529508590698, 1.2020347118377686, 1.202026605606079, 1.2020338773727417, 1.2020686864852905, 1.2020412683486938, 1.202043890953064, 1.2021206617355347, 1.2020334005355835, 1.2020224332809448, 1.202206015586853, 1.202020287513733, 1.2020471096038818, 1.2020388841629028, 1.202027678489685, 1.2020361423492432, 1.2020233869552612, 1.2020231485366821, 1.2020212411880493, 1.202022910118103, 1.2020312547683716, 1.2020174264907837, 1.202043890953064, 1.2020254135131836, 1.2020263671875, 1.202057957649231, 1.2020245790481567, 1.2020232677459717, 1.2021074295043945, 1.2020405530929565, 1.2020272016525269, 1.2020330429077148, 1.2020350694656372, 1.2020419836044312, 1.2020207643508911, 1.2020190954208374, 1.2020422220230103, 1.2020281553268433, 1.2020175457000732, 1.2020447254180908, 1.2020431756973267, 1.2020280361175537, 1.202041745185852, 1.202020525932312, 1.2020232677459717]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 23.209861418943785
Predicted: [4.583101749420166, 4.583099842071533, 4.58310079574585, 4.583102703094482, 4.583099842071533, 4.583099842071533, 4.583099842071533, 4.583101749420166, 4.5830979347229, 4.58310079574585, 4.583100318908691, 4.583101749420166, 4.583101749420166, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.583100318908691, 4.583099842071533, 4.583104610443115, 4.583100318908691, 4.583099842071533, 4.583099365234375, 4.58310079574585, 4.583099842071533, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583101749420166, 4.583099365234375, 4.583099842071533, 4.583099365234375, 4.583100318908691, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583098888397217, 4.583100318908691, 4.583100318908691, 4.583103656768799, 4.583101749420166, 4.583101749420166, 4.58310079574585, 4.583101749420166, 4.583099365234375, 4.583100318908691, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.583097457885742, 4.583101749420166, 4.583101749420166, 4.583101749420166, 4.583099842071533, 4.583100318908691, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.583101272583008, 4.583101749420166, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583100318908691, 4.583100318908691, 4.583099842071533, 4.583099842071533, 4.58310079574585, 4.583103656768799, 4.58310079574585, 4.58310079574585, 4.58308744430542, 4.583101749420166, 4.583101749420166, 4.583099842071533, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583098888397217, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583098888397217, 4.583099365234375, 4.58310079574585, 4.583101749420166, 4.583101749420166, 4.583099842071533, 4.583099842071533, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583099365234375, 4.583099842071533, 4.583101272583008, 4.583099365234375, 4.583100318908691, 4.583100318908691, 4.583099842071533, 4.5830278396606445, 4.58310079574585, 4.583099842071533, 4.583102703094482, 4.583099842071533, 4.583099365234375, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583100318908691, 4.583098888397217, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583100318908691, 4.583099365234375, 4.583098888397217, 4.58310079574585, 4.583099842071533, 4.583098888397217, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583100318908691, 4.583101749420166, 4.583099842071533, 4.58310079574585, 4.583099842071533, 4.583103179931641, 4.58310079574585, 4.583099842071533, 4.583103179931641, 4.583099842071533, 4.583101749420166, 4.583099842071533, 4.58310079574585, 4.583099842071533, 4.583100318908691, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583099842071533, 4.583092212677002, 4.583084583282471, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.583099365234375, 4.583100318908691, 4.583100318908691, 4.583099842071533, 4.583099842071533, 4.583100318908691, 4.583099842071533, 4.583098888397217, 4.583099365234375, 4.583100318908691, 4.58310079574585, 4.583101272583008, 4.583099365234375, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583101749420166, 4.583101272583008, 4.583100318908691, 4.583097457885742, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583099365234375, 4.583101749420166, 4.583099365234375, 4.583102703094482, 4.583099842071533, 4.58310079574585, 4.583099842071533, 4.583103656768799, 4.583099365234375, 4.583094596862793, 4.58310079574585, 4.58310079574585, 4.583102703094482, 4.58310079574585, 4.583099842071533, 4.583099365234375, 4.583101749420166, 4.583067417144775, 4.58310079574585, 4.583099842071533, 4.583099842071533, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583099365234375, 4.583099365234375, 4.583099842071533, 4.583103656768799, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583101749420166, 4.583099842071533, 4.583101272583008, 4.583101749420166, 4.58310079574585, 4.583102703094482, 4.583099365234375, 4.583099365234375, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583101749420166, 4.583099365234375, 4.583099365234375, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.583099365234375, 4.583099842071533, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.583101749420166, 4.583099842071533, 4.583101749420166, 4.583100318908691, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.583101272583008, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583093166351318, 4.583102703094482, 4.583098888397217, 4.583100318908691, 4.583100318908691, 4.58310079574585, 4.583099365234375, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583100318908691, 4.583101749420166, 4.583103179931641, 4.583101749420166, 4.58310079574585, 4.583099365234375, 4.583099842071533, 4.58310079574585, 4.583098888397217, 4.583101749420166, 4.583099365234375, 4.583098888397217, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.583099365234375, 4.583100318908691, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.583101749420166, 4.583099842071533, 4.583099365234375, 4.58310079574585, 4.583101272583008, 4.583099842071533, 4.583101749420166, 4.583101749420166, 4.58310079574585, 4.583099365234375, 4.583101272583008, 4.58310079574585, 4.583100318908691, 4.583099365234375, 4.583100318908691, 4.583102703094482, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583100318908691, 4.583099842071533, 4.58310079574585, 4.583096027374268, 4.583099842071533, 4.583101272583008, 4.583099842071533, 4.583099842071533, 4.58310079574585, 4.583098888397217, 4.583047389984131, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583099365234375, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.583101749420166, 4.583101749420166, 4.583099365234375, 4.583099365234375, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.583100318908691, 4.583099842071533, 4.58310079574585, 4.583099365234375, 4.583099842071533, 4.583101749420166, 4.583101749420166, 4.583099365234375, 4.58310079574585, 4.583099365234375, 4.583099365234375, 4.583101749420166, 4.583100318908691, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583103656768799, 4.583102703094482, 4.583101749420166, 4.583100318908691, 4.583104610443115, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583102703094482, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583101272583008, 4.58310079574585, 4.583100318908691, 4.58310079574585, 4.583099365234375, 4.583099842071533, 4.58310079574585, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583099842071533, 4.583099842071533, 4.583100318908691, 4.583099842071533, 4.583099842071533, 4.583099842071533, 4.583100318908691, 4.583100318908691, 4.583103179931641, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583099365234375, 4.583100318908691, 4.583101749420166, 4.58310079574585, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583100318908691, 4.583100318908691, 4.583099365234375, 4.58310079574585, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583101272583008, 4.58310079574585, 4.58310079574585, 4.583095550537109, 4.583099365234375, 4.58310079574585, 4.583098888397217, 4.583100318908691, 4.58310079574585, 4.58310079574585, 4.583101749420166, 4.583101749420166, 4.583099365234375, 4.583101749420166, 4.583100318908691, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583099842071533, 4.583101749420166, 4.583101749420166, 4.583100318908691, 4.583101749420166, 4.583101749420166, 4.58310079574585, 4.583099842071533, 4.583100318908691, 4.583099842071533, 4.583099842071533, 4.58310079574585, 4.583101272583008, 4.58310079574585, 4.583102703094482, 4.583101749420166, 4.583101749420166, 4.583101749420166, 4.583100318908691, 4.583099365234375, 4.583101749420166, 4.583100318908691, 4.583099842071533, 4.58310079574585, 4.583100318908691, 4.583100318908691, 4.583098888397217, 4.583100318908691, 4.583099842071533, 4.583099842071533, 4.583100318908691, 4.583099842071533, 4.583099365234375, 4.58310079574585, 4.583101749420166, 4.583099842071533, 4.58310079574585, 4.58310079574585, 4.583099842071533, 4.583101749420166, 4.583100318908691]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([688.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([208.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([328.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1240.3955994150756
Predicted: [6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959, 6.62778377532959]
Actual: [tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 53.43642073425308
Predicted: [8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.498692512512207, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789, 8.49869155883789]
Actual: [tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([90.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2312.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6470.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 94186.74000167962
Predicted: [9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414597511291504, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188, 9.414596557617188]
Actual: [tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([696.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([157.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 1045.9198498417911
Predicted: [9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480401039123535, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219, 9.480400085449219]
Actual: [tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1214.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([278.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([87.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21340.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([92.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([372.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([80.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6907.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64)]
MSE: 1008546.8513416547
Predicted: [8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889622688293457, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.889620780944824, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914, 8.88962173461914]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([392.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([222.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 449.44409612040397
Predicted: [10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926, 10.394009590148926]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([257.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23189.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([46650.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([86.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([318.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([48.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 5425402.7031992795
Predicted: [10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602, 10.335809707641602]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1427.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([418.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64)]
MSE: 4445.1772785357225
Predicted: [9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824, 9.759737968444824]
Actual: [tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([77.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8925.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([642.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([129.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 159864.63700044103
Predicted: [11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918, 11.391230583190918]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([36472.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2092.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([591.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([999.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 2670145.81222174
Predicted: [12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627, 12.30510425567627]
Actual: [tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([75.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([255.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2537.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([45.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([457.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([93.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 13395.226591204639
Predicted: [12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719, 12.035209655761719]
Actual: [tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([137.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([116.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([253.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 280.02166119813035
Predicted: [13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309, 13.160796165466309]
Actual: [tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19256.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([77.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([97.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([109.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([153.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([219.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 740872.4971909402
Predicted: [13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844, 13.471519470214844]
Actual: [tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([71.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([117.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([59.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 178.86315055708076
Predicted: [13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695, 13.353288650512695]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([84.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
