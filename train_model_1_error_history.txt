Predicted: [1.5854402780532837, 1.585719347000122, 1.5858142375946045, 1.5861382484436035, 1.585593581199646, 1.5977880954742432, 1.5855038166046143, 1.5857410430908203, 1.5856502056121826, 1.5854761600494385, 1.5870105028152466, 1.5855045318603516, 1.5854684114456177, 1.5860320329666138, 1.5860779285430908, 1.58559250831604, 1.5855656862258911, 1.5854887962341309, 1.5860589742660522, 1.585402011871338, 1.5856428146362305, 1.585627555847168, 1.5854458808898926, 1.585418701171875, 1.5855438709259033, 1.5855481624603271, 1.5856376886367798, 1.5858964920043945, 1.5857864618301392, 1.5854361057281494, 1.5854754447937012, 1.585572600364685, 1.585437536239624, 1.5857423543930054, 1.5855319499969482, 1.5854660272598267, 1.5854172706604004, 1.5855343341827393, 1.5854806900024414, 1.5856081247329712, 1.586193561553955, 1.5857126712799072, 1.5855841636657715, 1.585436224937439, 1.585500717163086, 1.5856835842132568, 1.5858335494995117, 1.585545301437378, 1.5854840278625488, 1.5855954885482788, 1.5855109691619873, 1.5860193967819214, 1.5854662656784058, 1.5854978561401367, 1.5855962038040161, 1.5876173973083496, 1.5854237079620361, 1.5861377716064453, 1.5854649543762207, 1.5857040882110596, 1.5855176448822021, 1.5854581594467163, 1.5863200426101685, 1.5896940231323242, 1.5854727029800415, 1.585518479347229, 1.585503101348877, 1.5855907201766968, 1.5857203006744385, 1.5854214429855347, 1.585821270942688, 1.5859501361846924, 1.585947871208191, 1.5864713191986084, 1.5856292247772217, 1.5859674215316772, 1.5856399536132812, 1.5869184732437134, 1.5856082439422607, 1.5859326124191284, 1.5855002403259277, 1.5878852605819702, 1.5855426788330078, 1.5855376720428467, 1.5856144428253174, 1.5856716632843018, 1.585930585861206, 1.5856482982635498, 1.5855274200439453, 1.585435390472412, 1.5856189727783203, 1.585399866104126, 1.5856914520263672, 1.5866897106170654, 1.5858674049377441, 1.585605502128601, 1.5854406356811523, 1.5855913162231445, 1.5856914520263672, 1.5861517190933228, 1.5857062339782715, 1.585857629776001, 1.5854665040969849, 1.5855655670166016, 1.5856349468231201, 1.5854222774505615, 1.58556067943573, 1.5854979753494263, 1.5854073762893677, 1.5854389667510986, 1.5853900909423828, 1.585479736328125, 1.586438536643982, 1.5857648849487305, 1.5857012271881104, 1.585598349571228, 1.5854343175888062, 1.5857510566711426, 1.5863579511642456, 1.5855246782302856, 1.5854263305664062, 1.585878610610962, 1.585587978363037, 1.5854195356369019, 1.5856685638427734, 1.5855350494384766, 1.5854533910751343, 1.5854427814483643, 1.585437297821045, 1.5857326984405518, 1.5855157375335693, 1.5858789682388306, 1.585918664932251, 1.5865803956985474, 1.5858103036880493, 1.5857555866241455, 1.5860223770141602, 1.585519790649414, 1.5854617357254028, 1.58546781539917, 1.5856895446777344, 1.5858418941497803, 1.5855273008346558, 1.5854309797286987, 1.5855211019515991, 1.5854544639587402, 1.5856800079345703, 1.5855021476745605, 1.5855045318603516, 1.5855045318603516, 1.585667610168457, 1.5854847431182861, 1.585453748703003, 1.593481421470642, 1.5858798027038574, 1.5854885578155518, 1.585954189300537, 1.594196081161499, 1.5856261253356934, 1.5854449272155762, 1.585395336151123, 1.5855461359024048, 1.5854449272155762, 1.5863447189331055, 1.585402488708496, 1.585473656654358, 1.5889371633529663, 1.58544921875, 1.585628867149353, 1.585419774055481, 1.5858262777328491, 1.5854387283325195, 1.585519790649414, 1.585536003112793, 1.585623025894165, 1.5858731269836426, 1.5855739116668701, 1.5854763984680176, 1.5858087539672852, 1.5854204893112183, 1.585513710975647, 1.5857747793197632, 1.608642578125, 1.5870753526687622, 1.5867425203323364, 1.5863415002822876, 1.5854179859161377, 1.5862005949020386, 1.5859787464141846, 1.5859565734863281, 1.5854156017303467, 1.5855344533920288, 1.585524320602417, 1.5855411291122437, 1.586043357849121, 1.5856469869613647, 1.5854443311691284, 1.5854394435882568, 1.6443909406661987, 1.5857725143432617, 1.5858650207519531, 1.5855739116668701, 1.5854953527450562, 1.5862023830413818, 1.586176872253418, 1.5859737396240234, 1.5867830514907837, 1.585389494895935, 1.5855330228805542, 1.5853900909423828, 1.5856666564941406, 1.5855351686477661, 1.5858302116394043, 1.5854206085205078, 1.5854966640472412, 1.5857961177825928, 1.5856215953826904, 1.5854365825653076, 1.5858502388000488, 1.5856823921203613, 1.5862183570861816, 1.5857765674591064, 1.5880258083343506, 1.5861468315124512, 1.5858149528503418, 1.585425615310669, 1.5855119228363037, 1.5857752561569214, 1.585542917251587, 1.585828423500061, 1.5855286121368408, 1.585453748703003, 1.5855494737625122, 1.5858442783355713, 1.5864249467849731, 1.586876630783081, 1.5860106945037842, 1.5855683088302612, 1.5855309963226318, 1.5858511924743652, 1.5862677097320557, 1.5855896472930908, 1.5858206748962402, 1.585494041442871, 1.5854175090789795, 1.58553147315979, 1.5854098796844482, 1.585423469543457, 1.5855036973953247, 1.5854523181915283, 1.5854699611663818, 1.6196436882019043, 1.5857326984405518, 1.5858739614486694, 1.585584282875061, 1.585676908493042, 1.585414171218872, 1.585451602935791, 1.5857075452804565, 1.5856317281723022, 1.5854988098144531, 1.5854859352111816, 1.585443377494812, 1.5857967138290405, 1.5854787826538086, 1.6269516944885254, 1.5862250328063965, 1.5855751037597656, 1.586198091506958, 1.5855711698532104, 1.595910668373108, 1.5854480266571045, 1.5854172706604004, 1.585681438446045, 1.5855045318603516, 1.5859899520874023, 1.5854377746582031, 1.58587646484375, 1.5854605436325073, 1.5854686498641968, 1.5858986377716064, 1.585632085800171, 1.5854607820510864, 1.585464596748352, 1.5856921672821045, 1.5854172706604004, 1.5854411125183105, 1.5854852199554443, 1.5854591131210327, 1.5856410264968872, 1.585507869720459, 1.5859239101409912, 1.585580825805664, 1.5860583782196045, 1.585425615310669, 1.5857234001159668, 1.5855321884155273, 1.5854203701019287, 1.5856683254241943, 1.5854967832565308, 1.5854771137237549, 1.585782527923584, 1.5857033729553223, 1.5857160091400146, 1.5854642391204834, 1.5854707956314087, 1.5856144428253174, 1.5861985683441162, 1.5854392051696777, 1.5860750675201416, 1.5855746269226074, 1.5856513977050781, 1.5858874320983887, 1.585542917251587, 1.585963487625122, 1.5855424404144287, 1.5854769945144653, 1.5889033079147339, 1.585874319076538, 1.5874428749084473, 1.5856173038482666, 1.585394263267517, 1.5853973627090454, 1.5863995552062988, 1.5857106447219849, 1.5856695175170898, 1.58542001247406, 1.5856140851974487, 1.5855777263641357, 1.5855776071548462, 1.585442304611206, 1.7355153560638428, 1.5855262279510498, 1.5855510234832764, 1.585532546043396, 1.5856925249099731, 1.5856468677520752, 1.5858752727508545, 1.585442304611206, 1.5857081413269043, 1.585707187652588, 1.5854368209838867, 1.5859286785125732, 1.5863001346588135, 1.5854583978652954, 1.5854896306991577, 1.5874137878417969, 1.5855200290679932, 1.5856482982635498, 1.597733497619629, 1.5855169296264648, 1.5856750011444092, 1.5854575634002686, 1.5854320526123047, 1.5854668617248535, 1.585771918296814, 1.5855226516723633, 1.5859968662261963, 1.5945029258728027, 1.5853941440582275, 1.585538625717163, 1.5856183767318726, 1.5864225625991821, 1.585579514503479, 1.5886433124542236, 1.5857136249542236, 1.5856363773345947, 1.5855226516723633, 1.5856176614761353, 1.5854591131210327, 1.585416555404663, 1.5855956077575684, 1.5854427814483643, 1.5854086875915527, 1.5854461193084717, 1.585479736328125, 1.5857579708099365, 1.5861256122589111, 1.5858850479125977, 1.5856280326843262, 1.585453748703003, 1.585579514503479, 1.585458517074585, 1.5913456678390503, 1.5856038331985474, 1.5856881141662598, 1.5854089260101318, 1.585982084274292, 1.5874710083007812, 1.585403323173523, 1.5854945182800293, 1.5856765508651733, 1.5857782363891602, 1.585436463356018, 1.5854723453521729, 1.5856683254241943, 1.5857223272323608, 1.586066722869873, 1.5854779481887817, 1.5854554176330566, 1.5856664180755615, 1.5858864784240723, 1.5857415199279785, 1.585961103439331, 1.5854873657226562, 1.5854557752609253, 1.5856504440307617, 1.5854620933532715, 1.5854510068893433, 1.5855684280395508, 1.5854724645614624, 1.5855445861816406, 1.5854523181915283, 1.586986780166626, 1.5855134725570679, 1.5861687660217285, 1.5859355926513672, 1.5862396955490112, 1.585479736328125, 1.5854508876800537, 1.600442886352539, 1.585641860961914, 1.5854554176330566, 1.5857412815093994, 1.5861420631408691, 1.585737943649292, 1.585697889328003, 1.585546612739563, 1.5853937864303589, 1.5856379270553589, 1.5855796337127686, 1.585429072380066, 1.6201320886611938, 1.5857605934143066, 1.5856504440307617, 1.5876137018203735, 1.5854164361953735, 1.585925579071045, 1.5854544639587402, 1.5855841636657715, 1.5857133865356445, 1.5857605934143066, 1.5854203701019287, 1.5855488777160645, 1.585468053817749, 1.585567831993103, 1.586356282234192, 1.585477352142334, 1.5854140520095825, 1.585388422012329, 1.5861239433288574, 1.585782527923584, 1.5861694812774658, 1.585675835609436, 1.6574219465255737, 1.585507869720459, 1.5855826139450073, 1.585532546043396, 1.5856208801269531, 1.5854763984680176, 1.5858442783355713, 1.5854462385177612, 1.5858126878738403, 1.5854400396347046, 1.5857219696044922, 1.5855083465576172, 1.5854933261871338, 1.5859079360961914, 1.5855729579925537, 1.586249589920044, 1.5856192111968994, 1.5857750177383423, 1.5859770774841309, 1.5854443311691284, 1.5864412784576416, 1.5862221717834473, 1.5856211185455322, 1.5856680870056152, 1.5854277610778809, 1.5854607820510864, 1.5856256484985352, 1.5894279479980469, 1.5854027271270752, 1.5854332447052002, 1.585908055305481, 1.5854840278625488, 1.585677146911621, 1.58583664894104, 1.5854840278625488, 1.585445761680603, 1.5874965190887451, 1.5863415002822876, 1.5855389833450317, 1.585493803024292, 1.5856375694274902, 1.5853910446166992, 1.5854523181915283, 1.5854525566101074, 1.5854460000991821, 1.587913155555725]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1373.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2707.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31292.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 1976598.1964959614
Predicted: [4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005577087402, 4.002005100250244, 4.002005100250244, 4.0020060539245605, 4.002007484436035, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002012729644775, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005577087402, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005577087402, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.0020060539245605, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002009868621826, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244, 4.002005100250244]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([52.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20694.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 856170.1688634366
Predicted: [6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.30626916885376, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306269645690918, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268215179443, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306270599365234, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306270122528076, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306270122528076, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.3062744140625, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306270599365234, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306271553039551, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602, 6.306268692016602]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([194.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([83.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7882.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([38473.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18166.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([7.], dtype=torch.float64)]
MSE: 3743085.0389907407
Predicted: [8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331311225891113, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331304550170898, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331305503845215, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331307411193848, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331305503845215, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331304550170898, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582, 8.331303596496582]
Actual: [tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23493.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4072.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7275.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([129.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1241780.7198205788
Predicted: [9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260734558105469, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260733604431152, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.260732650756836, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.260733604431152, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252, 9.26073169708252]
Actual: [tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4806.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8163.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([136.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6069.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 252518.7410733533
Predicted: [9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941, 9.337800025939941]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([105.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([252.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 196.05656677378477
Predicted: [8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248962402344, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248962402344, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769250869750977, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769250869750977, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248962402344, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248962402344, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769248008728027, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711, 8.769247055053711]
Actual: [tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([82.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([63.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([100.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([89.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([427.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([533.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([147.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([117.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 1068.2842823771607
Predicted: [10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645, 10.320820808410645]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([56.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13854.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([27227.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([598.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([76.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 1865571.9830439915
Predicted: [10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.26935863494873, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414, 10.269357681274414]
Actual: [tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([59.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([579.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([103.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64)]
MSE: 752.4605888436244
Predicted: [9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098, 9.705147743225098]
Actual: [tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([66.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([65.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([56.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([317.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 273.0684293389209
Predicted: [11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125, 11.337677001953125]
Actual: [tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([145.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([120.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22999.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6802.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14810.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 1587264.5559627698
Predicted: [12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668, 12.23444938659668]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([59.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 116.14744741850105
Predicted: [11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973978996276855, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973978996276855, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172, 11.973979949951172]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([66.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([493.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([113.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([102.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([60.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64)]
MSE: 613.5146175682578
Predicted: [13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078, 13.080036163330078]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([149070.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([151.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([609.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 44436815.06590265
Predicted: [13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334, 13.38260555267334]
Actual: [tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([127.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([37.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2982.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([87.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([550.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4510.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([149.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([655.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 59669.22747838615
Predicted: [13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906, 13.268898010253906]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([98.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([207.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([66.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([343.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64)]
MSE: 448.77907051369783
Predicted: [13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637, 13.245043754577637]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([209.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([66.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([83.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 223.72253146134136
Predicted: [13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145, 13.459614753723145]
Actual: [tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8188.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64)]
MSE: 133783.118514185
Predicted: [13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559, 13.934782981872559]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42217.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([385.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([138.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([187.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1325.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 3566144.0746307145
Predicted: [13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266, 13.721195220947266]
Actual: [tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([75.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([311.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 337.27822043184904
Predicted: [14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074, 14.331576347351074]
Actual: [tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([709.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([183.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([61.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([144.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([73.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64)]
MSE: 1224.9646715995557
Predicted: [15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795, 15.20141887664795]
Actual: [tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([56.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([691.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25407.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([24554.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2494885.8673432637
Predicted: [14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969, 14.843376159667969]
Actual: [tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([51.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([65.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([76.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64)]
MSE: 189.94319997267286
Predicted: [14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402, 14.370169639587402]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([112.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([52.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([72.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([65.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([565.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1435.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([71.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([165.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 4887.95937601831
Predicted: [14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707, 14.565709114074707]
Actual: [tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1823.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3153.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([141.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64)]
MSE: 26438.891462218933
Predicted: [14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074, 14.443392753601074]
Actual: [tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2650.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([394.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([90.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 14356.99067095978
Predicted: [13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226825714111328, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012, 13.226824760437012]
Actual: [tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([107.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([59.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([319.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1170.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([61.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 3017.4245546776406
Predicted: [4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496466636657715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968366622924805, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496835231781006, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496836185455322, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968366622924805, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496837139129639, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838092803955, 4.49683141708374, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838569641113, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838569641113, 4.4968390464782715, 4.496837139129639, 4.496832847595215, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496836185455322, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496838092803955, 4.496838569641113, 4.496838092803955, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496805191040039, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496837615966797, 4.496838092803955, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.496837615966797, 4.496838569641113, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837139129639, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496572017669678, 4.496838569641113, 4.496837139129639, 4.496771812438965, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837139129639, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496834754943848, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496838092803955, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.496838569641113, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496838569641113, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496824264526367, 4.4968390464782715, 4.496837139129639, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496824264526367, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.49680757522583, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.496833801269531, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.496838092803955, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496835231781006, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496833324432373, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838092803955, 4.4968390464782715, 4.496838569641113, 4.49683141708374, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.496838569641113, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.496731281280518, 4.496837615966797, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496838092803955, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.496838569641113, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.496837615966797, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715, 4.4968390464782715]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([155.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([511.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([106.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 608.1510390029514
Predicted: [6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261360168457031, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261362552642822, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.26134729385376, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261359691619873, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261360168457031, 6.261362075805664, 6.261363983154297, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261354923248291, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261361598968506, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261075019836426, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261359691619873, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363983154297, 6.261359214782715, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363983154297, 6.261361122131348, 6.261363983154297, 6.261299133300781, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261292934417725, 6.2613630294799805, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261354446411133, 6.261363983154297, 6.261361122131348, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261356830596924, 6.261363983154297, 6.261362552642822, 6.261362075805664, 6.261362075805664, 6.261361598968506, 6.26108455657959, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261353492736816, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261350631713867, 6.261354446411133, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261354446411133, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261353492736816, 6.261362552642822, 6.261363983154297, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.2613630294799805, 6.261362552642822, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261361598968506, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.26135778427124, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261360168457031, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261358737945557, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261362552642822, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261361122131348, 6.261361122131348, 6.2613630294799805, 6.261363506317139, 6.261357307434082, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.261321067810059, 6.261363506317139, 6.261363506317139, 6.261361598968506, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363983154297, 6.261363983154297, 6.261351108551025, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261082649230957, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363983154297, 6.261362075805664, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261357307434082, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261359214782715, 6.261362075805664, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261317729949951, 6.261363983154297, 6.261363983154297, 6.261362552642822, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.2613525390625, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261360168457031, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261362075805664, 6.2613630294799805, 6.261359214782715, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261361122131348, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261363983154297, 6.261363506317139, 6.261356353759766, 6.261355876922607, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.26127815246582, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.2613630294799805, 6.261363506317139, 6.261363983154297, 6.261363983154297, 6.261363506317139, 6.261362075805664, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.2613630294799805, 6.261271953582764, 6.261363506317139, 6.261361598968506, 6.2613630294799805, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261363506317139, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261361122131348, 6.261363506317139, 6.2613630294799805, 6.261363506317139, 6.261361122131348, 6.261363983154297, 6.261363506317139, 6.261363983154297, 6.261363506317139, 6.261363506317139]
Actual: [tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([95.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 44.02418940242432
Predicted: [6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807375431060791, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807375907897949, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384490966797, 6.807382583618164, 6.807368278503418, 6.807384014129639, 6.8073835372924805, 6.807374477386475, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807376384735107, 6.807384014129639, 6.8073835372924805, 6.807377815246582, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807382106781006, 6.807380199432373, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.807377815246582, 6.807384014129639, 6.807384490966797, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807381629943848, 6.807379722595215, 6.807371139526367, 6.807338237762451, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807372093200684, 6.807384014129639, 6.807384014129639, 6.807382106781006, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.8073811531066895, 6.807384014129639, 6.807381629943848, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.80734395980835, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.807384014129639, 6.807371139526367, 6.8073835372924805, 6.807373046875, 6.807384014129639, 6.807338237762451, 6.807384490966797, 6.807297229766846, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807380676269531, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807383060455322, 6.807382583618164, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807379722595215, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384490966797, 6.807378768920898, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807382106781006, 6.8073835372924805, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807380676269531, 6.807379722595215, 6.8073835372924805, 6.807382106781006, 6.807384490966797, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807380676269531, 6.807384014129639, 6.807382583618164, 6.807379722595215, 6.807382583618164, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807381629943848, 6.807382583618164, 6.807384014129639, 6.807384014129639, 6.807380676269531, 6.807382583618164, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807380676269531, 6.8073835372924805, 6.807383060455322, 6.807384014129639, 6.807384014129639, 6.807381629943848, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.807381629943848, 6.8073835372924805, 6.807381629943848, 6.807382583618164, 6.807384490966797, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.807382583618164, 6.807379722595215, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807378768920898, 6.8073835372924805, 6.8073835372924805, 6.807384490966797, 6.807380676269531, 6.8073835372924805, 6.8073835372924805, 6.807381629943848, 6.8073835372924805, 6.807384014129639, 6.807384490966797, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.8073649406433105, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807382106781006, 6.807377815246582, 6.807384014129639, 6.8073835372924805, 6.807377338409424, 6.8073835372924805, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807380199432373, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807382106781006, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807379722595215, 6.8073835372924805, 6.807384014129639, 6.807380676269531, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807379722595215, 6.807379722595215, 6.8073835372924805, 6.8073835372924805, 6.807381629943848, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.8073811531066895, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807379722595215, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807380676269531, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.806324005126953, 6.807381629943848, 6.8073811531066895, 6.807384490966797, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.807374000549316, 6.807384014129639, 6.807382106781006, 6.807382106781006, 6.807352542877197, 6.8073835372924805, 6.807382106781006, 6.807384014129639, 6.807384490966797, 6.8073811531066895, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807374000549316, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807383060455322, 6.807384014129639, 6.807382583618164, 6.807373046875, 6.8073835372924805, 6.807382583618164, 6.8073811531066895, 6.8073835372924805, 6.807326316833496, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807382106781006, 6.807384490966797, 6.807377338409424, 6.807256698608398, 6.807384014129639, 6.8073649406433105, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382106781006, 6.807382106781006, 6.807384014129639, 6.807376861572266, 6.807380676269531, 6.8073835372924805, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.8073835372924805, 6.807382106781006, 6.807382106781006, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807380676269531, 6.807381629943848, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.807382106781006, 6.8073835372924805, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073811531066895, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.8073811531066895, 6.807381629943848, 6.807384014129639, 6.8073835372924805, 6.807384014129639, 6.8073811531066895, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807382106781006, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384490966797, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807379722595215, 6.8073835372924805, 6.807382106781006, 6.8073835372924805, 6.807384014129639, 6.807384490966797, 6.8073835372924805, 6.807238578796387, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.807384014129639, 6.807382583618164, 6.806929111480713, 6.8073835372924805, 6.807382106781006, 6.8073811531066895, 6.807380199432373, 6.807384014129639, 6.807368278503418, 6.807382583618164, 6.807384014129639, 6.807384014129639, 6.807382583618164, 6.8073835372924805, 6.807384014129639, 6.807384014129639, 6.8073835372924805, 6.807382583618164, 6.8073835372924805]
Actual: [tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([366.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1454.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([62.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([182.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64)]
MSE: 4543.537448546262
Predicted: [9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.26786994934082, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.26786994934082, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.26786994934082, 9.267864227294922, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267773628234863, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267844200134277, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267873764038086, 9.267871856689453, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267866134643555, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267723083496094, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.26787281036377, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267873764038086, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267873764038086, 9.267874717712402, 9.267875671386719, 9.267874717712402, 9.267874717712402, 9.267874717712402, 9.267875671386719, 9.267873764038086, 9.267874717712402]
Actual: [tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([89.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16953.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4867.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([226.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([433.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([66.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64)]
MSE: 621913.5303216889
Predicted: [9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133336067199707, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133318901062012, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133336067199707, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.13333797454834, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133334159851074, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133329391479492, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133337020874023, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133336067199707, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133336067199707, 9.133339881896973, 9.133339881896973, 9.133332252502441, 9.133339881896973, 9.133340835571289, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133332252502441, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133322715759277, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133338928222656, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133336067199707, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13330364227295, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133305549621582, 9.133338928222656, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133334159851074, 9.133336067199707, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133340835571289, 9.133339881896973, 9.133336067199707, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133332252502441, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133336067199707, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133336067199707, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133255958557129, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133337020874023, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133336067199707, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333511352539, 9.133339881896973, 9.133339881896973, 9.133326530456543, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.13333797454834, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133340835571289, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133332252502441, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133336067199707, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133339881896973, 9.133332252502441, 9.133339881896973, 9.133254051208496, 9.133339881896973, 9.133339881896973]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([83.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3634.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([396.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([98.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([106.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 26682.316546942537
Predicted: [9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.09863567352295, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098633766174316, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098630905151367, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098633766174316, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098636627197266, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098631858825684, 9.098637580871582, 9.098633766174316, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098143577575684, 9.098638534545898, 9.09863567352295, 9.09863567352295, 9.098637580871582, 9.098638534545898, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098620414733887, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098626136779785, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098620414733887, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098612785339355, 9.098637580871582, 9.098638534545898, 9.098628997802734, 9.098633766174316, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098636627197266, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098633766174316, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098617553710938, 9.098633766174316, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098633766174316, 9.098638534545898, 9.098637580871582, 9.09860610961914, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098633766174316, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098636627197266, 9.098636627197266, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098633766174316, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098612785339355, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098633766174316, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.09863567352295, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.098631858825684, 9.098637580871582, 9.098638534545898, 9.09858226776123, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098633766174316, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.09863567352295, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.09863567352295, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.09863567352295, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098628044128418, 9.098637580871582, 9.09863567352295, 9.098633766174316, 9.098637580871582, 9.098637580871582, 9.098630905151367, 9.098637580871582, 9.0986328125, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098636627197266, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098638534545898, 9.098637580871582, 9.098637580871582, 9.098637580871582, 9.098636627197266, 9.098637580871582]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2860.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([477.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([90.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([309.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([102.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([214.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([129.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 17074.26665078992
Predicted: [8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388291358947754, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388288497924805, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.38829231262207, 8.38829231262207, 8.388289451599121, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388290405273438, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388251304626465, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.388289451599121, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.38825798034668, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388290405273438, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388290405273438, 8.388294219970703, 8.388288497924805, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.38823413848877, 8.388294219970703, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388289451599121, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388290405273438, 8.388289451599121, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388290405273438, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388261795043945, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.38829231262207, 8.38819694519043, 8.38829231262207, 8.388175964355469, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388282775878906, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388275146484375, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388287544250488, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38824462890625, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388290405273438, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.38829231262207, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.388286590576172, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.38827896118164, 8.388294219970703, 8.388291358947754, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388290405273438, 8.38829231262207, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388291358947754, 8.388294219970703, 8.388290405273438, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.388290405273438, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388293266296387, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388287544250488, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388290405273438, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388287544250488, 8.388293266296387, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388291358947754, 8.388293266296387, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388282775878906, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388265609741211, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388293266296387, 8.388293266296387, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388290405273438, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388256072998047, 8.38829231262207, 8.388290405273438, 8.388294219970703, 8.38829231262207, 8.388294219970703, 8.38829231262207, 8.388280868530273, 8.38829231262207, 8.38829231262207, 8.388240814208984, 8.388294219970703, 8.388294219970703, 8.38829231262207, 8.38829231262207, 8.388293266296387, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388287544250488, 8.388293266296387, 8.388288497924805, 8.388291358947754, 8.38829231262207, 8.38829231262207, 8.38829231262207, 8.388286590576172, 8.388293266296387, 8.388290405273438, 8.388293266296387, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.38829231262207, 8.38829231262207, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703, 8.388294219970703, 8.388293266296387, 8.388294219970703]
Actual: [tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1290.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([494.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([156.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([169.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 3907.653840996925
Predicted: [11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260201454162598, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.260190963745117, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.260163307189941, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260212898254395, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260096549987793, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260212898254395, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260201454162598, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260212898254395, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260208129882812, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260214805603027, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.260215759277344, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166, 11.26021671295166]
Actual: [tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([45.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([579.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([583.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([49935.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6712.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 5075957.14628538
Predicted: [11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.543331146240234, 11.5433349609375, 11.543330192565918, 11.54333209991455, 11.543331146240234, 11.5433349609375, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543329238891602, 11.543330192565918, 11.543335914611816, 11.543329238891602, 11.54333209991455, 11.5433349609375, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54332447052002, 11.543328285217285, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543328285217285, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543331146240234, 11.5433349609375, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543328285217285, 11.543334007263184, 11.543330192565918, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.5433349609375, 11.543322563171387, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543328285217285, 11.54333209991455, 11.54333209991455, 11.54332447052002, 11.543330192565918, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543327331542969, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.5433349609375, 11.543334007263184, 11.543334007263184, 11.543328285217285, 11.543328285217285, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543327331542969, 11.543327331542969, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543313980102539, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.543326377868652, 11.543328285217285, 11.54333209991455, 11.54333209991455, 11.543328285217285, 11.543315887451172, 11.543328285217285, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.5433349609375, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.543334007263184, 11.543330192565918, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543330192565918, 11.543334007263184, 11.543334007263184, 11.543318748474121, 11.543301582336426, 11.543334007263184, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.54332447052002, 11.543334007263184, 11.54333209991455, 11.543330192565918, 11.543330192565918, 11.543334007263184, 11.543330192565918, 11.54333209991455, 11.543328285217285, 11.543316841125488, 11.54333209991455, 11.543330192565918, 11.543334007263184, 11.543330192565918, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.543327331542969, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543333053588867, 11.543335914611816, 11.543330192565918, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543331146240234, 11.543334007263184, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.543334007263184, 11.543334007263184, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543327331542969, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.5433349609375, 11.543327331542969, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.5433349609375, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.543328285217285, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.543333053588867, 11.543334007263184, 11.54333209991455, 11.543330192565918, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.543335914611816, 11.54333209991455, 11.5433349609375, 11.543326377868652, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.5433349609375, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543330192565918, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54332447052002, 11.54333209991455, 11.54333209991455, 11.5433349609375, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54331111907959, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.543331146240234, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54332447052002, 11.54333209991455, 11.543328285217285, 11.543334007263184, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.54333209991455, 11.543320655822754, 11.543334007263184, 11.543330192565918, 11.543334007263184, 11.543328285217285, 11.543333053588867, 11.543331146240234, 11.543329238891602, 11.54333209991455, 11.543334007263184, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543304443359375, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.543331146240234, 11.543330192565918, 11.543330192565918, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.543326377868652, 11.543334007263184, 11.54333209991455, 11.543330192565918, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543320655822754, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543328285217285, 11.543326377868652, 11.54333209991455, 11.543331146240234, 11.543333053588867, 11.54333209991455, 11.54332447052002, 11.54333209991455, 11.54333209991455, 11.543326377868652, 11.54333209991455, 11.543334007263184, 11.543330192565918, 11.54333209991455, 11.543331146240234, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543331146240234, 11.543330192565918, 11.543330192565918, 11.54333209991455, 11.543327331542969, 11.543327331542969, 11.54333209991455, 11.543329238891602, 11.54333209991455, 11.5433349609375, 11.543329238891602, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543330192565918, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543328285217285, 11.54333209991455, 11.543334007263184, 11.54331111907959, 11.543331146240234, 11.543329238891602, 11.54333209991455, 11.5433349609375, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543330192565918, 11.543331146240234, 11.543331146240234, 11.543328285217285, 11.543330192565918, 11.54333209991455, 11.543328285217285, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.543331146240234, 11.54333209991455, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.543326377868652, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543326377868652, 11.54333209991455, 11.543331146240234, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543331146240234, 11.543330192565918, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543334007263184, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.54333209991455, 11.543333053588867, 11.54333209991455, 11.543330192565918, 11.543299674987793, 11.54333209991455, 11.543330192565918, 11.5433349609375]
Actual: [tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([180.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([37145.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([82.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([140.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([171.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2758035.4615519
Predicted: [12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403727531433105, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403728485107422, 12.403728485107422, 12.403728485107422, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403726577758789, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403725624084473, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403727531433105, 12.403729438781738, 12.403725624084473, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403725624084473, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403725624084473, 12.403726577758789, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403727531433105, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403728485107422, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403728485107422, 12.403727531433105, 12.403729438781738, 12.403728485107422, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403729438781738, 12.403727531433105, 12.403727531433105, 12.403729438781738, 12.403729438781738, 12.403729438781738]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([121.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([54070.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 5844587.537385334
Predicted: [13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007403373718262, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007402420043945, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007406234741211, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007415771484375, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.00743293762207, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007415771484375, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007400512695312, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629, 13.007401466369629]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([350.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([84.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([209.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 447.2125668110853
Predicted: [13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612955093383789, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612955093383789, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612958908081055, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612955093383789, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612955093383789, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612955093383789, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612957000732422, 13.612955093383789, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612956047058105, 13.612957000732422, 13.612957000732422, 13.612955093383789]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([45.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([221.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([56.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([739.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25897.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([144.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([81.], dtype=torch.float64), tensor([88.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 1341244.7090877201
Predicted: [14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070732116699219, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070730209350586, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734977722168, 14.070734024047852, 14.070734024047852, 14.070734024047852]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([78.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([93.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([135.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([45.], dtype=torch.float64), tensor([4327.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([529.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([103.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([59.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([136.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6690.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([258.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 127237.5385519709
Predicted: [14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562499046325684, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562499046325684, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.5625, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562499046325684, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562499046325684, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316, 14.562500953674316]
Actual: [tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([36708.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 2692982.0720387185
Predicted: [14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.4117431640625, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.4117431640625, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.4117431640625, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.4117431640625, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133, 14.411744117736816, 14.411744117736816, 14.411744117736816, 14.411745071411133, 14.411745071411133, 14.411745071411133, 14.411744117736816, 14.411745071411133]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([100.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([49.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9128.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 166289.99477236607
Predicted: [13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943197250366211, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895, 13.943196296691895]
Actual: [tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([144.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([69.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([500.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([136.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([150.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 728.2236918437511
Predicted: [12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.906984329223633, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.906986236572266, 12.906986236572266, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795, 12.90698528289795]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([351.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([303.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([138.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([308.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64)]
MSE: 722.5262863793769
Predicted: [7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.0272674560546875, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027268886566162, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027266025543213, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.0272674560546875, 7.027265548706055, 7.027266025543213, 7.027268409729004, 7.027240753173828, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268409729004, 7.027265548706055, 7.0272674560546875, 7.027266025543213, 7.027266502380371, 7.027249336242676, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027234077453613, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.02725076675415, 7.027266025543213, 7.0272674560546875, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027247428894043, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027246952056885, 7.027265548706055, 7.027265548706055, 7.027436256408691, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266979217529, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027267932891846, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268409729004, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027244567871094, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027266025543213, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266502380371, 7.027265548706055, 7.027266502380371, 7.027266025543213, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027266025543213, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268409729004, 7.027265548706055, 7.0272674560546875, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0272674560546875, 7.027265548706055, 7.027266025543213, 7.027266979217529, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266502380371, 7.02723503112793, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027267932891846, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268886566162, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027731895446777, 7.027265548706055, 7.027266025543213, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027266502380371, 7.027265548706055, 7.027266502380371, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.0272674560546875, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.02726936340332, 7.027265548706055, 7.027268409729004, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027268409729004, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027261734008789, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027243614196777, 7.027265548706055, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027267932891846, 7.027265548706055, 7.02726936340332, 7.027268409729004, 7.027265548706055, 7.027268886566162, 7.027267932891846, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.02726936340332, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027265548706055, 7.0276360511779785, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0272674560546875, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027268409729004, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027268409729004, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027248382568359, 7.027267932891846, 7.027267932891846, 7.027266025543213, 7.027265548706055, 7.0272674560546875, 7.027265548706055, 7.027265548706055, 7.027719497680664, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027237415313721, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.0272674560546875, 7.027266025543213, 7.027266025543213, 7.027267932891846, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.0272674560546875, 7.027266025543213, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027268409729004, 7.027268409729004, 7.027265548706055, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.02726936340332, 7.027265548706055, 7.027266025543213, 7.027267932891846, 7.027265548706055, 7.027266025543213, 7.027266502380371, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027266979217529, 7.027265548706055, 7.027265548706055, 7.027266025543213, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027265548706055, 7.027267932891846, 7.027265548706055, 7.027266502380371]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7974.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3232.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([75.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 147787.86204157217
Predicted: [12.87563705444336, 12.875632286071777, 12.875631332397461, 12.87563705444336, 12.87563705444336, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875619888305664, 12.87563419342041, 12.875632286071777, 12.875632286071777, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.875630378723145, 12.875635147094727, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.87563705444336, 12.875621795654297, 12.87563705444336, 12.875618934631348, 12.875618934631348, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875635147094727, 12.875628471374512, 12.875602722167969, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.875635147094727, 12.875635147094727, 12.875638008117676, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875633239746094, 12.87563419342041, 12.875626564025879, 12.875636100769043, 12.875632286071777, 12.875636100769043, 12.875636100769043, 12.875624656677246, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875631332397461, 12.875635147094727, 12.87563705444336, 12.875631332397461, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875628471374512, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875625610351562, 12.875630378723145, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875633239746094, 12.875636100769043, 12.875630378723145, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875632286071777, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875630378723145, 12.87563419342041, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875618934631348, 12.875621795654297, 12.87563705444336, 12.875632286071777, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875632286071777, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875614166259766, 12.875636100769043, 12.875638008117676, 12.87563419342041, 12.875551223754883, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.875630378723145, 12.875636100769043, 12.875635147094727, 12.875632286071777, 12.875636100769043, 12.875636100769043, 12.875631332397461, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875594139099121, 12.875635147094727, 12.875636100769043, 12.875621795654297, 12.875636100769043, 12.875629425048828, 12.875495910644531, 12.875636100769043, 12.875631332397461, 12.875636100769043, 12.875630378723145, 12.875632286071777, 12.87563419342041, 12.875632286071777, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875628471374512, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875494956970215, 12.875636100769043, 12.875636100769043, 12.875633239746094, 12.87563705444336, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875633239746094, 12.875615119934082, 12.875635147094727, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875628471374512, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.87563419342041, 12.875632286071777, 12.87563705444336, 12.875636100769043, 12.875615119934082, 12.875638008117676, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875633239746094, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.875636100769043, 12.875615119934082, 12.875636100769043, 12.87563705444336, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875630378723145, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875638008117676, 12.875636100769043, 12.875582695007324, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875621795654297, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875600814819336, 12.875626564025879, 12.875636100769043, 12.87563419342041, 12.875628471374512, 12.875636100769043, 12.87563419342041, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.875636100769043, 12.875638008117676, 12.87563705444336, 12.875636100769043, 12.875632286071777, 12.87563419342041, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875618934631348, 12.875636100769043, 12.875636100769043, 12.875638008117676, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875628471374512, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875630378723145, 12.875630378723145, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875638008117676, 12.87563419342041, 12.87561321258545, 12.875636100769043, 12.875636100769043, 12.875495910644531, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.87563705444336, 12.875635147094727, 12.875606536865234, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.87563419342041, 12.87563705444336, 12.875636100769043, 12.875631332397461, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875627517700195, 12.875635147094727, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.87563419342041, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875629425048828, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875632286071777, 12.875636100769043, 12.875638008117676, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875625610351562, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.87563705444336, 12.875627517700195, 12.87563705444336, 12.875596046447754, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.875636100769043, 12.875636100769043, 12.875632286071777, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875630378723145, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.87563419342041, 12.87563705444336, 12.875636100769043, 12.87563705444336, 12.875638008117676, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875626564025879, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043, 12.875611305236816, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875555992126465, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875632286071777, 12.875636100769043, 12.87563705444336, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.875633239746094, 12.875630378723145, 12.87563419342041, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875636100769043, 12.875636100769043, 12.875536918640137, 12.875631332397461, 12.875636100769043, 12.875628471374512, 12.875636100769043, 12.875636100769043, 12.875433921813965, 12.875633239746094, 12.87563419342041, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.875636100769043, 12.875624656677246, 12.875636100769043, 12.875636100769043, 12.87563705444336, 12.875638008117676, 12.87563419342041, 12.875632286071777, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875635147094727, 12.875636100769043, 12.87563705444336, 12.87563419342041, 12.875636100769043, 12.875636100769043, 12.875636100769043]
Actual: [tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([78.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([96.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([60.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1323.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3624.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([81.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 29671.580714682943
Predicted: [11.190611839294434, 11.190592765808105, 11.190634727478027, 11.19062328338623, 11.19052791595459, 11.190594673156738, 11.19050121307373, 11.190640449523926, 11.190367698669434, 11.19058895111084, 11.19058895111084, 11.190424919128418, 11.190488815307617, 11.189699172973633, 11.190552711486816, 11.190534591674805, 11.190608024597168, 11.190608024597168, 11.190552711486816, 11.190581321716309, 11.190508842468262, 11.190569877624512, 11.190606117248535, 11.190583229064941, 11.190424919128418, 11.1906099319458, 11.190555572509766, 11.190512657165527, 11.19056224822998, 11.190529823303223, 11.190311431884766, 11.190603256225586, 11.190625190734863, 11.19057559967041, 11.190577507019043, 11.190470695495605, 11.190619468688965, 11.1906099319458, 11.190507888793945, 11.190622329711914, 11.19054126739502, 11.190619468688965, 11.190610885620117, 11.190568923950195, 11.190590858459473, 11.1906099319458, 11.19054126739502, 11.190587043762207, 11.190604209899902, 11.190552711486816, 11.190585136413574, 11.190577507019043, 11.190620422363281, 11.190587043762207, 11.190491676330566, 11.190613746643066, 11.19052791595459, 11.190533638000488, 11.190574645996094, 11.190452575683594, 11.190485954284668, 11.190547943115234, 11.190564155578613, 11.19057559967041, 11.190569877624512, 11.1906099319458, 11.190617561340332, 11.190583229064941, 11.190533638000488, 11.190458297729492, 11.19040298461914, 11.19058895111084, 11.19034481048584, 11.19058895111084, 11.190576553344727, 11.190544128417969, 11.190590858459473, 11.19052791595459, 11.18963623046875, 11.190582275390625, 11.190585136413574, 11.190577507019043, 11.190560340881348, 11.190644264221191, 11.19053840637207, 11.190574645996094, 11.190461158752441, 11.190556526184082, 11.190606117248535, 11.190571784973145, 11.190571784973145, 11.190569877624512, 11.19034481048584, 11.190515518188477, 11.190598487854004, 11.190348625183105, 11.190459251403809, 11.190564155578613, 11.190579414367676, 11.190574645996094, 11.190608024597168, 11.190604209899902, 11.190376281738281, 11.190552711486816, 11.19046688079834, 11.19055461883545, 11.190567970275879, 11.190531730651855, 11.190625190734863, 11.190494537353516, 11.190567970275879, 11.190587043762207, 11.19059944152832, 11.190613746643066, 11.19050121307373, 11.190613746643066, 11.19047737121582, 11.19060230255127, 11.190495491027832, 11.189573287963867, 11.190572738647461, 11.190402030944824, 11.19058609008789, 11.190592765808105, 11.190157890319824, 11.190590858459473, 11.190600395202637, 11.190506935119629, 11.190510749816895, 11.190644264221191, 11.19060230255127, 11.190016746520996, 11.190519332885742, 11.190598487854004, 11.190579414367676, 11.190592765808105, 11.190632820129395, 11.190573692321777, 11.19057559967041, 11.190546035766602, 11.19056224822998, 11.190620422363281, 11.190629005432129, 11.190606117248535, 11.190604209899902, 11.190131187438965, 11.190386772155762, 11.190598487854004, 11.190443992614746, 11.190556526184082, 11.190510749816895, 11.190546989440918, 11.190629005432129, 11.190611839294434, 11.190579414367676, 11.190620422363281, 11.190555572509766, 11.190459251403809, 11.190537452697754, 11.190579414367676, 11.189742088317871, 11.190561294555664, 11.190600395202637, 11.190567970275879, 11.190604209899902, 11.1906156539917, 11.190632820129395, 11.19044017791748, 11.190607070922852, 11.190472602844238, 11.190577507019043, 11.190617561340332, 11.190587043762207, 11.19057559967041, 11.190587997436523, 11.190590858459473, 11.190625190734863, 11.190571784973145, 11.190567016601562, 11.19056224822998, 11.190596580505371, 11.190558433532715, 11.19060230255127, 11.190473556518555, 11.190568923950195, 11.190605163574219, 11.190559387207031, 11.190436363220215, 11.190567970275879, 11.190579414367676, 11.190518379211426, 11.19043254852295, 11.190604209899902, 11.19054889678955, 11.190552711486816, 11.190611839294434, 11.190619468688965, 11.190608024597168, 11.190591812133789, 11.189092636108398, 11.19040298461914, 11.19043254852295, 11.190597534179688, 11.190555572509766, 11.190516471862793, 11.190624237060547, 11.190598487854004, 11.190608024597168, 11.190585136413574, 11.190646171569824, 11.190619468688965, 11.190342903137207, 11.190587043762207, 11.190635681152344, 11.190581321716309, 11.190417289733887, 11.19062328338623, 11.190441131591797, 11.19062328338623, 11.190632820129395, 11.189539909362793, 11.190573692321777, 11.190566062927246, 11.19056224822998, 11.190495491027832, 11.19057559967041, 11.190610885620117, 11.190463066101074, 11.190519332885742, 11.190630912780762, 11.190625190734863, 11.190515518188477, 11.190496444702148, 11.19062328338623, 11.190407752990723, 11.19060230255127, 11.190560340881348, 11.19059944152832, 11.190540313720703, 11.190584182739258, 11.19062328338623, 11.190537452697754, 11.190478324890137, 11.19058895111084, 11.190587043762207, 11.190567970275879, 11.190605163574219, 11.19052791595459, 11.1906099319458, 11.190587043762207, 11.19053840637207, 11.190543174743652, 11.190583229064941, 11.190568923950195, 11.190597534179688, 11.190542221069336, 11.190574645996094, 11.190558433532715, 11.190619468688965, 11.189173698425293, 11.190640449523926, 11.190638542175293, 11.190587043762207, 11.190585136413574, 11.190564155578613, 11.190376281738281, 11.190604209899902, 11.190583229064941, 11.190594673156738, 11.190279960632324, 11.190582275390625, 11.190627098083496, 11.19049072265625, 11.19059944152832, 11.1896390914917, 11.190499305725098, 11.1906156539917, 11.190604209899902, 11.190595626831055, 11.189870834350586, 11.190627098083496, 11.190590858459473, 11.190597534179688, 11.190614700317383, 11.190568923950195, 11.190587997436523, 11.190566062927246, 11.1906099319458, 11.190594673156738, 11.190323829650879, 11.190604209899902, 11.190537452697754, 11.190585136413574, 11.190606117248535, 11.19060230255127, 11.190594673156738, 11.189719200134277, 11.190643310546875, 11.190606117248535, 11.190581321716309, 11.190585136413574, 11.190481185913086, 11.19061279296875, 11.190587043762207, 11.190576553344727, 11.19040584564209, 11.190413475036621, 11.190546989440918, 11.190579414367676, 11.190620422363281, 11.190542221069336, 11.190556526184082, 11.190592765808105, 11.189072608947754, 11.190489768981934, 11.190486907958984, 11.190535545349121, 11.190598487854004, 11.190591812133789, 11.190561294555664, 11.190563201904297, 11.190535545349121, 11.190625190734863, 11.190625190734863, 11.190531730651855, 11.190640449523926, 11.190339088439941, 11.190613746643066, 11.190600395202637, 11.190629005432129, 11.190539360046387, 11.190421104431152, 11.190415382385254, 11.190606117248535, 11.190361976623535, 11.190600395202637, 11.190592765808105, 11.190606117248535, 11.1906156539917, 11.190621376037598, 11.190594673156738, 11.190520286560059, 11.190610885620117, 11.190556526184082, 11.19011402130127, 11.190611839294434, 11.190398216247559, 11.190593719482422, 11.190610885620117, 11.190523147583008, 11.190619468688965, 11.19057559967041, 11.19060230255127, 11.190470695495605, 11.190590858459473, 11.190561294555664, 11.190423011779785, 11.1904878616333, 11.19054126739502, 11.190552711486816, 11.190573692321777, 11.190497398376465, 11.190592765808105, 11.190593719482422, 11.190601348876953, 11.190597534179688, 11.190601348876953, 11.190521240234375, 11.190569877624512, 11.19058895111084, 11.1906099319458, 11.190608024597168, 11.190520286560059, 11.190539360046387, 11.190606117248535, 11.19062328338623, 11.190600395202637, 11.190590858459473, 11.190593719482422, 11.189451217651367, 11.190604209899902, 11.190607070922852, 11.190571784973145, 11.190496444702148, 11.190617561340332, 11.190597534179688, 11.190598487854004, 11.190581321716309, 11.190539360046387, 11.190587043762207, 11.190598487854004, 11.190495491027832, 11.1906099319458, 11.190598487854004, 11.190468788146973, 11.190597534179688, 11.190583229064941, 11.190590858459473, 11.190464973449707, 11.190613746643066, 11.19054889678955, 11.190625190734863, 11.190475463867188, 11.190543174743652, 11.190580368041992, 11.190621376037598, 11.190546989440918, 11.190616607666016, 11.190607070922852, 11.190613746643066, 11.190508842468262, 11.190607070922852, 11.1906099319458, 11.190630912780762, 11.190564155578613, 11.190489768981934, 11.1906099319458, 11.190616607666016, 11.1904878616333, 11.190474510192871, 11.190598487854004, 11.190608024597168, 11.190503120422363, 11.190510749816895, 11.1906156539917, 11.189986228942871, 11.190546989440918, 11.190620422363281, 11.190550804138184, 11.190468788146973, 11.189482688903809, 11.190606117248535, 11.190463066101074, 11.19059944152832, 11.190608024597168, 11.190573692321777, 11.190594673156738, 11.190567016601562, 11.190043449401855, 11.19056224822998, 11.19059944152832, 11.190620422363281, 11.190564155578613, 11.190600395202637, 11.190567970275879, 11.19061279296875, 11.190592765808105, 11.190621376037598, 11.188841819763184, 11.190573692321777, 11.190600395202637, 11.190604209899902, 11.190574645996094, 11.190543174743652, 11.190560340881348, 11.190625190734863, 11.190597534179688, 11.190621376037598, 11.190568923950195, 11.190643310546875, 11.190577507019043, 11.190594673156738, 11.190552711486816, 11.19057559967041, 11.190388679504395, 11.19028377532959, 11.19060230255127, 11.19060230255127, 11.190597534179688, 11.188925743103027, 11.190617561340332, 11.190502166748047, 11.190495491027832, 11.189737319946289, 11.190574645996094, 11.190567970275879, 11.190598487854004, 11.190567970275879, 11.190526008605957, 11.18966293334961, 11.190611839294434, 11.190613746643066, 11.19055461883545, 11.1906099319458, 11.190574645996094, 11.190594673156738, 11.1906156539917, 11.190550804138184, 11.190606117248535, 11.19040584564209, 11.190634727478027, 11.190594673156738, 11.190524101257324, 11.190576553344727, 11.190604209899902, 11.190571784973145, 11.190613746643066, 11.190606117248535, 11.190557479858398, 11.190561294555664]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([130.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1020.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2178.6412953743234
Predicted: [10.212834358215332, 10.212809562683105, 10.212830543518066, 10.212860107421875, 10.212784767150879, 10.212794303894043, 10.212845802307129, 10.212740898132324, 10.212821006774902, 10.212848663330078, 10.212790489196777, 10.212728500366211, 10.212746620178223, 10.21269702911377, 10.212838172912598, 10.212849617004395, 10.212815284729004, 10.212800025939941, 10.212838172912598, 10.212790489196777, 10.212775230407715, 10.212677955627441, 10.212847709655762, 10.212798118591309, 10.212841987609863, 10.212838172912598, 10.212834358215332, 10.212793350219727, 10.212702751159668, 10.212738990783691, 10.212698936462402, 10.212824821472168, 10.212817192077637, 10.212843894958496, 10.212836265563965, 10.212835311889648, 10.21277904510498, 10.212773323059082, 10.209525108337402, 10.212803840637207, 10.212811470031738, 10.212824821472168, 10.212834358215332, 10.212798118591309, 10.212825775146484, 10.212664604187012, 10.21279239654541, 10.21280574798584, 10.212810516357422, 10.2128267288208, 10.212821960449219, 10.212847709655762, 10.212809562683105, 10.212810516357422, 10.212833404541016, 10.212834358215332, 10.212822914123535, 10.21281623840332, 10.212845802307129, 10.21281909942627, 10.212799072265625, 10.212761878967285, 10.212848663330078, 10.212841987609863, 10.21284008026123, 10.212845802307129, 10.212786674499512, 10.212804794311523, 10.212788581848145, 10.212815284729004, 10.212815284729004, 10.21273136138916, 10.212862968444824, 10.212821960449219, 10.212836265563965, 10.212801933288574, 10.212821006774902, 10.212800025939941, 10.212559700012207, 10.212806701660156, 10.212773323059082, 10.212821006774902, 10.212790489196777, 10.212822914123535, 10.212815284729004, 10.212677955627441, 10.212747573852539, 10.212822914123535, 10.212836265563965, 10.212841987609863, 10.212833404541016, 10.21264934539795, 10.21282958984375, 10.212836265563965, 10.212830543518066, 10.212782859802246, 10.212843894958496, 10.212827682495117, 10.212820053100586, 10.212828636169434, 10.212864875793457, 10.212779998779297, 10.212801933288574, 10.212833404541016, 10.212838172912598, 10.212855339050293, 10.212782859802246, 10.212820053100586, 10.212693214416504, 10.212779998779297, 10.212825775146484, 10.212737083435059, 10.212817192077637, 10.21282958984375, 10.212685585021973, 10.212828636169434, 10.212830543518066, 10.212807655334473, 10.212834358215332, 10.212833404541016, 10.212831497192383, 10.2128324508667, 10.212787628173828, 10.2128324508667, 10.212841033935547, 10.212782859802246, 10.212753295898438, 10.211689949035645, 10.212800025939941, 10.212828636169434, 10.212843894958496, 10.212841987609863, 10.212601661682129, 10.21282958984375, 10.212824821472168, 10.21281909942627, 10.212817192077637, 10.212809562683105, 10.212845802307129, 10.21231746673584, 10.212825775146484, 10.212846755981445, 10.212762832641602, 10.212838172912598, 10.212800025939941, 10.212834358215332, 10.21284008026123, 10.212854385375977, 10.212777137756348, 10.212843894958496, 10.212817192077637, 10.212782859802246, 10.2127685546875, 10.212780952453613, 10.21277904510498, 10.212843894958496, 10.212759971618652, 10.21277904510498, 10.21271800994873, 10.21280574798584, 10.2128324508667, 10.212809562683105, 10.212834358215332, 10.212830543518066, 10.212833404541016, 10.212821960449219, 10.212825775146484, 10.212807655334473, 10.212431907653809, 10.21286678314209, 10.21281909942627, 10.2128267288208, 10.21285343170166, 10.212841987609863, 10.212845802307129, 10.212827682495117, 10.21275806427002, 10.212822914123535, 10.2127685546875, 10.212698936462402, 10.212790489196777, 10.212770462036133, 10.212838172912598, 10.212821960449219, 10.212777137756348, 10.21279239654541, 10.212803840637207, 10.2128267288208, 10.212817192077637, 10.212761878967285, 10.212723731994629, 10.212843894958496, 10.212847709655762, 10.21286678314209, 10.212867736816406, 10.212752342224121, 10.21284008026123, 10.212834358215332, 10.212846755981445, 10.212808609008789, 10.212780952453613, 10.212838172912598, 10.212772369384766, 10.212798118591309, 10.212839126586914, 10.212843894958496, 10.212723731994629, 10.212349891662598, 10.21280574798584, 10.212862014770508, 10.212793350219727, 10.212830543518066, 10.212657928466797, 10.212679862976074, 10.212793350219727, 10.212830543518066, 10.212843894958496, 10.212822914123535, 10.212727546691895, 10.2128267288208, 10.212838172912598, 10.212821960449219, 10.212658882141113, 10.212729454040527, 10.212824821472168, 10.212723731994629, 10.212847709655762, 10.212838172912598, 10.212841987609863, 10.21284008026123, 10.212784767150879, 10.212833404541016, 10.212833404541016, 10.212830543518066, 10.212762832641602, 10.212815284729004, 10.212808609008789, 10.212799072265625, 10.212711334228516, 10.212815284729004, 10.212834358215332, 10.212815284729004, 10.212821006774902, 10.212836265563965, 10.212849617004395, 10.212843894958496, 10.21284008026123, 10.212626457214355, 10.21284008026123, 10.212857246398926, 10.212822914123535, 10.212824821472168, 10.212830543518066, 10.21264362335205, 10.21276569366455, 10.212811470031738, 10.212838172912598, 10.212836265563965, 10.212834358215332, 10.2128267288208, 10.212735176086426, 10.212684631347656, 10.212542533874512, 10.212843894958496, 10.212736129760742, 10.212838172912598, 10.212810516357422, 10.212796211242676, 10.212811470031738, 10.212841033935547, 10.21277904510498, 10.212847709655762, 10.212522506713867, 10.212794303894043, 10.212830543518066, 10.212811470031738, 10.212809562683105, 10.212824821472168, 10.212845802307129, 10.21285343170166, 10.212815284729004, 10.212782859802246, 10.21265983581543, 10.212803840637207, 10.21279239654541, 10.212836265563965, 10.212828636169434, 10.212773323059082, 10.212798118591309, 10.212815284729004, 10.212843894958496, 10.212827682495117, 10.212676048278809, 10.21285343170166, 10.212691307067871, 10.212800979614258, 10.212830543518066, 10.212843894958496, 10.21280574798584, 10.212807655334473, 10.2127685546875, 10.212811470031738, 10.212782859802246, 10.2128324508667, 10.212867736816406, 10.212788581848145, 10.212825775146484, 10.212752342224121, 10.212796211242676, 10.21278190612793, 10.212759017944336, 10.212822914123535, 10.212784767150879, 10.212859153747559, 10.212808609008789, 10.212746620178223, 10.212760925292969, 10.212777137756348, 10.212841987609863, 10.212735176086426, 10.212623596191406, 10.212785720825195, 10.212821960449219, 10.212759971618652, 10.212846755981445, 10.212825775146484, 10.211894035339355, 10.212813377380371, 10.21280574798584, 10.212782859802246, 10.212806701660156, 10.212702751159668, 10.212820053100586, 10.212773323059082, 10.21277904510498, 10.212859153747559, 10.2127103805542, 10.212846755981445, 10.212834358215332, 10.212843894958496, 10.212766647338867, 10.21277141571045, 10.212729454040527, 10.212830543518066, 10.212672233581543, 10.212836265563965, 10.212817192077637, 10.212807655334473, 10.212809562683105, 10.212629318237305, 10.212817192077637, 10.212594032287598, 10.2128324508667, 10.212846755981445, 10.212634086608887, 10.212815284729004, 10.212745666503906, 10.212775230407715, 10.212862968444824, 10.21284294128418, 10.212841987609863, 10.212735176086426, 10.212822914123535, 10.212779998779297, 10.212782859802246, 10.212752342224121, 10.21279525756836, 10.212782859802246, 10.212740898132324, 10.212316513061523, 10.212833404541016, 10.212828636169434, 10.212767601013184, 10.212865829467773, 10.212849617004395, 10.212830543518066, 10.212762832641602, 10.212812423706055, 10.212824821472168, 10.21275520324707, 10.212814331054688, 10.212525367736816, 10.212764739990234, 10.212809562683105, 10.21279525756836, 10.212811470031738, 10.212870597839355, 10.212836265563965, 10.212814331054688, 10.212719917297363, 10.212645530700684, 10.212825775146484, 10.212817192077637, 10.212830543518066, 10.212335586547852, 10.21285343170166, 10.21269702911377, 10.212773323059082, 10.212775230407715, 10.212698936462402, 10.212813377380371, 10.212845802307129, 10.21281909942627, 10.21277904510498, 10.212828636169434, 10.212845802307129, 10.212576866149902, 10.21285343170166, 10.2128324508667, 10.212824821472168, 10.212512016296387, 10.2128324508667, 10.2128324508667, 10.212841987609863, 10.2127046585083, 10.212785720825195, 10.212801933288574, 10.212783813476562, 10.2128324508667, 10.212811470031738, 10.21264362335205, 10.212811470031738, 10.212851524353027, 10.212846755981445, 10.212787628173828, 10.212833404541016, 10.212827682495117, 10.212800025939941, 10.212798118591309, 10.21274185180664, 10.212679862976074, 10.212782859802246, 10.21277904510498, 10.212836265563965, 10.212798118591309, 10.212808609008789, 10.212857246398926, 10.212800025939941, 10.212767601013184, 10.212836265563965, 10.21267032623291, 10.21285343170166, 10.2128267288208, 10.212800979614258, 10.2128324508667, 10.212814331054688, 10.212817192077637, 10.212775230407715, 10.212808609008789, 10.212796211242676, 10.212800025939941, 10.212605476379395, 10.21275806427002, 10.212836265563965, 10.211530685424805, 10.212830543518066, 10.212815284729004, 10.211480140686035, 10.212809562683105, 10.212691307067871, 10.212834358215332, 10.212719917297363, 10.212777137756348, 10.212788581848145, 10.212809562683105, 10.212827682495117, 10.212803840637207, 10.212817192077637, 10.212782859802246, 10.212821006774902, 10.212833404541016, 10.212855339050293, 10.212833404541016, 10.212799072265625, 10.212822914123535, 10.212833404541016, 10.212685585021973, 10.212833404541016, 10.212754249572754, 10.212806701660156, 10.212843894958496, 10.21251392364502, 10.212418556213379, 10.212545394897461, 10.212834358215332, 10.212838172912598, 10.212812423706055, 10.212865829467773, 10.212806701660156, 10.212767601013184, 10.212831497192383, 10.212733268737793, 10.212824821472168, 10.212725639343262, 10.212796211242676, 10.212674140930176, 10.212824821472168, 10.212807655334473, 10.212608337402344, 10.212789535522461]
Actual: [tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([38.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([47.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([133.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 111.05018649093961
Predicted: [14.104938507080078, 14.10495376586914, 14.104923248291016, 14.10487174987793, 14.10494327545166, 14.104607582092285, 14.104951858520508, 14.10495376586914, 14.104944229125977, 14.10490608215332, 14.104952812194824, 14.104951858520508, 14.104930877685547, 14.104793548583984, 14.103965759277344, 14.104813575744629, 14.104921340942383, 14.104918479919434, 14.104954719543457, 14.104955673217773, 14.104951858520508, 14.104938507080078, 14.104949951171875, 14.104925155639648, 14.104955673217773, 14.104942321777344, 14.104954719543457, 14.104942321777344, 14.104930877685547, 14.104948997497559, 14.10493278503418, 14.104955673217773, 14.104951858520508, 14.104954719543457, 14.104955673217773, 14.10494613647461, 14.10494327545166, 14.104889869689941, 14.104954719543457, 14.104935646057129, 14.104949951171875, 14.104938507080078, 14.104944229125977, 14.104947090148926, 14.104944229125977, 14.104951858520508, 14.104937553405762, 14.104938507080078, 14.104950904846191, 14.104949951171875, 14.10495376586914, 14.104951858520508, 14.104949951171875, 14.10495376586914, 14.104954719543457, 14.10494613647461, 14.104951858520508, 14.10495662689209, 14.10495376586914, 14.10495376586914, 14.104925155639648, 14.104949951171875, 14.104948043823242, 14.104954719543457, 14.104955673217773, 14.104846954345703, 14.104949951171875, 14.104949951171875, 14.10491943359375, 14.104927062988281, 14.104951858520508, 14.104938507080078, 14.104949951171875, 14.104954719543457, 14.10495376586914, 14.104952812194824, 14.104948043823242, 14.10494613647461, 14.104951858520508, 14.104944229125977, 14.104949951171875, 14.10495662689209, 14.104940414428711, 14.10495662689209, 14.104925155639648, 14.104939460754395, 14.104951858520508, 14.104954719543457, 14.104949951171875, 14.10255241394043, 14.104951858520508, 14.10494613647461, 14.104955673217773, 14.104926109313965, 14.104948043823242, 14.104928970336914, 14.104951858520508, 14.104955673217773, 14.104955673217773, 14.104948997497559, 14.104941368103027, 14.104924201965332, 14.10495376586914, 14.104852676391602, 14.10489273071289, 14.104949951171875, 14.102773666381836, 14.104931831359863, 14.1049165725708, 14.10495376586914, 14.104940414428711, 14.10495376586914, 14.104942321777344, 14.104955673217773, 14.10493278503418, 14.104954719543457, 14.104950904846191, 14.10495376586914, 14.104948043823242, 14.104936599731445, 14.104951858520508, 14.104940414428711, 14.104940414428711, 14.104955673217773, 14.104951858520508, 14.104865074157715, 14.104944229125977, 14.104944229125977, 14.104907989501953, 14.104947090148926, 14.104936599731445, 14.104944229125977, 14.10495376586914, 14.104950904846191, 14.104873657226562, 14.10495376586914, 14.104942321777344, 14.104877471923828, 14.104942321777344, 14.104948997497559, 14.104913711547852, 14.104949951171875, 14.104924201965332, 14.104942321777344, 14.104944229125977, 14.104955673217773, 14.10495376586914, 14.104955673217773, 14.10495662689209, 14.104951858520508, 14.10495376586914, 14.104955673217773, 14.104952812194824, 14.104951858520508, 14.104896545410156, 14.104951858520508, 14.104951858520508, 14.10495376586914, 14.104951858520508, 14.10494613647461, 14.104948997497559, 14.104936599731445, 14.10495376586914, 14.104948043823242, 14.104959487915039, 14.104957580566406, 14.104939460754395, 14.104927062988281, 14.104914665222168, 14.104938507080078, 14.104948043823242, 14.104896545410156, 14.104955673217773, 14.104937553405762, 14.104950904846191, 14.104944229125977, 14.104955673217773, 14.104954719543457, 14.104957580566406, 14.104951858520508, 14.104950904846191, 14.104859352111816, 14.104949951171875, 14.104955673217773, 14.104955673217773, 14.104944229125977, 14.104941368103027, 14.104954719543457, 14.10490608215332, 14.104949951171875, 14.104942321777344, 14.104939460754395, 14.104948997497559, 14.104944229125977, 14.104942321777344, 14.10492992401123, 14.104951858520508, 14.104923248291016, 14.104931831359863, 14.10495376586914, 14.10495376586914, 14.10494613647461, 14.104934692382812, 14.104951858520508, 14.10495376586914, 14.104938507080078, 14.10495376586914, 14.104952812194824, 14.10494613647461, 14.104955673217773, 14.104957580566406, 14.104711532592773, 14.104920387268066, 14.104952812194824, 14.104948043823242, 14.104792594909668, 14.104954719543457, 14.10495376586914, 14.10494613647461, 14.10491943359375, 14.104902267456055, 14.104954719543457, 14.104873657226562, 14.104955673217773, 14.104952812194824, 14.104952812194824, 14.1049222946167, 14.104907989501953, 14.104934692382812, 14.104955673217773, 14.10493278503418, 14.10494613647461, 14.104926109313965, 14.104955673217773, 14.104938507080078, 14.104949951171875, 14.104888916015625, 14.104942321777344, 14.10494613647461, 14.104921340942383, 14.10495376586914, 14.104938507080078, 14.104949951171875, 14.104948997497559, 14.104957580566406, 14.10494613647461, 14.104944229125977, 14.104940414428711, 14.104948043823242, 14.104872703552246, 14.104883193969727, 14.10494613647461, 14.10495376586914, 14.104940414428711, 14.104951858520508, 14.104950904846191, 14.104947090148926, 14.10494327545166, 14.104945182800293, 14.104948997497559, 14.104942321777344, 14.104948043823242, 14.10453987121582, 14.104948043823242, 14.1047945022583, 14.10495376586914, 14.10489559173584, 14.104955673217773, 14.10495376586914, 14.104915618896484, 14.104951858520508, 14.104952812194824, 14.104927062988281, 14.10494613647461, 14.104949951171875, 14.104936599731445, 14.10495376586914, 14.104952812194824, 14.104957580566406, 14.10491943359375, 14.104954719543457, 14.104317665100098, 14.10495376586914, 14.104921340942383, 14.104957580566406, 14.104955673217773, 14.10494327545166, 14.104955673217773, 14.104949951171875, 14.104948997497559, 14.104955673217773, 14.10490608215332, 14.104925155639648, 14.104936599731445, 14.10495376586914, 14.104950904846191, 14.10495376586914, 14.104951858520508, 14.104947090148926, 14.104923248291016, 14.103212356567383, 14.104955673217773, 14.104894638061523, 14.104940414428711, 14.104918479919434, 14.104934692382812, 14.10495376586914, 14.10495376586914, 14.10494613647461, 14.10482406616211, 14.104936599731445, 14.104955673217773, 14.104950904846191, 14.104945182800293, 14.104951858520508, 14.104921340942383, 14.104947090148926, 14.104928970336914, 14.104934692382812, 14.10495376586914, 14.104938507080078, 14.10495376586914, 14.104907989501953, 14.104921340942383, 14.10495376586914, 14.104900360107422, 14.10495376586914, 14.104941368103027, 14.104955673217773, 14.104621887207031, 14.104928970336914, 14.104955673217773, 14.104931831359863, 14.10495376586914, 14.104944229125977, 14.104954719543457, 14.104947090148926, 14.104948043823242, 14.10495376586914, 14.104952812194824, 14.104938507080078, 14.10495376586914, 14.10495376586914, 14.104948997497559, 14.104937553405762, 14.104940414428711, 14.104942321777344, 14.104944229125977, 14.104951858520508, 14.10494613647461, 14.104934692382812, 14.104948043823242, 14.104938507080078, 14.104955673217773, 14.104952812194824, 14.104883193969727, 14.104942321777344, 14.104898452758789, 14.10494613647461, 14.10494613647461, 14.10495376586914, 14.10495376586914, 14.104902267456055, 14.104952812194824, 14.104948043823242, 14.104951858520508, 14.104955673217773, 14.104945182800293, 14.104957580566406, 14.104923248291016, 14.104951858520508, 14.104902267456055, 14.104888916015625, 14.104947090148926, 14.104954719543457, 14.104931831359863, 14.104942321777344, 14.104951858520508, 14.104952812194824, 14.10495662689209, 14.10490894317627, 14.104947090148926, 14.104948997497559, 14.104948043823242, 14.104954719543457, 14.104949951171875, 14.104948997497559, 14.10495376586914, 14.104949951171875, 14.104934692382812, 14.104955673217773, 14.10495376586914, 14.104952812194824, 14.104848861694336, 14.104928970336914, 14.10494613647461, 14.104954719543457, 14.104951858520508, 14.10490608215332, 14.104944229125977, 14.10494327545166, 14.104952812194824, 14.104949951171875, 14.104816436767578, 14.104948043823242, 14.10495662689209, 14.104888916015625, 14.104955673217773, 14.104942321777344, 14.104955673217773, 14.104947090148926, 14.104951858520508, 14.10495376586914, 14.104955673217773, 14.10494613647461, 14.104949951171875, 14.104949951171875, 14.104954719543457, 14.104759216308594, 14.104949951171875, 14.104948997497559, 14.1048583984375, 14.10495376586914, 14.104949951171875, 14.104923248291016, 14.104564666748047, 14.104948043823242, 14.104913711547852, 14.104928970336914, 14.104896545410156, 14.10474681854248, 14.10495376586914, 14.104950904846191, 14.104949951171875, 14.103410720825195, 14.10495376586914, 14.104931831359863, 14.104928970336914, 14.104950904846191, 14.10493278503418, 14.104951858520508, 14.104944229125977, 14.104928970336914, 14.10495376586914, 14.104949951171875, 14.104917526245117, 14.104915618896484, 14.104955673217773, 14.104949951171875, 14.104938507080078, 14.104940414428711, 14.104898452758789, 14.10495376586914, 14.104784965515137, 14.104936599731445, 14.104944229125977, 14.10495376586914, 14.10494613647461, 14.104950904846191, 14.104955673217773, 14.104948043823242, 14.104949951171875, 14.104947090148926, 14.104949951171875, 14.104928970336914, 14.10495376586914, 14.104951858520508, 14.104945182800293, 14.104936599731445, 14.104947090148926, 14.104879379272461, 14.104951858520508, 14.104789733886719, 14.104949951171875, 14.104939460754395, 14.104949951171875, 14.10494613647461, 14.104948043823242, 14.104942321777344, 14.104910850524902, 14.10495376586914, 14.104949951171875, 14.104955673217773, 14.104952812194824, 14.104862213134766, 14.104955673217773, 14.104949951171875, 14.10495376586914, 14.104955673217773, 14.104949951171875, 14.10435676574707, 14.104951858520508, 14.104873657226562, 14.104938507080078, 14.1049222946167, 14.104827880859375, 14.10494327545166, 14.104950904846191, 14.104894638061523, 14.104945182800293]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([233.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3397.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6648.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([74.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10080.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([26670.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1734879.423181356
Predicted: [14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599349021911621, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599356651306152, 14.599356651306152, 14.59935474395752, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599350929260254, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599342346191406, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.59935474395752, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599344253540039, 14.599355697631836, 14.59935188293457, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599353790283203, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599357604980469, 14.599357604980469, 14.59935474395752, 14.599355697631836, 14.59935188293457, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599332809448242, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599356651306152, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599353790283203, 14.599356651306152, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.59935474395752, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.59935474395752, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599357604980469, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.59935474395752, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599357604980469, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.59935188293457, 14.599346160888672, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.59935474395752, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599353790283203, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599356651306152, 14.59935474395752, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599081993103027, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599355697631836, 14.599356651306152, 14.599356651306152, 14.599355697631836, 14.599355697631836]
Actual: [tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1128.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([67.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([84.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([49.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([159.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64)]
MSE: 2703.7264844651495
Predicted: [15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884804725646973, 15.884806632995605, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884808540344238, 15.884807586669922, 15.884805679321289, 15.884805679321289, 15.884805679321289, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.88479995727539, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884796142578125, 15.88479995727539, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884801864624023, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884805679321289, 15.884807586669922, 15.884800910949707, 15.88479995727539, 15.884805679321289, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884804725646973, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884801864624023, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884804725646973, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884797096252441, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884806632995605, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884784698486328, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884803771972656, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884806632995605, 15.884796142578125, 15.884807586669922, 15.884804725646973, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.88480281829834, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.88479995727539, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884801864624023, 15.884806632995605, 15.884805679321289, 15.884806632995605, 15.884807586669922, 15.884805679321289, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922, 15.884807586669922]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2097.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([636.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([120.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 9654.049620596044
Predicted: [13.747319221496582, 13.747316360473633, 13.747319221496582, 13.747313499450684, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.747318267822266, 13.747315406799316, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747316360473633, 13.747319221496582, 13.747314453125, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747308731079102, 13.747319221496582, 13.747319221496582, 13.747258186340332, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747316360473633, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747281074523926, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747315406799316, 13.74731731414795, 13.747319221496582, 13.747313499450684, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747316360473633, 13.747316360473633, 13.747319221496582, 13.747318267822266, 13.74731159210205, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.74731731414795, 13.747319221496582, 13.747315406799316, 13.74731731414795, 13.747319221496582, 13.747241973876953, 13.747313499450684, 13.74731731414795, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.74731731414795, 13.74730396270752, 13.747319221496582, 13.747241020202637, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747300148010254, 13.74726676940918, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747309684753418, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.74731159210205, 13.747319221496582, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747309684753418, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747305870056152, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747316360473633, 13.747315406799316, 13.747319221496582, 13.747318267822266, 13.74731159210205, 13.747314453125, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747313499450684, 13.747318267822266, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731159210205, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731159210205, 13.747316360473633, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747296333312988, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747321128845215, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.74731731414795, 13.747319221496582, 13.747318267822266, 13.747305870056152, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.747321128845215, 13.747304916381836, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747313499450684, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747316360473633, 13.747319221496582, 13.747319221496582, 13.747316360473633, 13.747318267822266, 13.747316360473633, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747206687927246, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747315406799316, 13.747318267822266, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747313499450684, 13.74731731414795, 13.747307777404785, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747281074523926, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747316360473633, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747315406799316, 13.747319221496582, 13.747319221496582, 13.747316360473633, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747315406799316, 13.74731731414795, 13.747319221496582, 13.747318267822266, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747316360473633, 13.747314453125, 13.74731731414795, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747321128845215, 13.747318267822266, 13.747314453125, 13.747319221496582, 13.747318267822266, 13.747315406799316, 13.747319221496582, 13.747308731079102, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747321128845215, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747314453125, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747315406799316, 13.74731731414795, 13.747292518615723, 13.74731731414795, 13.74731731414795, 13.747300148010254, 13.747309684753418, 13.74731731414795, 13.747288703918457, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747309684753418, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747315406799316, 13.747318267822266, 13.747319221496582, 13.747315406799316, 13.747316360473633, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747310638427734, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.74731731414795, 13.74731731414795, 13.747315406799316, 13.747318267822266, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747318267822266, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.747319221496582, 13.74731731414795, 13.747319221496582]
Actual: [tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([82.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([74.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([745.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([104.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([591.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 1910.6139863587828
Predicted: [14.151762008666992, 14.151782989501953, 14.151766777038574, 14.151800155639648, 14.15177059173584, 14.15176773071289, 14.151761054992676, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151766777038574, 14.15176010131836, 14.151761054992676, 14.151762008666992, 14.151762008666992, 14.151764869689941, 14.151761054992676, 14.151762008666992, 14.151759147644043, 14.151765823364258, 14.151838302612305, 14.15176010131836, 14.151762962341309, 14.15176773071289, 14.151782989501953, 14.151765823364258, 14.151762008666992, 14.151762008666992, 14.15176010131836, 14.151765823364258, 14.151762962341309, 14.151762008666992, 14.151765823364258, 14.151762962341309, 14.151762008666992, 14.151771545410156, 14.151762008666992, 14.151762008666992, 14.151762008666992, 14.151765823364258, 14.151762962341309, 14.151764869689941, 14.151761054992676, 14.151762962341309, 14.151765823364258, 14.151762008666992, 14.15176010131836, 14.15176010131836, 14.151925086975098, 14.151784896850586, 14.151765823364258, 14.15176010131836, 14.151766777038574, 14.15176773071289, 14.151784896850586, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151763916015625, 14.151784896850586, 14.151762008666992, 14.15176010131836, 14.151779174804688, 14.151762962341309, 14.15176010131836, 14.15176010131836, 14.151762008666992, 14.151761054992676, 14.151762008666992, 14.151762008666992, 14.15177059173584, 14.151762962341309, 14.151762962341309, 14.15176010131836, 14.151765823364258, 14.151763916015625, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151762008666992, 14.151762962341309, 14.151779174804688, 14.151762962341309, 14.151800155639648, 14.151764869689941, 14.151761054992676, 14.151765823364258, 14.151762008666992, 14.15176010131836, 14.151762962341309, 14.15176010131836, 14.151763916015625, 14.15176010131836, 14.15176010131836, 14.151763916015625, 14.15177059173584, 14.151762008666992, 14.15176010131836, 14.15176773071289, 14.151759147644043, 14.15176010131836, 14.151762008666992, 14.151762962341309, 14.151762008666992, 14.151759147644043, 14.151762008666992, 14.151762962341309, 14.151763916015625, 14.151771545410156, 14.15176773071289, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151771545410156, 14.151759147644043, 14.151762008666992, 14.15176773071289, 14.151762008666992, 14.151762008666992, 14.15176010131836, 14.15176010131836, 14.151762008666992, 14.151761054992676, 14.151759147644043, 14.15176010131836, 14.151762962341309, 14.15176010131836, 14.151762962341309, 14.151762008666992, 14.151769638061523, 14.15176773071289, 14.151763916015625, 14.151768684387207, 14.151759147644043, 14.151764869689941, 14.151763916015625, 14.151765823364258, 14.15177059173584, 14.151761054992676, 14.15176010131836, 14.151762962341309, 14.151779174804688, 14.151765823364258, 14.151762962341309, 14.151762008666992, 14.151765823364258, 14.151765823364258, 14.151762008666992, 14.151771545410156, 14.15176010131836, 14.15176010131836, 14.151763916015625, 14.15176010131836, 14.15176773071289, 14.151761054992676, 14.151761054992676, 14.151761054992676, 14.151759147644043, 14.151761054992676, 14.151768684387207, 14.151761054992676, 14.151762962341309, 14.151761054992676, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151764869689941, 14.15176010131836, 14.151765823364258, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151773452758789, 14.15177059173584, 14.151762008666992, 14.151771545410156, 14.151779174804688, 14.151762008666992, 14.151762962341309, 14.151762962341309, 14.151763916015625, 14.151763916015625, 14.151762008666992, 14.151761054992676, 14.151761054992676, 14.151764869689941, 14.151759147644043, 14.151763916015625, 14.151761054992676, 14.15176010131836, 14.151832580566406, 14.151764869689941, 14.151761054992676, 14.151815414428711, 14.151761054992676, 14.1520357131958, 14.151985168457031, 14.151863098144531, 14.151764869689941, 14.15176010131836, 14.15176010131836, 14.151763916015625, 14.151762962341309, 14.151762008666992, 14.151759147644043, 14.151765823364258, 14.151762008666992, 14.151769638061523, 14.15176773071289, 14.151765823364258, 14.151762962341309, 14.151769638061523, 14.15176010131836, 14.151762962341309, 14.15176010131836, 14.151761054992676, 14.15177059173584, 14.151762962341309, 14.15176010131836, 14.151759147644043, 14.15176010131836, 14.151763916015625, 14.151765823364258, 14.15178108215332, 14.151773452758789, 14.151762962341309, 14.151763916015625, 14.15176010131836, 14.151775360107422, 14.151778221130371, 14.151763916015625, 14.151762962341309, 14.151762962341309, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151769638061523, 14.151761054992676, 14.151765823364258, 14.151761054992676, 14.151764869689941, 14.151768684387207, 14.15176010131836, 14.15176010131836, 14.151762962341309, 14.151762962341309, 14.15176010131836, 14.15176010131836, 14.151759147644043, 14.15176010131836, 14.151761054992676, 14.151771545410156, 14.151763916015625, 14.15186882019043, 14.151769638061523, 14.151762962341309, 14.151762962341309, 14.151762008666992, 14.15176010131836, 14.151777267456055, 14.151765823364258, 14.151773452758789, 14.15176010131836, 14.151759147644043, 14.15176773071289, 14.151765823364258, 14.15176010131836, 14.151763916015625, 14.15176010131836, 14.151753425598145, 14.151762008666992, 14.15176010131836, 14.151768684387207, 14.151761054992676, 14.151766777038574, 14.15176010131836, 14.151758193969727, 14.151761054992676, 14.151765823364258, 14.151762962341309, 14.151758193969727, 14.151758193969727, 14.151769638061523, 14.15176010131836, 14.151779174804688, 14.15176010131836, 14.15176010131836, 14.151762962341309, 14.15176010131836, 14.151765823364258, 14.151765823364258, 14.151771545410156, 14.151765823364258, 14.151763916015625, 14.151763916015625, 14.151765823364258, 14.151762008666992, 14.151806831359863, 14.151762008666992, 14.151762008666992, 14.151762962341309, 14.151776313781738, 14.151769638061523, 14.151763916015625, 14.151765823364258, 14.151773452758789, 14.151762008666992, 14.151764869689941, 14.151762008666992, 14.151768684387207, 14.151766777038574, 14.15176773071289, 14.15176010131836, 14.151762962341309, 14.15176010131836, 14.15176773071289, 14.151763916015625, 14.151762962341309, 14.151759147644043, 14.151771545410156, 14.15176010131836, 14.151762008666992, 14.15176010131836, 14.151762008666992, 14.151762008666992, 14.151762008666992, 14.151773452758789, 14.151765823364258, 14.151762008666992, 14.15176010131836, 14.151761054992676, 14.151759147644043, 14.15176010131836, 14.151763916015625, 14.151790618896484, 14.151769638061523, 14.15176010131836, 14.15176010131836, 14.151759147644043, 14.151758193969727, 14.151759147644043, 14.151761054992676, 14.151762008666992, 14.151765823364258, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151763916015625, 14.15176010131836, 14.151773452758789, 14.151762962341309, 14.151761054992676, 14.151766777038574, 14.15176010131836, 14.151762008666992, 14.151775360107422, 14.151769638061523, 14.151761054992676, 14.15176010131836, 14.15176010131836, 14.151765823364258, 14.15176010131836, 14.15176010131836, 14.151763916015625, 14.151763916015625, 14.151761054992676, 14.151762008666992, 14.15176010131836, 14.151761054992676, 14.151762008666992, 14.15176773071289, 14.151766777038574, 14.15176010131836, 14.151840209960938, 14.15176773071289, 14.151792526245117, 14.151763916015625, 14.151778221130371, 14.151761054992676, 14.151809692382812, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151764869689941, 14.15176010131836, 14.15176010131836, 14.15176010131836, 14.151762962341309, 14.151777267456055, 14.15176010131836, 14.151761054992676, 14.151762962341309, 14.151761054992676, 14.151761054992676, 14.151765823364258, 14.15176010131836, 14.151762008666992, 14.151768684387207, 14.151761054992676, 14.151765823364258, 14.151762962341309, 14.151762008666992, 14.151762008666992, 14.151762008666992, 14.151761054992676, 14.151762962341309, 14.151761054992676, 14.151763916015625, 14.15176010131836, 14.151761054992676, 14.15176010131836, 14.151771545410156, 14.151836395263672, 14.151762008666992, 14.15176010131836, 14.151762962341309, 14.15176010131836, 14.151768684387207, 14.15176010131836, 14.151763916015625, 14.151762008666992, 14.15176010131836, 14.15176773071289, 14.15176010131836, 14.151786804199219, 14.15176773071289, 14.15184211730957, 14.151761054992676, 14.15176010131836, 14.151766777038574, 14.15176010131836, 14.151762962341309, 14.15176773071289, 14.151998519897461, 14.151764869689941, 14.151761054992676, 14.151786804199219, 14.15176010131836, 14.151761054992676, 14.151762008666992, 14.151775360107422, 14.15176010131836, 14.151765823364258, 14.15176010131836, 14.151761054992676, 14.151762008666992, 14.15176010131836, 14.151771545410156, 14.151765823364258, 14.15176010131836, 14.15176010131836, 14.151762962341309, 14.151762962341309, 14.151763916015625, 14.15176010131836, 14.151786804199219, 14.151769638061523, 14.15177059173584, 14.15176773071289, 14.151778221130371, 14.151764869689941, 14.151762008666992, 14.15176010131836, 14.151763916015625, 14.151762962341309, 14.151762008666992, 14.15176010131836, 14.15176010131836, 14.151762008666992, 14.151762008666992, 14.151765823364258, 14.151771545410156, 14.151762008666992, 14.151777267456055, 14.151769638061523, 14.151765823364258, 14.15176010131836, 14.151769638061523, 14.15176010131836, 14.151762962341309, 14.151769638061523, 14.15176773071289, 14.15176773071289, 14.15176010131836, 14.15176010131836, 14.151762008666992, 14.151768684387207, 14.151773452758789, 14.151763916015625, 14.151762962341309, 14.151763916015625, 14.151772499084473, 14.15176010131836, 14.151771545410156]
Actual: [tensor([1.], dtype=torch.float64), tensor([143.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3382.], dtype=torch.float64), tensor([369.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([110.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17631.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([149.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([105.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1314.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 647278.5831844499
Predicted: [14.555290222167969, 14.555291175842285, 14.555289268493652, 14.555290222167969, 14.555301666259766, 14.555291175842285, 14.555292129516602, 14.555293083190918, 14.555293083190918, 14.555296897888184, 14.555313110351562, 14.555290222167969, 14.555294036865234, 14.555290222167969, 14.555295944213867, 14.555289268493652, 14.555290222167969, 14.555331230163574, 14.55530071258545, 14.555291175842285, 14.55529499053955, 14.55529499053955, 14.555289268493652, 14.555293083190918, 14.555304527282715, 14.555294036865234, 14.555291175842285, 14.555289268493652, 14.55529499053955, 14.555289268493652, 14.555293083190918, 14.555293083190918, 14.555289268493652, 14.555304527282715, 14.555289268493652, 14.555291175842285, 14.555296897888184, 14.555296897888184, 14.555291175842285, 14.555295944213867, 14.555525779724121, 14.555296897888184, 14.555302619934082, 14.55529499053955, 14.555567741394043, 14.555293083190918, 14.555289268493652, 14.555289268493652, 14.555302619934082, 14.555290222167969, 14.555291175842285, 14.555365562438965, 14.555290222167969, 14.555293083190918, 14.555289268493652, 14.555299758911133, 14.555291175842285, 14.555291175842285, 14.555293083190918, 14.555289268493652, 14.555292129516602, 14.555289268493652, 14.555291175842285, 14.555304527282715, 14.555292129516602, 14.555292129516602, 14.555291175842285, 14.555289268493652, 14.555304527282715, 14.555289268493652, 14.55545711517334, 14.555289268493652, 14.555291175842285, 14.555289268493652, 14.555292129516602, 14.555291175842285, 14.55529499053955, 14.555291175842285, 14.555293083190918, 14.555289268493652, 14.555289268493652, 14.555296897888184, 14.555295944213867, 14.555289268493652, 14.555290222167969, 14.555293083190918, 14.5552978515625, 14.55530071258545, 14.555293083190918, 14.555293083190918, 14.555289268493652, 14.555293083190918, 14.555289268493652, 14.555293083190918, 14.555289268493652, 14.555293083190918, 14.55529499053955, 14.555294036865234, 14.555291175842285, 14.555291175842285, 14.555291175842285, 14.555292129516602, 14.555289268493652, 14.555291175842285, 14.555299758911133, 14.55529499053955, 14.555293083190918, 14.555291175842285, 14.555289268493652, 14.555315971374512, 14.555289268493652, 14.55529499053955, 14.555294036865234, 14.555292129516602, 14.555289268493652, 14.555289268493652, 14.555291175842285, 14.555289268493652, 14.555302619934082, 14.555291175842285, 14.555296897888184, 14.555289268493652, 14.555315017700195, 14.555291175842285, 14.55529499053955, 14.555289268493652, 14.555290222167969, 14.555301666259766, 14.555301666259766, 14.555291175842285, 14.555289268493652, 14.555289268493652, 14.55529499053955, 14.555295944213867, 14.555330276489258, 14.555296897888184, 14.555294036865234, 14.555291175842285, 14.555294036865234, 14.555289268493652, 14.555289268493652, 14.555295944213867, 14.555290222167969, 14.555298805236816, 14.55530071258545, 14.555291175842285, 14.555289268493652, 14.555289268493652, 14.555289268493652, 14.555307388305664, 14.555289268493652, 14.555291175842285, 14.555292129516602, 14.555302619934082, 14.555320739746094, 14.555302619934082, 14.555295944213867, 14.555291175842285, 14.555290222167969, 14.555295944213867, 14.555289268493652, 14.555289268493652, 14.555295944213867, 14.555290222167969, 14.555299758911133, 14.555293083190918, 14.555291175842285, 14.555293083190918, 14.555290222167969, 14.555296897888184, 14.555289268493652, 14.555312156677246, 14.555290222167969, 14.555302619934082, 14.55529499053955, 14.555293083190918, 14.55530071258545, 14.55529499053955, 14.555293083190918, 14.55529499053955, 14.555289268493652, 14.555289268493652, 14.555296897888184, 14.555291175842285, 14.555294036865234, 14.555293083190918, 14.555289268493652, 14.555290222167969, 14.555293083190918, 14.555291175842285, 14.555315971374512, 14.55529499053955, 14.55530071258545, 14.555291175842285, 14.555291175842285, 14.555302619934082, 14.555291175842285, 14.555291175842285, 14.555290222167969, 14.555295944213867, 14.555296897888184, 14.555292129516602, 14.555298805236816, 14.55529499053955, 14.55529499053955, 14.555298805236816, 14.555290222167969, 14.555293083190918, 14.555289268493652, 14.555309295654297, 14.555290222167969, 14.555290222167969, 14.5552978515625, 14.555290222167969, 14.555292129516602, 14.555291175842285, 14.555289268493652, 14.555289268493652, 14.555289268493652, 14.555289268493652, 14.555290222167969, 14.555293083190918, 14.555296897888184, 14.555304527282715, 14.555290222167969, 14.555296897888184, 14.555290222167969, 14.55532169342041, 14.555295944213867, 14.55529499053955, 14.555302619934082, 14.555290222167969, 14.555302619934082, 14.55529499053955, 14.555290222167969, 14.55529499053955, 14.555296897888184, 14.555293083190918, 14.555293083190918, 14.555325508117676, 14.555291175842285, 14.555296897888184, 14.555292129516602, 14.555293083190918, 14.555293083190918, 14.555291175842285, 14.555289268493652, 14.55529499053955, 14.555291175842285, 14.55529499053955, 14.55529499053955, 14.555295944213867, 14.555316925048828, 14.555292129516602, 14.555291175842285, 14.555295944213867, 14.555292129516602, 14.555291175842285, 14.555292129516602, 14.555291175842285, 14.555310249328613, 14.555310249328613, 14.555291175842285, 14.555296897888184, 14.555289268493652, 14.555293083190918, 14.555291175842285, 14.555295944213867, 14.555296897888184, 14.555294036865234, 14.555290222167969, 14.55530071258545, 14.555289268493652, 14.555289268493652, 14.555296897888184, 14.555295944213867, 14.555289268493652, 14.555302619934082, 14.555289268493652, 14.555299758911133, 14.55529499053955, 14.555291175842285, 14.555290222167969, 14.555328369140625, 14.555289268493652, 14.55529499053955, 14.555302619934082, 14.555312156677246, 14.555305480957031, 14.555294036865234, 14.555289268493652, 14.555289268493652, 14.555293083190918, 14.555296897888184, 14.5552978515625, 14.555290222167969, 14.555295944213867, 14.555410385131836, 14.555296897888184, 14.555291175842285, 14.555302619934082, 14.555291175842285, 14.555301666259766, 14.555288314819336, 14.555296897888184, 14.555289268493652, 14.55532169342041, 14.555289268493652, 14.555289268493652, 14.555309295654297, 14.555290222167969, 14.555291175842285, 14.555291175842285, 14.555291175842285, 14.555290222167969, 14.555296897888184, 14.55529499053955, 14.555290222167969, 14.555306434631348, 14.555290222167969, 14.555291175842285, 14.555289268493652, 14.555299758911133, 14.555291175842285, 14.555290222167969, 14.555293083190918, 14.555291175842285, 14.555289268493652, 14.555290222167969, 14.555293083190918, 14.55529499053955, 14.555291175842285, 14.555293083190918, 14.555291175842285, 14.555299758911133, 14.555291175842285, 14.555307388305664, 14.555289268493652, 14.555298805236816, 14.555293083190918, 14.555290222167969, 14.555299758911133, 14.555293083190918, 14.555306434631348, 14.555291175842285, 14.555291175842285, 14.555291175842285, 14.55530834197998, 14.555303573608398, 14.555289268493652, 14.55529499053955, 14.555291175842285, 14.555288314819336, 14.555295944213867, 14.555291175842285, 14.555293083190918, 14.55529499053955, 14.5552978515625, 14.555298805236816, 14.555291175842285, 14.555289268493652, 14.555296897888184, 14.555293083190918, 14.555291175842285, 14.555304527282715, 14.555320739746094, 14.5552978515625, 14.555294036865234, 14.555303573608398, 14.555293083190918, 14.55529499053955, 14.55529499053955, 14.555299758911133, 14.555315971374512, 14.555291175842285, 14.555291175842285, 14.555296897888184, 14.555291175842285, 14.555296897888184, 14.555294036865234, 14.555354118347168, 14.555291175842285, 14.555290222167969, 14.555291175842285, 14.555291175842285, 14.555294036865234, 14.555298805236816, 14.55529499053955, 14.555296897888184, 14.555290222167969, 14.55530834197998, 14.555298805236816, 14.555304527282715, 14.555294036865234, 14.555306434631348, 14.555291175842285, 14.555293083190918, 14.55529499053955, 14.555303573608398, 14.555293083190918, 14.555314064025879, 14.555296897888184, 14.555394172668457, 14.555289268493652, 14.555475234985352, 14.555304527282715, 14.555289268493652, 14.555296897888184, 14.555292129516602, 14.5552978515625, 14.5552978515625, 14.555289268493652, 14.555291175842285, 14.555296897888184, 14.555291175842285, 14.55529499053955, 14.555291175842285, 14.555292129516602, 14.555292129516602, 14.55529499053955, 14.555363655090332, 14.555296897888184, 14.555293083190918, 14.555291175842285, 14.555291175842285, 14.555294036865234, 14.555289268493652, 14.555293083190918, 14.555289268493652, 14.555378913879395, 14.555298805236816, 14.55529499053955, 14.555317878723145, 14.555289268493652, 14.555317878723145, 14.555290222167969, 14.555290222167969, 14.555289268493652, 14.555295944213867, 14.55529499053955, 14.555296897888184, 14.55530071258545, 14.555291175842285, 14.555304527282715, 14.555293083190918, 14.555290222167969, 14.555298805236816, 14.555293083190918, 14.555296897888184, 14.555291175842285, 14.555306434631348, 14.555302619934082, 14.555293083190918, 14.555298805236816, 14.55529499053955, 14.555302619934082, 14.555291175842285, 14.555291175842285, 14.555289268493652, 14.55530834197998, 14.555298805236816, 14.555291175842285, 14.555290222167969, 14.555291175842285, 14.555295944213867, 14.555293083190918, 14.555290222167969, 14.5552978515625, 14.555334091186523, 14.555293083190918, 14.555291175842285, 14.5552978515625, 14.555291175842285, 14.555290222167969, 14.555293083190918, 14.555295944213867, 14.555290222167969, 14.555294036865234, 14.55529499053955, 14.555289268493652, 14.555305480957031, 14.555289268493652, 14.555296897888184, 14.55529499053955, 14.555293083190918, 14.55529499053955, 14.555290222167969, 14.555291175842285, 14.555290222167969, 14.555326461791992, 14.555296897888184, 14.555294036865234, 14.555289268493652, 14.555296897888184, 14.555289268493652, 14.555289268493652, 14.555289268493652, 14.55529499053955, 14.555291175842285, 14.555293083190918]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([76.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1892.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([87.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1265.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2648.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([497.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 24702.73842818758
Predicted: [14.006677627563477, 14.00667667388916, 14.006680488586426, 14.006682395935059, 14.00667667388916, 14.00667667388916, 14.006684303283691, 14.00667667388916, 14.006677627563477, 14.006683349609375, 14.006677627563477, 14.006677627563477, 14.006675720214844, 14.006678581237793, 14.00667953491211, 14.006677627563477, 14.006702423095703, 14.006675720214844, 14.006680488586426, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006681442260742, 14.006741523742676, 14.006680488586426, 14.006677627563477, 14.006688117980957, 14.006677627563477, 14.006680488586426, 14.006678581237793, 14.006677627563477, 14.006675720214844, 14.00667667388916, 14.006677627563477, 14.006680488586426, 14.006678581237793, 14.006680488586426, 14.006680488586426, 14.00667667388916, 14.006678581237793, 14.006677627563477, 14.006684303283691, 14.00667667388916, 14.006682395935059, 14.006682395935059, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006683349609375, 14.00667953491211, 14.006688117980957, 14.006677627563477, 14.006677627563477, 14.006689071655273, 14.006677627563477, 14.006683349609375, 14.006677627563477, 14.006677627563477, 14.00667953491211, 14.00667667388916, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006682395935059, 14.00667667388916, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006684303283691, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006682395935059, 14.00667667388916, 14.00667667388916, 14.006675720214844, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006697654724121, 14.006677627563477, 14.006685256958008, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006684303283691, 14.006682395935059, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.00667667388916, 14.00667667388916, 14.006684303283691, 14.006677627563477, 14.006678581237793, 14.006680488586426, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.006684303283691, 14.006677627563477, 14.00667667388916, 14.006675720214844, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.00667667388916, 14.00667667388916, 14.006678581237793, 14.00667953491211, 14.006685256958008, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006689071655273, 14.006697654724121, 14.006680488586426, 14.006684303283691, 14.006695747375488, 14.00667667388916, 14.00667667388916, 14.00668716430664, 14.00667667388916, 14.006677627563477, 14.006685256958008, 14.006678581237793, 14.00667667388916, 14.006684303283691, 14.006677627563477, 14.006677627563477, 14.006675720214844, 14.006678581237793, 14.006695747375488, 14.006682395935059, 14.00667667388916, 14.006682395935059, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.00667953491211, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006675720214844, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006678581237793, 14.006683349609375, 14.006677627563477, 14.006767272949219, 14.00669002532959, 14.006682395935059, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.00669002532959, 14.006677627563477, 14.006680488586426, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006684303283691, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.006681442260742, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006682395935059, 14.006680488586426, 14.006693840026855, 14.00667953491211, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006678581237793, 14.006678581237793, 14.006680488586426, 14.006678581237793, 14.006678581237793, 14.00667667388916, 14.006811141967773, 14.006688117980957, 14.006675720214844, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.006673812866211, 14.006682395935059, 14.006677627563477, 14.006684303283691, 14.006682395935059, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006688117980957, 14.006718635559082, 14.006677627563477, 14.006686210632324, 14.006677627563477, 14.006684303283691, 14.006705284118652, 14.006682395935059, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006682395935059, 14.006677627563477, 14.006680488586426, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006685256958008, 14.006677627563477, 14.006682395935059, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006675720214844, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006684303283691, 14.00667667388916, 14.006677627563477, 14.006682395935059, 14.00667953491211, 14.006678581237793, 14.006689071655273, 14.00667667388916, 14.006682395935059, 14.00667953491211, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.00667953491211, 14.00667667388916, 14.006684303283691, 14.006677627563477, 14.006682395935059, 14.006677627563477, 14.00667667388916, 14.006680488586426, 14.006677627563477, 14.00667667388916, 14.006675720214844, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006699562072754, 14.006678581237793, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006670951843262, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.00667667388916, 14.006677627563477, 14.006682395935059, 14.006680488586426, 14.006689071655273, 14.00667667388916, 14.00667953491211, 14.006677627563477, 14.006680488586426, 14.00667667388916, 14.006680488586426, 14.006677627563477, 14.006680488586426, 14.006695747375488, 14.00667667388916, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006678581237793, 14.006678581237793, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.00667953491211, 14.00667667388916, 14.006677627563477, 14.006678581237793, 14.006680488586426, 14.00667667388916, 14.00667667388916, 14.00667667388916, 14.00667667388916, 14.006680488586426, 14.006677627563477, 14.006677627563477, 14.006682395935059, 14.006682395935059, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006675720214844, 14.00667953491211, 14.006688117980957, 14.006680488586426, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.00667953491211, 14.006680488586426, 14.00667953491211, 14.006682395935059, 14.006675720214844, 14.006682395935059, 14.00667667388916, 14.00667667388916, 14.00667667388916, 14.006677627563477, 14.006680488586426, 14.006678581237793, 14.006697654724121, 14.006678581237793, 14.006677627563477, 14.006680488586426, 14.006678581237793, 14.00667667388916, 14.006685256958008, 14.006685256958008, 14.006677627563477, 14.00667953491211, 14.006677627563477, 14.006677627563477, 14.006675720214844, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006680488586426, 14.006678581237793, 14.006682395935059, 14.00667667388916, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.00667667388916, 14.00667667388916, 14.006680488586426, 14.006692886352539, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006681442260742, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006678581237793, 14.006689071655273, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.006684303283691, 14.006684303283691, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.006682395935059, 14.006693840026855, 14.006678581237793, 14.00667667388916, 14.00667667388916, 14.00667667388916, 14.006675720214844, 14.006677627563477, 14.006677627563477, 14.00668716430664, 14.006684303283691, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.00667667388916, 14.006692886352539, 14.00667667388916, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006680488586426, 14.006677627563477, 14.00667667388916, 14.006680488586426, 14.006678581237793, 14.006686210632324, 14.006677627563477, 14.006677627563477, 14.006677627563477, 14.006680488586426, 14.00667667388916, 14.006686210632324, 14.006677627563477, 14.006680488586426, 14.00667667388916, 14.006678581237793, 14.006675720214844, 14.00669002532959, 14.006680488586426, 14.006684303283691, 14.006677627563477, 14.00667667388916, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.006677627563477, 14.00667667388916, 14.006695747375488, 14.006680488586426, 14.006677627563477, 14.006682395935059, 14.006678581237793, 14.006677627563477, 14.006677627563477, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.006697654724121, 14.006682395935059, 14.006678581237793, 14.00667667388916, 14.006677627563477, 14.00667953491211, 14.006683349609375, 14.00667667388916]
Actual: [tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([324.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3552.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([53.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 25378.90025856769
Predicted: [13.649177551269531, 13.649181365966797, 13.649173736572266, 13.649177551269531, 13.649173736572266, 13.649186134338379, 13.649176597595215, 13.649175643920898, 13.649175643920898, 13.649187088012695, 13.649181365966797, 13.64917278289795, 13.649175643920898, 13.649177551269531, 13.649202346801758, 13.649174690246582, 13.649173736572266, 13.649174690246582, 13.649173736572266, 13.649175643920898, 13.649175643920898, 13.649173736572266, 13.649175643920898, 13.649175643920898, 13.64918327331543, 13.649176597595215, 13.649173736572266, 13.649178504943848, 13.649179458618164, 13.649175643920898, 13.649173736572266, 13.649181365966797, 13.649178504943848, 13.649187088012695, 13.649175643920898, 13.649235725402832, 13.649181365966797, 13.649176597595215, 13.649175643920898, 13.649175643920898, 13.649178504943848, 13.649177551269531, 13.649179458618164, 13.649175643920898, 13.649178504943848, 13.64917278289795, 13.649173736572266, 13.649175643920898, 13.649198532104492, 13.64918041229248, 13.64917278289795, 13.64918327331543, 13.649178504943848, 13.649178504943848, 13.649198532104492, 13.649173736572266, 13.649176597595215, 13.649192810058594, 13.649175643920898, 13.649176597595215, 13.649175643920898, 13.649205207824707, 13.649187088012695, 13.649189949035645, 13.649185180664062, 13.649187088012695, 13.649173736572266, 13.649175643920898, 13.649177551269531, 13.649175643920898, 13.649174690246582, 13.649181365966797, 13.64917278289795, 13.64917278289795, 13.649177551269531, 13.649175643920898, 13.649191856384277, 13.649175643920898, 13.649190902709961, 13.649176597595215, 13.649188995361328, 13.649179458618164, 13.649173736572266, 13.649192810058594, 13.649189949035645, 13.649174690246582, 13.649178504943848, 13.64917278289795, 13.649173736572266, 13.649174690246582, 13.64918327331543, 13.649179458618164, 13.649177551269531, 13.649189949035645, 13.649175643920898, 13.649174690246582, 13.649188041687012, 13.649175643920898, 13.649187088012695, 13.649206161499023, 13.649175643920898, 13.64918327331543, 13.649177551269531, 13.64917278289795, 13.649188041687012, 13.649174690246582, 13.649179458618164, 13.649176597595215, 13.649177551269531, 13.64917278289795, 13.649175643920898, 13.649187088012695, 13.649178504943848, 13.649175643920898, 13.649174690246582, 13.649174690246582, 13.649209976196289, 13.649178504943848, 13.649179458618164, 13.649179458618164, 13.649176597595215, 13.649181365966797, 13.649177551269531, 13.64918327331543, 13.649179458618164, 13.64918327331543, 13.649175643920898, 13.649175643920898, 13.64917278289795, 13.649177551269531, 13.64931869506836, 13.649175643920898, 13.649174690246582, 13.649177551269531, 13.649176597595215, 13.649176597595215, 13.649175643920898, 13.649175643920898, 13.649179458618164, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.64918327331543, 13.649176597595215, 13.649258613586426, 13.649177551269531, 13.649182319641113, 13.64917278289795, 13.649175643920898, 13.649177551269531, 13.649189949035645, 13.649174690246582, 13.649178504943848, 13.649173736572266, 13.649225234985352, 13.649175643920898, 13.649175643920898, 13.649177551269531, 13.649246215820312, 13.649173736572266, 13.649176597595215, 13.649177551269531, 13.649177551269531, 13.64918327331543, 13.649177551269531, 13.649185180664062, 13.649174690246582, 13.64917278289795, 13.649177551269531, 13.649186134338379, 13.649175643920898, 13.649175643920898, 13.64919376373291, 13.649176597595215, 13.649175643920898, 13.64918041229248, 13.649182319641113, 13.649178504943848, 13.649181365966797, 13.649174690246582, 13.649176597595215, 13.649174690246582, 13.649177551269531, 13.64917278289795, 13.64918327331543, 13.64918041229248, 13.64917278289795, 13.649188041687012, 13.649185180664062, 13.649175643920898, 13.649174690246582, 13.64918327331543, 13.649177551269531, 13.64917278289795, 13.649176597595215, 13.649181365966797, 13.649176597595215, 13.649176597595215, 13.649173736572266, 13.649181365966797, 13.64918041229248, 13.649181365966797, 13.649247169494629, 13.649181365966797, 13.649176597595215, 13.649173736572266, 13.649177551269531, 13.649174690246582, 13.64918327331543, 13.649177551269531, 13.649179458618164, 13.649179458618164, 13.649175643920898, 13.649174690246582, 13.649177551269531, 13.649176597595215, 13.649181365966797, 13.649175643920898, 13.649178504943848, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.649177551269531, 13.64917278289795, 13.649185180664062, 13.649200439453125, 13.649174690246582, 13.649194717407227, 13.649185180664062, 13.649177551269531, 13.649173736572266, 13.64918041229248, 13.649175643920898, 13.649179458618164, 13.649173736572266, 13.649173736572266, 13.649173736572266, 13.649182319641113, 13.649185180664062, 13.649178504943848, 13.64917278289795, 13.649176597595215, 13.649179458618164, 13.649178504943848, 13.64917278289795, 13.649177551269531, 13.649177551269531, 13.649174690246582, 13.64917278289795, 13.64917278289795, 13.649185180664062, 13.649194717407227, 13.649175643920898, 13.649173736572266, 13.649178504943848, 13.64918327331543, 13.649175643920898, 13.649177551269531, 13.649175643920898, 13.649221420288086, 13.64918041229248, 13.649174690246582, 13.649175643920898, 13.649175643920898, 13.649184226989746, 13.64918041229248, 13.649174690246582, 13.649174690246582, 13.649179458618164, 13.649174690246582, 13.649175643920898, 13.64918041229248, 13.649175643920898, 13.649174690246582, 13.649173736572266, 13.649177551269531, 13.64917278289795, 13.649173736572266, 13.649175643920898, 13.649177551269531, 13.64918327331543, 13.649181365966797, 13.649205207824707, 13.649173736572266, 13.649175643920898, 13.649188995361328, 13.649179458618164, 13.649176597595215, 13.649178504943848, 13.649194717407227, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.649198532104492, 13.649202346801758, 13.649181365966797, 13.649175643920898, 13.649175643920898, 13.649174690246582, 13.649177551269531, 13.649174690246582, 13.649179458618164, 13.649194717407227, 13.649187088012695, 13.649175643920898, 13.649175643920898, 13.649175643920898, 13.649174690246582, 13.649173736572266, 13.649178504943848, 13.649175643920898, 13.649173736572266, 13.649177551269531, 13.649176597595215, 13.649179458618164, 13.649186134338379, 13.64918041229248, 13.64918041229248, 13.64918327331543, 13.649175643920898, 13.64918327331543, 13.64918327331543, 13.64918327331543, 13.649181365966797, 13.649176597595215, 13.649299621582031, 13.649190902709961, 13.649173736572266, 13.649178504943848, 13.649175643920898, 13.64918327331543, 13.649179458618164, 13.649175643920898, 13.649176597595215, 13.649174690246582, 13.649174690246582, 13.649176597595215, 13.649182319641113, 13.649176597595215, 13.649175643920898, 13.649206161499023, 13.649185180664062, 13.649179458618164, 13.649175643920898, 13.649178504943848, 13.649177551269531, 13.649175643920898, 13.649173736572266, 13.649177551269531, 13.649184226989746, 13.649175643920898, 13.649177551269531, 13.649176597595215, 13.649175643920898, 13.649192810058594, 13.649176597595215, 13.649179458618164, 13.649185180664062, 13.649173736572266, 13.649187088012695, 13.649177551269531, 13.649177551269531, 13.649175643920898, 13.649218559265137, 13.649175643920898, 13.649177551269531, 13.649176597595215, 13.649179458618164, 13.649191856384277, 13.649175643920898, 13.64918041229248, 13.649175643920898, 13.649177551269531, 13.649173736572266, 13.649178504943848, 13.64918327331543, 13.64918327331543, 13.649181365966797, 13.649174690246582, 13.64919662475586, 13.649174690246582, 13.649181365966797, 13.649179458618164, 13.649186134338379, 13.649177551269531, 13.64918327331543, 13.649177551269531, 13.649175643920898, 13.649177551269531, 13.649185180664062, 13.64926528930664, 13.649177551269531, 13.649190902709961, 13.649179458618164, 13.649179458618164, 13.649179458618164, 13.649174690246582, 13.649176597595215, 13.649192810058594, 13.649173736572266, 13.64918041229248, 13.649175643920898, 13.649182319641113, 13.649175643920898, 13.649179458618164, 13.649175643920898, 13.649175643920898, 13.64917278289795, 13.64918041229248, 13.649179458618164, 13.649177551269531, 13.649175643920898, 13.649175643920898, 13.649177551269531, 13.649174690246582, 13.649175643920898, 13.649174690246582, 13.649178504943848, 13.649177551269531, 13.649179458618164, 13.649179458618164, 13.64918041229248, 13.649173736572266, 13.649177551269531, 13.649175643920898, 13.649174690246582, 13.649175643920898, 13.649174690246582, 13.649177551269531, 13.649175643920898, 13.649174690246582, 13.649179458618164, 13.649175643920898, 13.649181365966797, 13.649192810058594, 13.649192810058594, 13.649176597595215, 13.649175643920898, 13.649176597595215, 13.649184226989746, 13.649177551269531, 13.64918327331543, 13.649177551269531, 13.64917278289795, 13.64918327331543, 13.649179458618164, 13.649182319641113, 13.649179458618164, 13.649177551269531, 13.64917278289795, 13.649177551269531, 13.649177551269531, 13.649181365966797, 13.649174690246582, 13.649179458618164, 13.649179458618164, 13.649173736572266, 13.64917278289795, 13.649190902709961, 13.649175643920898, 13.649174690246582, 13.649175643920898, 13.649175643920898, 13.649176597595215, 13.649178504943848, 13.649173736572266, 13.649175643920898, 13.649174690246582, 13.649173736572266, 13.649173736572266, 13.649174690246582, 13.649186134338379, 13.649175643920898, 13.64918327331543, 13.649177551269531, 13.649178504943848, 13.649173736572266, 13.649174690246582, 13.649173736572266, 13.649179458618164, 13.649179458618164, 13.649175643920898, 13.649176597595215, 13.649174690246582, 13.649174690246582, 13.649192810058594, 13.649179458618164, 13.649174690246582, 13.649175643920898, 13.649173736572266, 13.649177551269531, 13.649174690246582, 13.649173736572266, 13.649179458618164, 13.64917278289795, 13.649174690246582, 13.649179458618164, 13.64917278289795, 13.649208068847656]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([33661.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([63.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([72.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([294.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([80.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([82.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2264623.7358687683
Predicted: [15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064712524414062, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064705848693848, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064705848693848, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064717292785645, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064705848693848, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702033996582, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064703941345215, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064713478088379, 15.06470012664795, 15.064709663391113, 15.06470012664795, 15.064703941345215, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064705848693848, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702033996582, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702033996582, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064704895019531, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702987670898, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064703941345215, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064705848693848, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064705848693848, 15.06470012664795, 15.064858436584473, 15.06470012664795, 15.064699172973633, 15.064705848693848, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064702987670898, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064703941345215, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702987670898, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064711570739746, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064703941345215, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064702033996582, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064715385437012, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.06470012664795, 15.064699172973633, 15.064699172973633, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.064699172973633, 15.064701080322266, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795, 15.06470012664795]
Actual: [tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([32711.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([260.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3866.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([206.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([44.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([105.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 2168096.2677337583
Predicted: [15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842061996459961, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842057228088379, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842058181762695, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.84206485748291, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842093467712402, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842058181762695, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842061996459961, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842066764831543, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842057228088379, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842059135437012, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842058181762695, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842059135437012, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328, 15.842060089111328]
Actual: [tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([53118.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1102.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 5642235.5613734275
Predicted: [17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.24319076538086, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243188858032227, 17.243186950683594, 17.243186950683594, 17.243194580078125, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594, 17.243186950683594]
Actual: [tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([524.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6804.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([82665.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([46.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([458.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4243.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([264.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 13790394.539679127
Predicted: [17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041170120239258, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041170120239258, 17.041166305541992, 17.041173934936523, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041170120239258, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.04117202758789, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041183471679688, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041168212890625, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041168212890625, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.04117774963379, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041170120239258, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041189193725586, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041170120239258, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992, 17.041166305541992]
Actual: [tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([48.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([300.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([564.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([62.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 991.3546657790151
Predicted: [18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011131286621, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280120849609375, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.28011703491211, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280115127563477, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280120849609375, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844, 18.280113220214844]
Actual: [tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([257.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1385.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([87.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([217.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([130.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([130.], dtype=torch.float64), tensor([4188.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([178.], dtype=torch.float64), tensor([48.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 39083.556753857156
Predicted: [18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.00839614868164, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844, 18.008384704589844]
Actual: [tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([138.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([606.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1208.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([200.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 3880.4024832827804
Predicted: [17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687917709350586, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687917709350586, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68791961669922, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68791961669922, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687917709350586, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68791961669922, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68791961669922, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.68791961669922, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687917709350586, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687917709350586, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953, 17.687915802001953]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([195.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([85.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 326.49983485778785
Predicted: [17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.29140281677246, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.29140281677246, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828, 17.291400909423828]
Actual: [tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([77.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([403.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([80.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3947.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([197.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 31503.003821522663
Predicted: [5.265082836151123, 5.323362350463867, 5.2880401611328125, 5.2304558753967285, 5.226668834686279, 5.23728609085083, 5.281481742858887, 5.2669854164123535, 5.279125690460205, 5.219104766845703, 5.2635722160339355, 5.268730640411377, 4.831661224365234, 5.271668910980225, 5.288549900054932, 5.240311145782471, 5.2348127365112305, 5.220895290374756, 5.290884494781494, 5.217362880706787, 5.285606861114502, 5.257169246673584, 5.291629314422607, 5.261695384979248, 5.219701766967773, 5.220823764801025, 5.291584491729736, 5.222904682159424, 5.28994607925415, 5.291125297546387, 5.2916131019592285, 5.238955497741699, 5.285576343536377, 5.291323184967041, 5.2740397453308105, 5.284334182739258, 5.254449367523193, 5.2667670249938965, 5.237321376800537, 5.285763263702393, 5.221844673156738, 5.2913432121276855, 5.341555118560791, 5.2916035652160645, 5.241240501403809, 5.291225910186768, 5.226545810699463, 5.290186405181885, 5.218926429748535, 5.247657299041748, 5.291121482849121, 5.219974040985107, 5.290820121765137, 5.285304546356201, 5.290762901306152, 5.279147624969482, 5.291598796844482, 5.228255748748779, 5.265492916107178, 5.291693687438965, 5.29081392288208, 5.23838472366333, 5.224380016326904, 5.247012615203857, 5.29144811630249, 5.219403266906738, 5.229863166809082, 5.26912784576416, 5.294301509857178, 5.243251323699951, 5.22826623916626, 5.255018711090088, 5.225188732147217, 5.328688621520996, 5.2888712882995605, 5.291204929351807, 5.288118362426758, 5.287350654602051, 5.291426181793213, 5.52863073348999, 5.263832092285156, 5.282527446746826, 5.249070644378662, 5.258632659912109, 5.222061634063721, 5.264467716217041, 5.125153541564941, 5.264039516448975, 5.290731906890869, 5.271454811096191, 5.2881999015808105, 5.2854084968566895, 5.280604362487793, 5.263546943664551, 5.291006088256836, 5.241100788116455, 5.257183074951172, 5.263355255126953, 5.25688362121582, 5.347546100616455, 5.255577087402344, 5.277618885040283, 5.274813652038574, 5.239868640899658, 5.220744609832764, 5.278147220611572, 5.269596576690674, 5.218669414520264, 5.236860752105713, 5.287230014801025, 5.224395275115967, 5.263047695159912, 5.24218225479126, 5.2449164390563965, 5.277783393859863, 5.248329162597656, 5.2714667320251465, 5.2911224365234375, 5.2337164878845215, 5.21959114074707, 5.226058006286621, 5.109187126159668, 5.280471324920654, 5.219258785247803, 5.280874729156494, 5.290355205535889, 5.219675540924072, 5.236619472503662, 5.246181011199951, 5.257530689239502, 5.233191013336182, 5.287448406219482, 5.289447784423828, 5.280081272125244, 5.291670799255371, 5.288449764251709, 5.285645961761475, 5.277657985687256, 5.217625141143799, 5.217385292053223, 5.267978668212891, 5.273193359375, 5.291335582733154, 5.286206245422363, 5.21829891204834, 5.282973289489746, 5.290882110595703, 5.230743885040283, 5.287618160247803, 5.241985321044922, 5.219925403594971, 5.218934535980225, 5.2479400634765625, 5.283097267150879, 5.291571140289307, 5.237097263336182, 5.2877302169799805, 5.289231300354004, 5.218246936798096, 5.276254653930664, 5.263047218322754, 5.247003078460693, 5.263755798339844, 5.228912353515625, 5.274666786193848, 5.289207935333252, 5.251054286956787, 5.251347064971924, 5.329408168792725, 5.276597499847412, 5.218907833099365, 5.291239261627197, 5.284128665924072, 5.279510021209717, 5.187994956970215, 5.224350929260254, 5.243746757507324, 5.274799823760986, 5.232821464538574, 5.291591167449951, 5.311018466949463, 5.286691188812256, 5.28949499130249, 5.344801425933838, 5.4555463790893555, 5.27167272567749, 5.25198221206665, 5.258714199066162, 5.2634992599487305, 5.231750965118408, 5.254260540008545, 5.285851001739502, 5.249563694000244, 5.2472920417785645, 5.29037618637085, 5.291370391845703, 5.290684700012207, 5.331869125366211, 5.286160469055176, 5.288610935211182, 5.274840831756592, 5.2643914222717285, 5.281649589538574, 5.287429332733154, 5.269906044006348, 5.240744113922119, 5.255307674407959, 5.287014961242676, 5.268199443817139, 5.219483852386475, 5.241586685180664, 5.291631698608398, 5.267998218536377, 5.289659023284912, 5.258595943450928, 5.2783331871032715, 5.239632606506348, 5.2740302085876465, 5.2813286781311035, 5.270914554595947, 5.331249713897705, 5.291344165802002, 5.2914252281188965, 5.261143207550049, 5.236225605010986, 5.237058162689209, 5.230956554412842, 5.284716606140137, 5.2573561668396, 5.290374755859375, 5.262938022613525, 5.240355968475342, 5.263103008270264, 5.221069812774658, 5.254215717315674, 5.291598796844482, 5.334322452545166, 5.2914557456970215, 5.231157302856445, 5.291809558868408, 5.242281436920166, 5.2207489013671875, 5.329841136932373, 5.22721529006958, 5.280115127563477, 5.221044540405273, 5.290398120880127, 5.255261421203613, 5.250155448913574, 5.288774013519287, 5.221694469451904, 5.2623515129089355, 5.2901291847229, 5.285855770111084, 5.260434627532959, 5.244350910186768, 5.30979585647583, 5.23877477645874, 5.21783971786499, 5.229567050933838, 5.2824554443359375, 5.285135269165039, 5.262814998626709, 5.249124050140381, 5.277098655700684, 5.285452842712402, 5.290652275085449, 5.288205623626709, 5.2477288246154785, 5.3514862060546875, 5.288990497589111, 5.2899298667907715, 5.272027492523193, 5.288586616516113, 5.274555683135986, 5.21875524520874, 5.281468868255615, 5.290848255157471, 5.23461389541626, 5.22126579284668, 5.239504337310791, 5.289548397064209, 5.2195305824279785, 5.287129878997803, 5.291571140289307, 5.252126216888428, 5.285998344421387, 5.289953708648682, 5.239323139190674, 5.308187961578369, 5.249154090881348, 5.276204586029053, 5.290737628936768, 5.254384517669678, 5.275691509246826, 5.2498860359191895, 5.288337230682373, 5.291382789611816, 5.278578281402588, 5.250630855560303, 5.2614970207214355, 5.274306774139404, 5.290994644165039, 5.219908237457275, 5.25043249130249, 5.290771961212158, 5.282302379608154, 5.280724048614502, 5.291383743286133, 5.278378486633301, 5.285994052886963, 5.221980571746826, 5.28445291519165, 5.270632266998291, 5.269555568695068, 5.222754955291748, 5.270487308502197, 5.263552188873291, 5.268660545349121, 5.224388599395752, 5.2332987785339355, 5.291464328765869, 5.350762844085693, 5.252352237701416, 5.287928104400635, 5.340325355529785, 5.219801425933838, 5.268484592437744, 5.240449905395508, 5.29164457321167, 5.257823467254639, 5.281414985656738, 5.290846347808838, 5.279806137084961, 5.23335075378418, 5.275052547454834, 5.220035076141357, 5.291014194488525, 5.230230808258057, 5.229407787322998, 5.263202667236328, 5.251723289489746, 5.29086446762085, 5.270698547363281, 5.287565231323242, 5.280575752258301, 5.30122709274292, 5.290441989898682, 5.280647277832031, 5.268343448638916, 5.267773628234863, 5.291534900665283, 5.276146411895752, 5.263827800750732, 5.251796245574951, 5.287553787231445, 5.2906928062438965, 5.239176273345947, 5.230800151824951, 5.218316555023193, 5.234940528869629, 5.134156703948975, 5.2501301765441895, 5.233169078826904, 5.238041400909424, 5.268117427825928, 5.264649868011475, 5.2562479972839355, 5.271018028259277, 5.291452884674072, 5.282774925231934, 5.27398157119751, 5.282606601715088, 5.24916410446167, 5.289571762084961, 5.2914509773254395, 5.29060697555542, 5.349782466888428, 5.231776714324951, 5.274964809417725, 5.25006628036499, 5.228905200958252, 5.258647441864014, 5.235442638397217, 5.224961757659912, 5.323558807373047, 5.284027576446533, 5.24916410446167, 5.219592571258545, 5.283036231994629, 5.291378498077393, 5.278031826019287, 5.2248053550720215, 5.219945430755615, 5.2286248207092285, 5.276930332183838, 5.286999702453613, 5.241885662078857, 5.270876884460449, 5.236786365509033, 5.257824420928955, 5.239995956420898, 5.2270827293396, 5.224517345428467, 5.217358112335205, 5.276740550994873, 5.2893195152282715, 5.277886867523193, 5.288844585418701, 5.290539264678955, 5.2767653465271, 5.347079277038574, 5.2893290519714355, 5.2647786140441895, 5.264033794403076, 5.282555103302002, 5.224355697631836, 5.290198802947998, 5.229177951812744, 5.343642711639404, 5.249274253845215, 5.291610240936279, 5.235671520233154, 5.291682720184326, 5.247832775115967, 5.259777545928955, 5.281454086303711, 5.291329383850098, 5.283477783203125, 5.220046520233154, 5.235127925872803, 5.288144588470459, 5.2302632331848145, 5.2617363929748535, 5.231016635894775, 5.288038730621338, 5.227046489715576, 5.22056245803833, 5.267832279205322, 5.2852044105529785, 5.286909580230713, 5.281062602996826, 5.2912468910217285, 5.222073554992676, 5.253268718719482, 5.348649501800537, 5.285114765167236, 5.229244709014893, 5.291563510894775, 5.224968910217285, 5.280511856079102, 5.287306308746338, 5.263185977935791, 5.248223781585693, 5.282134532928467, 5.2757134437561035, 5.2839884757995605, 5.289146900177002, 5.2172346115112305, 5.219618320465088, 5.227132320404053, 5.2797980308532715, 5.289955139160156, 5.270501136779785, 5.295089244842529, 5.261394500732422, 5.2820353507995605, 5.235942840576172, 5.236475467681885, 5.290581226348877, 5.291560173034668, 5.269728183746338, 5.274050235748291, 5.287406921386719, 5.221924781799316, 5.289225101470947, 5.274513244628906, 5.285067558288574, 5.106626987457275, 5.241573333740234, 5.241201877593994, 5.291534900665283, 5.287457466125488, 5.264622211456299, 5.27584981918335, 5.216965198516846, 5.266066074371338, 5.225758075714111, 5.254249095916748, 5.27402925491333, 5.278431415557861, 5.321061611175537, 5.219234466552734, 5.280638694763184, 5.269486904144287, 5.28586483001709, 5.2748541831970215, 5.350015640258789, 5.2657790184021, 5.286916255950928]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([343.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1332.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([89.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([45.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([97.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([987.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([134.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64)]
MSE: 5761.7621488814275
Predicted: [12.124883651733398, 12.674123764038086, 14.89792537689209, 9.994464874267578, 9.269168853759766, 9.200736045837402, 9.473952293395996, 10.337989807128906, 13.266212463378906, 9.895565032958984, 9.2194242477417, 14.09616756439209, 9.969635009765625, 8.969436645507812, 8.969528198242188, 9.42757797241211, 14.805585861206055, 10.426554679870605, 9.31082534790039, 11.455156326293945, 9.14301872253418, 11.760152816772461, 8.992178916931152, 9.936694145202637, 12.678630828857422, 9.050931930541992, 8.973054885864258, 10.167430877685547, 9.037099838256836, 11.67995548248291, 10.055278778076172, 14.105262756347656, 9.464150428771973, 10.485185623168945, 9.003935813903809, 9.344879150390625, 12.129547119140625, 9.449700355529785, 11.55850601196289, 9.098967552185059, 11.396921157836914, 11.601829528808594, 9.002229690551758, 10.6735258102417, 10.546125411987305, 10.304105758666992, 10.483421325683594, 9.013374328613281, 14.962964057922363, 10.856864929199219, 8.980904579162598, 13.059510231018066, 8.967645645141602, 10.243392944335938, 8.969139099121094, 8.970723152160645, 10.998371124267578, 11.233469009399414, 9.005444526672363, 13.601558685302734, 10.5755615234375, 9.116767883300781, 10.435333251953125, 10.303434371948242, 12.619630813598633, 15.018770217895508, 10.123438835144043, 14.095748901367188, 10.386869430541992, 9.220043182373047, 9.110669136047363, 11.717599868774414, 9.022344589233398, 11.79902458190918, 8.973458290100098, 9.577634811401367, 10.573358535766602, 8.979390144348145, 11.272771835327148, 9.041609764099121, 11.693315505981445, 9.183966636657715, 8.967513084411621, 11.603586196899414, 10.651321411132812, 9.85384464263916, 8.997629165649414, 11.103981971740723, 11.943340301513672, 8.986761093139648, 12.1171875, 10.617890357971191, 9.580774307250977, 11.827417373657227, 9.992483139038086, 9.663686752319336, 9.16206169128418, 9.677562713623047, 15.077129364013672, 9.7801513671875, 10.982998847961426, 10.246925354003906, 9.602874755859375, 11.064631462097168, 13.350090026855469, 8.965954780578613, 9.542601585388184, 8.970176696777344, 12.365180969238281, 13.957290649414062, 9.948974609375, 9.112631797790527, 12.45834732055664, 15.076242446899414, 8.967002868652344, 14.376548767089844, 11.425315856933594, 9.297410011291504, 8.98455810546875, 10.937604904174805, 10.76876449584961, 9.771615982055664, 9.318408012390137, 8.969998359680176, 8.989097595214844, 9.135054588317871, 9.324423789978027, 8.975923538208008, 11.324701309204102, 9.291485786437988, 11.875165939331055, 9.010519027709961, 10.580601692199707, 10.014415740966797, 15.029790878295898, 9.419072151184082, 14.782613754272461, 13.98530387878418, 10.85261058807373, 10.473766326904297, 10.494495391845703, 9.685979843139648, 9.352766036987305, 9.046575546264648, 9.99740219116211, 13.463814735412598, 10.633544921875, 9.746356964111328, 9.243310928344727, 9.320404052734375, 14.392585754394531, 14.854361534118652, 12.435108184814453, 8.983858108520508, 8.996146202087402, 9.006736755371094, 9.214755058288574, 9.890327453613281, 9.120101928710938, 11.223121643066406, 9.181156158447266, 14.874061584472656, 10.820574760437012, 11.021880149841309, 13.32676887512207, 9.473939895629883, 10.65671443939209, 11.760416030883789, 9.661678314208984, 10.041056632995605, 8.96898078918457, 9.00711441040039, 14.836323738098145, 9.004888534545898, 10.73779296875, 10.080730438232422, 10.612713813781738, 11.063436508178711, 11.353401184082031, 9.121153831481934, 9.090019226074219, 8.977873802185059, 9.434148788452148, 12.096728324890137, 11.97845458984375, 8.966885566711426, 14.73672866821289, 14.491052627563477, 9.026352882385254, 9.056211471557617, 9.015730857849121, 14.175769805908203, 9.377691268920898, 9.948099136352539, 9.647475242614746, 9.003283500671387, 9.586479187011719, 12.585914611816406, 9.411876678466797, 9.043434143066406, 12.036355972290039, 9.11099624633789, 11.30799674987793, 14.657752990722656, 8.9864501953125, 10.996368408203125, 12.52252197265625, 12.89905834197998, 9.974862098693848, 9.173341751098633, 12.501612663269043, 11.069686889648438, 8.9672269821167, 9.022764205932617, 9.394871711730957, 10.021063804626465, 12.647310256958008, 10.601112365722656, 10.212577819824219, 11.460440635681152, 14.174200057983398, 9.694633483886719, 12.66685676574707, 13.346431732177734, 15.015453338623047, 14.727453231811523, 14.590124130249023, 13.065872192382812, 9.162501335144043, 9.018108367919922, 11.637897491455078, 11.138790130615234, 9.084564208984375, 9.014524459838867, 9.013870239257812, 13.820793151855469, 9.253000259399414, 10.903387069702148, 9.84836196899414, 13.303401947021484, 9.09024429321289, 14.362874984741211, 9.365262985229492, 9.860973358154297, 11.123191833496094, 15.004379272460938, 9.14339542388916, 14.438385009765625, 14.334821701049805, 13.652963638305664, 10.210870742797852, 9.035106658935547, 9.706777572631836, 9.856550216674805, 12.278077125549316, 9.078072547912598, 10.934844970703125, 10.909971237182617, 9.454273223876953, 9.132335662841797, 10.108720779418945, 9.39592170715332, 9.8367919921875, 9.521612167358398, 13.56826114654541, 13.384831428527832, 9.143733978271484, 13.49543571472168, 9.79452896118164, 8.983926773071289, 13.663117408752441, 8.97283935546875, 8.984886169433594, 9.123018264770508, 11.310125350952148, 9.093942642211914, 11.14421272277832, 14.990821838378906, 8.969908714294434, 10.599140167236328, 12.829965591430664, 9.243339538574219, 13.86085033416748, 10.633426666259766, 9.526092529296875, 13.73642349243164, 11.124361038208008, 15.08500862121582, 9.936868667602539, 9.868139266967773, 8.982381820678711, 8.981760025024414, 9.977533340454102, 8.967649459838867, 9.271202087402344, 10.687192916870117, 9.412644386291504, 11.895952224731445, 9.31495475769043, 14.951508522033691, 10.976951599121094, 10.225123405456543, 9.579299926757812, 9.574338912963867, 9.007125854492188, 9.787708282470703, 11.546716690063477, 14.13673210144043, 9.174125671386719, 10.722013473510742, 8.974954605102539, 9.418225288391113, 10.74199104309082, 10.640458106994629, 8.99289321899414, 10.079994201660156, 12.534890174865723, 9.364339828491211, 8.968433380126953, 10.632699966430664, 15.033927917480469, 9.13768196105957, 9.881357192993164, 12.093099594116211, 9.357769966125488, 9.210485458374023, 11.048917770385742, 10.511474609375, 9.679960250854492, 8.967369079589844, 14.751837730407715, 9.08404541015625, 8.968718528747559, 14.661205291748047, 8.984707832336426, 9.140857696533203, 9.546406745910645, 10.283018112182617, 9.818262100219727, 10.0931978225708, 9.925533294677734, 9.112628936767578, 11.175036430358887, 9.3709716796875, 12.990625381469727, 9.043233871459961, 10.622050285339355, 9.911741256713867, 9.65552806854248, 10.668031692504883, 10.83729076385498, 11.636411666870117, 9.769294738769531, 9.052111625671387, 9.431587219238281, 9.750664710998535, 9.854592323303223, 9.420778274536133, 10.134072303771973, 9.081677436828613, 9.178071975708008, 9.315065383911133, 9.179134368896484, 10.888748168945312, 10.169498443603516, 14.790717124938965, 13.8526611328125, 9.249780654907227, 12.622557640075684, 11.157449722290039, 9.23041820526123, 9.20265007019043, 9.018106460571289, 10.862669944763184, 8.977609634399414, 10.036600112915039, 9.013481140136719, 12.362314224243164, 9.134892463684082, 10.013588905334473, 11.915199279785156, 11.025574684143066, 9.229644775390625, 9.950103759765625, 11.150187492370605, 9.240792274475098, 9.2872896194458, 11.560652732849121, 11.780445098876953, 9.279336929321289, 10.204818725585938, 9.215187072753906, 9.635942459106445, 11.65849781036377, 10.635940551757812, 9.141870498657227, 14.718706130981445, 14.68908977508545, 10.168072700500488, 8.967226028442383, 14.199056625366211, 13.695785522460938, 9.807433128356934, 9.40285587310791, 9.828573226928711, 14.567797660827637, 9.538982391357422, 9.6860933303833, 9.189738273620605, 9.649724960327148, 11.85966682434082, 8.982730865478516, 8.967950820922852, 9.240337371826172, 9.793911933898926, 9.022793769836426, 8.970683097839355, 9.045936584472656, 9.42639446258545, 9.674771308898926, 9.012185096740723, 9.38584041595459, 14.887426376342773, 9.384580612182617, 14.826974868774414, 11.656030654907227, 10.64015007019043, 9.910243034362793, 9.06212043762207, 8.968734741210938, 10.109477996826172, 11.67033576965332, 9.49976634979248, 13.11410903930664, 12.90987777709961, 13.811586380004883, 9.440776824951172, 10.323875427246094, 9.740514755249023, 9.085187911987305, 9.003580093383789, 14.681085586547852, 10.78431510925293, 8.99007511138916, 11.602413177490234, 14.166793823242188, 15.077008247375488, 15.068205833435059, 11.92257308959961, 11.019652366638184, 14.674986839294434, 9.619209289550781, 9.629732131958008, 9.60081958770752, 9.07896614074707, 11.020040512084961, 8.98939037322998, 9.43932056427002, 10.161924362182617, 10.507366180419922, 9.956552505493164, 13.998226165771484, 12.095385551452637, 9.302757263183594, 9.041860580444336, 9.785355567932129, 10.01547622680664, 15.019792556762695, 8.967439651489258, 9.0589599609375, 9.26233959197998, 9.550553321838379, 13.500767707824707, 10.054922103881836, 9.638439178466797, 14.934226036071777, 10.50875473022461, 11.443243026733398, 10.340246200561523, 12.213459014892578, 10.7236328125, 15.097232818603516, 15.013352394104004, 9.040010452270508, 13.227259635925293, 10.476686477661133, 14.859479904174805, 14.020357131958008, 9.058601379394531, 9.4327974319458, 10.414825439453125, 11.359464645385742, 8.96670150756836, 10.049381256103516, 9.090246200561523, 8.968706130981445, 8.974998474121094, 9.205137252807617, 13.383279800415039, 9.270730018615723]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([36624.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([126.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([56.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3004.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64)]
MSE: 2699001.3225322687
Predicted: [15.894941329956055, 15.894943237304688, 15.89494514465332, 15.89494800567627, 15.894946098327637, 15.894946098327637, 15.894939422607422, 15.894908905029297, 15.894947052001953, 15.894942283630371, 15.894937515258789, 15.894943237304688, 15.894941329956055, 15.89494800567627, 15.894933700561523, 15.894927978515625, 15.894935607910156, 15.894947052001953, 15.894840240478516, 15.894947052001953, 15.894941329956055, 15.89494800567627, 15.89494514465332, 15.894947052001953, 15.89494800567627, 15.89494514465332, 15.894942283630371, 15.894944190979004, 15.894932746887207, 15.894946098327637, 15.894935607910156, 15.89494514465332, 15.894947052001953, 15.894937515258789, 15.894935607910156, 15.89494800567627, 15.894920349121094, 15.894936561584473, 15.894946098327637, 15.894947052001953, 15.894936561584473, 15.894693374633789, 15.894947052001953, 15.89484691619873, 15.894947052001953, 15.894865989685059, 15.894938468933105, 15.894946098327637, 15.894853591918945, 15.89493465423584, 15.894927978515625, 15.894943237304688, 15.89494514465332, 15.894947052001953, 15.894916534423828, 15.89494800567627, 15.894943237304688, 15.89494514465332, 15.8947114944458, 15.894941329956055, 15.894941329956055, 15.894938468933105, 15.894941329956055, 15.894935607910156, 15.89494800567627, 15.894937515258789, 15.894943237304688, 15.894937515258789, 15.894928932189941, 15.894933700561523, 15.894927978515625, 15.894949913024902, 15.894947052001953, 15.89494800567627, 15.894886016845703, 15.894928932189941, 15.894943237304688, 15.894937515258789, 15.894947052001953, 15.894944190979004, 15.894947052001953, 15.894947052001953, 15.894944190979004, 15.894947052001953, 15.894920349121094, 15.886958122253418, 15.894943237304688, 15.894947052001953, 15.894941329956055, 15.89494514465332, 15.894947052001953, 15.89494514465332, 15.894942283630371, 15.894867897033691, 15.894837379455566, 15.894942283630371, 15.89494800567627, 15.89494800567627, 15.894942283630371, 15.894946098327637, 15.89494514465332, 15.894940376281738, 15.89494800567627, 15.894941329956055, 15.894943237304688, 15.894937515258789, 15.894619941711426, 15.89460277557373, 15.894937515258789, 15.893538475036621, 15.894947052001953, 15.894949913024902, 15.894947052001953, 15.894940376281738, 15.89494800567627, 15.894946098327637, 15.894938468933105, 15.894935607910156, 15.894947052001953, 15.89370346069336, 15.894948959350586, 15.89494514465332, 15.894947052001953, 15.89494800567627, 15.894917488098145, 15.89494514465332, 15.89494800567627, 15.894942283630371, 15.894935607910156, 15.894947052001953, 15.894941329956055, 15.894941329956055, 15.894926071166992, 15.894929885864258, 15.894944190979004, 15.894947052001953, 15.894947052001953, 15.89494514465332, 15.89494514465332, 15.89493465423584, 15.894933700561523, 15.894927978515625, 15.894940376281738, 15.89490032196045, 15.89494800567627, 15.894948959350586, 15.894941329956055, 15.894933700561523, 15.894941329956055, 15.89494800567627, 15.89494514465332, 15.89493465423584, 15.89493465423584, 15.88951301574707, 15.894941329956055, 15.894908905029297, 15.894947052001953, 15.894947052001953, 15.894903182983398, 15.894927978515625, 15.89493465423584, 15.894941329956055, 15.89494800567627, 15.894563674926758, 15.894947052001953, 15.894946098327637, 15.894938468933105, 15.894946098327637, 15.894906044006348, 15.894947052001953, 15.894947052001953, 15.894927978515625, 15.894943237304688, 15.894941329956055, 15.894939422607422, 15.894937515258789, 15.894926071166992, 15.89492130279541, 15.894926071166992, 15.894933700561523, 15.894937515258789, 15.894943237304688, 15.894941329956055, 15.89494514465332, 15.894942283630371, 15.89494800567627, 15.894939422607422, 15.894941329956055, 15.894947052001953, 15.894940376281738, 15.89494800567627, 15.894899368286133, 15.894936561584473, 15.894927978515625, 15.894947052001953, 15.894941329956055, 15.894947052001953, 15.894947052001953, 15.89494514465332, 15.894936561584473, 15.89494800567627, 15.894925117492676, 15.89494800567627, 15.894946098327637, 15.894930839538574, 15.894942283630371, 15.894947052001953, 15.894947052001953, 15.894947052001953, 15.894947052001953, 15.89494800567627, 15.894943237304688, 15.89494800567627, 15.894948959350586, 15.894902229309082, 15.894941329956055, 15.894837379455566, 15.894937515258789, 15.894928932189941, 15.894935607910156, 15.894946098327637, 15.894940376281738, 15.894941329956055, 15.894842147827148, 15.894948959350586, 15.894889831542969, 15.894927978515625, 15.894948959350586, 15.89493465423584, 15.894938468933105, 15.894938468933105, 15.894947052001953, 15.894947052001953, 15.894946098327637, 15.894932746887207, 15.894911766052246, 15.894943237304688, 15.89494800567627, 15.894941329956055, 15.894946098327637, 15.894946098327637, 15.894942283630371, 15.894946098327637, 15.89494800567627, 15.894938468933105, 15.894943237304688, 15.894905090332031, 15.894899368286133, 15.894905090332031, 15.894932746887207, 15.89491081237793, 15.894943237304688, 15.894946098327637, 15.894946098327637, 15.894691467285156, 15.894946098327637, 15.894912719726562, 15.894947052001953, 15.894937515258789, 15.894941329956055, 15.89494800567627, 15.894927978515625, 15.894947052001953, 15.894781112670898, 15.894939422607422, 15.894947052001953, 15.894942283630371, 15.894941329956055, 15.894938468933105, 15.89494800567627, 15.89494800567627, 15.89494514465332, 15.894908905029297, 15.894927978515625, 15.894942283630371, 15.894948959350586, 15.89494800567627, 15.894947052001953, 15.894935607910156, 15.89494800567627, 15.894940376281738, 15.894927024841309, 15.894817352294922, 15.894947052001953, 15.894941329956055, 15.894942283630371, 15.89494514465332, 15.894941329956055, 15.894942283630371, 15.894789695739746, 15.894947052001953, 15.894947052001953, 15.894401550292969, 15.89492416381836, 15.894922256469727, 15.894437789916992, 15.894948959350586, 15.894946098327637, 15.894946098327637, 15.89494514465332, 15.89494800567627, 15.893716812133789, 15.89492416381836, 15.894947052001953, 15.894944190979004, 15.894946098327637, 15.894947052001953, 15.894947052001953, 15.894927978515625, 15.894946098327637, 15.894865036010742, 15.894942283630371, 15.894947052001953, 15.894936561584473, 15.894941329956055, 15.894932746887207, 15.894922256469727, 15.89494514465332, 15.89490032196045, 15.894935607910156, 15.894720077514648, 15.89494514465332, 15.89493465423584, 15.894938468933105, 15.894948959350586, 15.89494514465332, 15.894922256469727, 15.894943237304688, 15.894941329956055, 15.894942283630371, 15.894948959350586, 15.89494800567627, 15.894893646240234, 15.894938468933105, 15.894947052001953, 15.894939422607422, 15.894948959350586, 15.894946098327637, 15.894941329956055, 15.894932746887207, 15.894946098327637, 15.894944190979004, 15.894941329956055, 15.894940376281738, 15.894943237304688, 15.894937515258789, 15.894940376281738, 15.89494514465332, 15.894947052001953, 15.894947052001953, 15.894941329956055, 15.894926071166992, 15.894892692565918, 15.894947052001953, 15.894932746887207, 15.894932746887207, 15.894935607910156, 15.894893646240234, 15.894939422607422, 15.89493179321289, 15.894947052001953, 15.8935546875, 15.894937515258789, 15.894877433776855, 15.894947052001953, 15.89492416381836, 15.894946098327637, 15.894940376281738, 15.894946098327637, 15.89494800567627, 15.89494514465332, 15.894947052001953, 15.894935607910156, 15.894946098327637, 15.894940376281738, 15.894937515258789, 15.894947052001953, 15.894947052001953, 15.894926071166992, 15.894933700561523, 15.894929885864258, 15.894944190979004, 15.894940376281738, 15.894947052001953, 15.89492416381836, 15.894933700561523, 15.89494800567627, 15.894947052001953, 15.894949913024902, 15.89494514465332, 15.894914627075195, 15.89493179321289, 15.89493465423584, 15.894901275634766, 15.894948959350586, 15.894947052001953, 15.894933700561523, 15.894947052001953, 15.894947052001953, 15.894919395446777, 15.894913673400879, 15.89494800567627, 15.894941329956055, 15.89494514465332, 15.894681930541992, 15.894947052001953, 15.89482593536377, 15.894947052001953, 15.894943237304688, 15.894929885864258, 15.894947052001953, 15.894943237304688, 15.894889831542969, 15.894941329956055, 15.89493179321289, 15.894947052001953, 15.894940376281738, 15.894947052001953, 15.894941329956055, 15.894947052001953, 15.894942283630371, 15.894936561584473, 15.894947052001953, 15.894937515258789, 15.894939422607422, 15.89494514465332, 15.894947052001953, 15.894946098327637, 15.894946098327637, 15.894947052001953, 15.894940376281738, 15.894915580749512, 15.894609451293945, 15.89492416381836, 15.894942283630371, 15.894941329956055, 15.894943237304688, 15.894946098327637, 15.894670486450195, 15.890684127807617, 15.894942283630371, 15.894941329956055, 15.894930839538574, 15.894946098327637, 15.894947052001953, 15.894908905029297, 15.894946098327637, 15.894947052001953, 15.894946098327637, 15.89494800567627, 15.894941329956055, 15.894946098327637, 15.89494800567627, 15.894946098327637, 15.894946098327637, 15.894949913024902, 15.894818305969238, 15.894947052001953, 15.894947052001953, 15.89494514465332, 15.894932746887207, 15.894941329956055, 15.894939422607422, 15.894947052001953, 15.89494800567627, 15.89494514465332, 15.894947052001953, 15.894935607910156, 15.894947052001953, 15.894890785217285, 15.894947052001953, 15.894927978515625, 15.894779205322266, 15.894885063171387, 15.894947052001953, 15.894927024841309, 15.89493465423584, 15.894943237304688, 15.894927978515625, 15.894933700561523, 15.89494514465332, 15.894940376281738, 15.894948959350586, 15.894941329956055, 15.894940376281738, 15.894947052001953, 15.894889831542969, 15.894947052001953, 15.894908905029297, 15.894942283630371, 15.89492130279541, 15.89493179321289, 15.894381523132324, 15.894946098327637, 15.894943237304688, 15.894940376281738, 15.89494514465332, 15.894947052001953, 15.89494514465332, 15.89494514465332]
Actual: [tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([324.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5031.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3177.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([127.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([27.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([445.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([59.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([79.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1057.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([446.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([64.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([129.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64)]
MSE: 73642.04575304418
Predicted: [17.683635711669922, 17.683631896972656, 17.68356704711914, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.68333625793457, 17.683629989624023, 17.683631896972656, 17.68358039855957, 17.683635711669922, 17.68362808227539, 17.683624267578125, 17.683612823486328, 17.683624267578125, 17.68358612060547, 17.683635711669922, 17.683624267578125, 17.683616638183594, 17.683624267578125, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683612823486328, 17.683631896972656, 17.68363380432129, 17.683631896972656, 17.68363380432129, 17.683631896972656, 17.68358612060547, 17.683631896972656, 17.683635711669922, 17.683561325073242, 17.683635711669922, 17.683631896972656, 17.683578491210938, 17.68362045288086, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.683624267578125, 17.68363380432129, 17.68363380432129, 17.683631896972656, 17.683626174926758, 17.68362808227539, 17.683635711669922, 17.683345794677734, 17.68363380432129, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683626174926758, 17.68363380432129, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.68362808227539, 17.68362808227539, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.683631896972656, 17.683622360229492, 17.683597564697266, 17.683631896972656, 17.683629989624023, 17.68360137939453, 17.683635711669922, 17.683629989624023, 17.683631896972656, 17.68363380432129, 17.683635711669922, 17.68362808227539, 17.683635711669922, 17.68363380432129, 17.68362808227539, 17.683631896972656, 17.683551788330078, 17.683631896972656, 17.683635711669922, 17.683629989624023, 17.683012008666992, 17.68362808227539, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.683612823486328, 17.683631896972656, 17.683523178100586, 17.683616638183594, 17.68362808227539, 17.683626174926758, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683622360229492, 17.683631896972656, 17.68362045288086, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.68363380432129, 17.683624267578125, 17.68363380432129, 17.683612823486328, 17.683635711669922, 17.68363380432129, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683612823486328, 17.683635711669922, 17.683635711669922, 17.683452606201172, 17.68359375, 17.683631896972656, 17.683582305908203, 17.68363380432129, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683612823486328, 17.6835994720459, 17.683631896972656, 17.683629989624023, 17.683631896972656, 17.683609008789062, 17.683631896972656, 17.68363380432129, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683624267578125, 17.683629989624023, 17.683517456054688, 17.683629989624023, 17.68362808227539, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.68362808227539, 17.683622360229492, 17.683589935302734, 17.68362045288086, 17.683635711669922, 17.683631896972656, 17.68363380432129, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683626174926758, 17.683605194091797, 17.683635711669922, 17.683597564697266, 17.683631896972656, 17.683631896972656, 17.68362808227539, 17.683635711669922, 17.68362808227539, 17.68360137939453, 17.683624267578125, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683626174926758, 17.682926177978516, 17.683631896972656, 17.683631896972656, 17.68363380432129, 17.68362045288086, 17.683635711669922, 17.683544158935547, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.683631896972656, 17.68363380432129, 17.683626174926758, 17.683631896972656, 17.683605194091797, 17.683631896972656, 17.68362808227539, 17.683631896972656, 17.683629989624023, 17.68362808227539, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.683622360229492, 17.683635711669922, 17.68363380432129, 17.68363380432129, 17.683635711669922, 17.683635711669922, 17.68363380432129, 17.683624267578125, 17.683635711669922, 17.68362808227539, 17.683612823486328, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.68362808227539, 17.68363380432129, 17.683635711669922, 17.683624267578125, 17.68362808227539, 17.683635711669922, 17.683618545532227, 17.68362808227539, 17.683635711669922, 17.683605194091797, 17.683626174926758, 17.683631896972656, 17.68338966369629, 17.68363380432129, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683622360229492, 17.683631896972656, 17.683616638183594, 17.68363380432129, 17.68362808227539, 17.683631896972656, 17.68362808227539, 17.683635711669922, 17.683612823486328, 17.68362045288086, 17.683629989624023, 17.683528900146484, 17.683605194091797, 17.68363380432129, 17.683631896972656, 17.683631896972656, 17.683626174926758, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.68363380432129, 17.683635711669922, 17.68323516845703, 17.683626174926758, 17.68359375, 17.68363380432129, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.68363380432129, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.68362808227539, 17.68352508544922, 17.683635711669922, 17.68363380432129, 17.683624267578125, 17.683635711669922, 17.68357276916504, 17.683612823486328, 17.683563232421875, 17.68363380432129, 17.683635711669922, 17.683631896972656, 17.683629989624023, 17.683631896972656, 17.683624267578125, 17.683631896972656, 17.683629989624023, 17.683631896972656, 17.683635711669922, 17.68152618408203, 17.683635711669922, 17.68363380432129, 17.68362808227539, 17.683629989624023, 17.68363380432129, 17.683631896972656, 17.68362808227539, 17.683624267578125, 17.683624267578125, 17.683589935302734, 17.683635711669922, 17.683631896972656, 17.68354034423828, 17.68363380432129, 17.683635711669922, 17.683624267578125, 17.683631896972656, 17.683629989624023, 17.683635711669922, 17.68363380432129, 17.683626174926758, 17.68363380432129, 17.683635711669922, 17.683616638183594, 17.683631896972656, 17.68362808227539, 17.683635711669922, 17.68363380432129, 17.68363380432129, 17.683496475219727, 17.683635711669922, 17.68360710144043, 17.68363380432129, 17.683616638183594, 17.683635711669922, 17.683624267578125, 17.68362808227539, 17.683635711669922, 17.683612823486328, 17.683595657348633, 17.683635711669922, 17.683605194091797, 17.683635711669922, 17.683616638183594, 17.683635711669922, 17.683631896972656, 17.683277130126953, 17.683635711669922, 17.683635711669922, 17.683629989624023, 17.683631896972656, 17.683609008789062, 17.683635711669922, 17.683635711669922, 17.683629989624023, 17.68362045288086, 17.683502197265625, 17.683631896972656, 17.683624267578125, 17.683635711669922, 17.68363380432129, 17.68363380432129, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.68360137939453, 17.683631896972656, 17.683635711669922, 17.683629989624023, 17.683626174926758, 17.683635711669922, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683635711669922, 17.68355941772461, 17.683635711669922, 17.683635711669922, 17.683589935302734, 17.683616638183594, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683603286743164, 17.683631896972656, 17.683631896972656, 17.68362808227539, 17.683635711669922, 17.68363380432129, 17.683635711669922, 17.683624267578125, 17.683631896972656, 17.683635711669922, 17.683441162109375, 17.683013916015625, 17.683609008789062, 17.683631896972656, 17.68363380432129, 17.683629989624023, 17.68362045288086, 17.683631896972656, 17.68362808227539, 17.683635711669922, 17.683609008789062, 17.68362045288086, 17.683624267578125, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683635711669922, 17.683624267578125, 17.683635711669922, 17.68355941772461, 17.683624267578125, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.68362045288086, 17.683629989624023, 17.683631896972656, 17.683635711669922, 17.683629989624023, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.68362045288086, 17.683624267578125, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683635711669922, 17.683624267578125, 17.683635711669922, 17.683624267578125, 17.683629989624023, 17.683635711669922, 17.683631896972656, 17.683631896972656, 17.683624267578125, 17.683635711669922, 17.68363380432129, 17.683635711669922, 17.683629989624023, 17.683635711669922, 17.683635711669922, 17.683631896972656, 17.683624267578125, 17.683631896972656, 17.683631896972656, 17.683622360229492, 17.683626174926758, 17.683635711669922, 17.683622360229492, 17.68362045288086, 17.683631896972656, 17.683626174926758, 17.683635711669922, 17.683635711669922, 17.683622360229492, 17.683612823486328, 17.68362808227539, 17.683631896972656, 17.68360137939453, 17.683631896972656, 17.683631896972656, 17.683631896972656, 17.683618545532227, 17.683631896972656, 17.683597564697266, 17.683631896972656, 17.683612823486328, 17.683609008789062, 17.683631896972656, 17.68362045288086, 17.683624267578125, 17.68317413330078, 17.68363380432129, 17.683631896972656, 17.683626174926758, 17.683631896972656, 17.683635711669922, 17.683626174926758, 17.683631896972656, 17.683618545532227, 17.683631896972656, 17.68362045288086, 17.683635711669922, 17.683635711669922, 17.683605194091797, 17.683635711669922, 17.683631896972656, 17.683629989624023, 17.683624267578125, 17.683631896972656, 17.683618545532227, 17.68363380432129, 17.683612823486328, 17.683629989624023, 17.683635711669922, 17.683629989624023]
Actual: [tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([49.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([31694.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([45.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([713.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([144.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([54780.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([41.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64)]
MSE: 8005851.457837459
Predicted: [16.5553035736084, 16.5553035736084, 16.555269241333008, 16.55530548095703, 16.5553035736084, 16.55530548095703, 16.555307388305664, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.555295944213867, 16.555294036865234, 16.55430793762207, 16.5553035736084, 16.555299758911133, 16.55525779724121, 16.55521583557129, 16.555299758911133, 16.555301666259766, 16.55530548095703, 16.555299758911133, 16.555299758911133, 16.555307388305664, 16.55529022216797, 16.5551815032959, 16.555294036865234, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.554534912109375, 16.554899215698242, 16.555299758911133, 16.5553035736084, 16.555307388305664, 16.555301666259766, 16.555301666259766, 16.5553035736084, 16.55523109436035, 16.555288314819336, 16.55530548095703, 16.55530548095703, 16.555301666259766, 16.555212020874023, 16.55530548095703, 16.555299758911133, 16.555299758911133, 16.555307388305664, 16.55530548095703, 16.5553035736084, 16.55530548095703, 16.555307388305664, 16.5553035736084, 16.55463218688965, 16.55530548095703, 16.555288314819336, 16.5553035736084, 16.5553035736084, 16.555301666259766, 16.55527687072754, 16.55530548095703, 16.555299758911133, 16.555307388305664, 16.5553035736084, 16.55530548095703, 16.555307388305664, 16.555299758911133, 16.55530548095703, 16.555261611938477, 16.555294036865234, 16.5553035736084, 16.55526351928711, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.555294036865234, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.555307388305664, 16.5552978515625, 16.5553035736084, 16.5552978515625, 16.555307388305664, 16.5553035736084, 16.555307388305664, 16.55529022216797, 16.55530548095703, 16.555299758911133, 16.555307388305664, 16.555307388305664, 16.5553035736084, 16.5552921295166, 16.55530548095703, 16.555288314819336, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.555288314819336, 16.55530548095703, 16.555295944213867, 16.55530548095703, 16.5553035736084, 16.55530548095703, 16.555299758911133, 16.5553035736084, 16.555294036865234, 16.5553035736084, 16.555288314819336, 16.555307388305664, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.555299758911133, 16.5552978515625, 16.555299758911133, 16.5553035736084, 16.555307388305664, 16.55528450012207, 16.5553035736084, 16.55530548095703, 16.555299758911133, 16.555295944213867, 16.555307388305664, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.55528450012207, 16.5553035736084, 16.555299758911133, 16.5553035736084, 16.5552978515625, 16.5553035736084, 16.555299758911133, 16.555299758911133, 16.55530548095703, 16.5553035736084, 16.555307388305664, 16.55530548095703, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555307388305664, 16.555295944213867, 16.5553035736084, 16.5553035736084, 16.555280685424805, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555299758911133, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555282592773438, 16.555295944213867, 16.5552978515625, 16.5553035736084, 16.5552978515625, 16.555301666259766, 16.5553035736084, 16.55530548095703, 16.55530548095703, 16.555307388305664, 16.5553035736084, 16.555299758911133, 16.555307388305664, 16.555273056030273, 16.55528450012207, 16.5553035736084, 16.5550537109375, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.555301666259766, 16.555299758911133, 16.5553035736084, 16.555299758911133, 16.555269241333008, 16.555307388305664, 16.555192947387695, 16.5553035736084, 16.555265426635742, 16.555294036865234, 16.5553035736084, 16.555307388305664, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.55529022216797, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.55527114868164, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.555301666259766, 16.555299758911133, 16.55530548095703, 16.555299758911133, 16.5553035736084, 16.555307388305664, 16.555307388305664, 16.555299758911133, 16.555299758911133, 16.55527114868164, 16.555301666259766, 16.555307388305664, 16.55530548095703, 16.555299758911133, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.555265426635742, 16.5553035736084, 16.555280685424805, 16.55530548095703, 16.55530548095703, 16.555307388305664, 16.555299758911133, 16.5553035736084, 16.555301666259766, 16.5553035736084, 16.555269241333008, 16.55530548095703, 16.5553035736084, 16.555307388305664, 16.555288314819336, 16.55529022216797, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.55520248413086, 16.555238723754883, 16.555299758911133, 16.555307388305664, 16.5553035736084, 16.555299758911133, 16.5553035736084, 16.555301666259766, 16.555295944213867, 16.555294036865234, 16.555301666259766, 16.555307388305664, 16.5553035736084, 16.555301666259766, 16.555299758911133, 16.555301666259766, 16.55525779724121, 16.555299758911133, 16.555301666259766, 16.555288314819336, 16.5553035736084, 16.555299758911133, 16.55530548095703, 16.5553035736084, 16.555280685424805, 16.555307388305664, 16.55530548095703, 16.555269241333008, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.55530548095703, 16.55530548095703, 16.555307388305664, 16.555299758911133, 16.555307388305664, 16.555301666259766, 16.55529022216797, 16.555301666259766, 16.555273056030273, 16.555299758911133, 16.555299758911133, 16.555198669433594, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.555294036865234, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555299758911133, 16.555307388305664, 16.555286407470703, 16.555299758911133, 16.555294036865234, 16.5552921295166, 16.55523681640625, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.5552921295166, 16.555267333984375, 16.5553035736084, 16.555299758911133, 16.5553035736084, 16.5553035736084, 16.555282592773438, 16.55530548095703, 16.5553035736084, 16.55525016784668, 16.555288314819336, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.554107666015625, 16.555307388305664, 16.5552921295166, 16.555301666259766, 16.555307388305664, 16.5552921295166, 16.555282592773438, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555294036865234, 16.5552978515625, 16.5553035736084, 16.555299758911133, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.5544490814209, 16.555301666259766, 16.555299758911133, 16.5553035736084, 16.555200576782227, 16.5553035736084, 16.555301666259766, 16.55530548095703, 16.555295944213867, 16.555288314819336, 16.5553035736084, 16.555299758911133, 16.5552921295166, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.555299758911133, 16.5552921295166, 16.5553035736084, 16.555295944213867, 16.5553035736084, 16.555269241333008, 16.55528450012207, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.55525779724121, 16.5553035736084, 16.5553035736084, 16.5552921295166, 16.5553035736084, 16.55525779724121, 16.555299758911133, 16.555301666259766, 16.5553035736084, 16.5553035736084, 16.555265426635742, 16.5553035736084, 16.555286407470703, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.555301666259766, 16.5553035736084, 16.555307388305664, 16.555288314819336, 16.555299758911133, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555307388305664, 16.555286407470703, 16.555299758911133, 16.555295944213867, 16.55530548095703, 16.555288314819336, 16.555299758911133, 16.555299758911133, 16.555301666259766, 16.55530548095703, 16.5553035736084, 16.555301666259766, 16.5553035736084, 16.5552921295166, 16.555307388305664, 16.55528450012207, 16.55530548095703, 16.5553035736084, 16.555299758911133, 16.55530548095703, 16.5553035736084, 16.55530548095703, 16.555301666259766, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555295944213867, 16.5553035736084, 16.555307388305664, 16.555299758911133, 16.5553035736084, 16.55528450012207, 16.555265426635742, 16.555307388305664, 16.5553035736084, 16.5553035736084, 16.55530548095703, 16.5553035736084, 16.555307388305664, 16.555307388305664, 16.555294036865234, 16.555307388305664, 16.5553035736084, 16.555307388305664, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.555307388305664, 16.5553035736084, 16.55530548095703, 16.554841995239258, 16.555307388305664, 16.5553035736084, 16.555307388305664, 16.555307388305664, 16.5553035736084, 16.555299758911133, 16.55530548095703, 16.555112838745117, 16.555307388305664, 16.5552921295166, 16.555299758911133, 16.5553035736084, 16.555238723754883, 16.55530548095703, 16.5553035736084, 16.5553035736084, 16.55519676208496, 16.555301666259766, 16.555295944213867, 16.55530548095703, 16.555295944213867, 16.5553035736084, 16.554372787475586, 16.5552978515625, 16.55530548095703, 16.55530548095703, 16.5553035736084, 16.5552921295166, 16.555288314819336, 16.555299758911133, 16.55528450012207, 16.555261611938477, 16.555299758911133, 16.5553035736084, 16.555288314819336]
Actual: [tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([121.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([146.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([35.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 269.4351488722116
Predicted: [16.911039352416992, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911067962646484, 16.911067962646484, 16.911069869995117, 16.911075592041016, 16.911067962646484, 16.911056518554688, 16.911067962646484, 16.911067962646484, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911069869995117, 16.911073684692383, 16.911060333251953, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911060333251953, 16.911052703857422, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911069869995117, 16.91106414794922, 16.911075592041016, 16.911073684692383, 16.911033630371094, 16.91103172302246, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911054611206055, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911056518554688, 16.911073684692383, 16.911056518554688, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911069869995117, 16.91105842590332, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.911075592041016, 16.91106414794922, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911069869995117, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911067962646484, 16.911056518554688, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.911052703857422, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911067962646484, 16.911075592041016, 16.911073684692383, 16.9110050201416, 16.911056518554688, 16.91106605529785, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.910953521728516, 16.91107177734375, 16.91107177734375, 16.91107177734375, 16.911062240600586, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.910951614379883, 16.91107177734375, 16.91107177734375, 16.911067962646484, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.910964965820312, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91106414794922, 16.911073684692383, 16.911075592041016, 16.911048889160156, 16.911056518554688, 16.91107177734375, 16.911073684692383, 16.91104507446289, 16.911067962646484, 16.91098403930664, 16.911073684692383, 16.911073684692383, 16.911054611206055, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91106414794922, 16.911014556884766, 16.91106605529785, 16.911075592041016, 16.911073684692383, 16.911046981811523, 16.911067962646484, 16.911067962646484, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.91106414794922, 16.91107177734375, 16.91107177734375, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.91107177734375, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911056518554688, 16.91105079650879, 16.911073684692383, 16.911075592041016, 16.911067962646484, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.9110107421875, 16.911062240600586, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911060333251953, 16.911069869995117, 16.91106414794922, 16.911060333251953, 16.911073684692383, 16.91106414794922, 16.911062240600586, 16.911073684692383, 16.9110050201416, 16.91107177734375, 16.911067962646484, 16.911060333251953, 16.911067962646484, 16.911073684692383, 16.911052703857422, 16.911073684692383, 16.91106605529785, 16.911073684692383, 16.91107177734375, 16.91106414794922, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.910829544067383, 16.911073684692383, 16.911067962646484, 16.911069869995117, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.911056518554688, 16.911075592041016, 16.911073684692383, 16.91106414794922, 16.91107177734375, 16.911073684692383, 16.91106414794922, 16.9110164642334, 16.911027908325195, 16.911067962646484, 16.911073684692383, 16.91107177734375, 16.91095733642578, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911069869995117, 16.911075592041016, 16.911062240600586, 16.911073684692383, 16.911033630371094, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.91105842590332, 16.91105842590332, 16.911075592041016, 16.911052703857422, 16.91107177734375, 16.911067962646484, 16.911073684692383, 16.911073684692383, 16.911048889160156, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.911069869995117, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911060333251953, 16.911073684692383, 16.91104507446289, 16.911056518554688, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911075592041016, 16.91106605529785, 16.911054611206055, 16.911075592041016, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.911052703857422, 16.911067962646484, 16.91107177734375, 16.91107177734375, 16.911067962646484, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911056518554688, 16.91107177734375, 16.911075592041016, 16.91106605529785, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.911075592041016, 16.911069869995117, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911067962646484, 16.91107177734375, 16.91107177734375, 16.911075592041016, 16.911060333251953, 16.911067962646484, 16.911075592041016, 16.9110164642334, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911067962646484, 16.91107177734375, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.911067962646484, 16.911073684692383, 16.911067962646484, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911067962646484, 16.91107177734375, 16.911073684692383, 16.911075592041016, 16.911073684692383, 16.911075592041016, 16.91106414794922, 16.911062240600586, 16.911067962646484, 16.91107177734375, 16.911073684692383, 16.911069869995117, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.911067962646484, 16.91106605529785, 16.911069869995117, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911060333251953, 16.91106414794922, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.911067962646484, 16.911073684692383, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911048889160156, 16.911060333251953, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91106414794922, 16.911075592041016, 16.911073684692383, 16.91107177734375, 16.91107177734375, 16.911073684692383, 16.911067962646484, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911067962646484, 16.911073684692383, 16.91106414794922, 16.911048889160156, 16.911069869995117, 16.911067962646484, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.91107177734375, 16.911060333251953, 16.911073684692383, 16.91107177734375, 16.911075592041016, 16.911073684692383, 16.911075592041016, 16.911060333251953, 16.911069869995117, 16.91107177734375, 16.91107177734375, 16.911075592041016, 16.91107177734375, 16.911073684692383, 16.911048889160156, 16.911075592041016, 16.911069869995117, 16.911073684692383, 16.911073684692383, 16.911067962646484, 16.911054611206055, 16.911056518554688, 16.91107177734375, 16.911073684692383, 16.911060333251953, 16.911073684692383, 16.91107177734375, 16.911073684692383, 16.911075592041016, 16.911060333251953, 16.911075592041016, 16.911073684692383]
Actual: [tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([95.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([58.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3466.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([33.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3796.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([74.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5713.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 117498.03504941156
Predicted: [16.14828872680664, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.148399353027344, 16.148408889770508, 16.148408889770508, 16.148401260375977, 16.148405075073242, 16.148408889770508, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.14836883544922, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148405075073242, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.147905349731445, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148408889770508, 16.148406982421875, 16.14839744567871, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148391723632812, 16.148405075073242, 16.148399353027344, 16.148405075073242, 16.14840316772461, 16.148313522338867, 16.148406982421875, 16.148406982421875, 16.148399353027344, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.148391723632812, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.14815330505371, 16.148330688476562, 16.148406982421875, 16.14840316772461, 16.148395538330078, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14839744567871, 16.148399353027344, 16.148406982421875, 16.148405075073242, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148387908935547, 16.148408889770508, 16.14840316772461, 16.14833641052246, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14832878112793, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148406982421875, 16.148406982421875, 16.14839744567871, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148326873779297, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148399353027344, 16.148401260375977, 16.14838218688965, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148405075073242, 16.148405075073242, 16.148406982421875, 16.148319244384766, 16.148408889770508, 16.148399353027344, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148408889770508, 16.148405075073242, 16.148406982421875, 16.14834976196289, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148401260375977, 16.148408889770508, 16.148395538330078, 16.14840316772461, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14825439453125, 16.148406982421875, 16.148408889770508, 16.148399353027344, 16.148401260375977, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.14832878112793, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148401260375977, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148405075073242, 16.148391723632812, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148399353027344, 16.148374557495117, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148405075073242, 16.148406982421875, 16.148408889770508, 16.148319244384766, 16.14840316772461, 16.148406982421875, 16.148405075073242, 16.148405075073242, 16.148386001586914, 16.148406982421875, 16.14826011657715, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148372650146484, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148401260375977, 16.14838409423828, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148405075073242, 16.14840316772461, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148401260375977, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148380279541016, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148399353027344, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148401260375977, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14837646484375, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148401260375977, 16.148408889770508, 16.14840316772461, 16.148391723632812, 16.148406982421875, 16.148406982421875, 16.14826774597168, 16.148406982421875, 16.148405075073242, 16.14837646484375, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148405075073242, 16.148405075073242, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148399353027344, 16.148387908935547, 16.148408889770508, 16.14838409423828, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148401260375977, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148405075073242, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148408889770508, 16.148405075073242, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14839744567871, 16.148408889770508, 16.148408889770508, 16.148372650146484, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.14840316772461, 16.148088455200195, 16.14840316772461, 16.148408889770508, 16.14840316772461, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.14839744567871, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.14840316772461, 16.14837646484375, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148405075073242, 16.148406982421875, 16.14840316772461, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.14834213256836, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148405075073242, 16.148408889770508, 16.148406982421875, 16.148405075073242, 16.148393630981445, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148170471191406, 16.148408889770508, 16.14839744567871, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148395538330078, 16.148406982421875, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.147695541381836, 16.14840316772461, 16.148406982421875, 16.14840316772461, 16.148406982421875, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148408889770508, 16.148399353027344, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148393630981445, 16.148408889770508, 16.148408889770508, 16.148405075073242, 16.148408889770508, 16.14840316772461, 16.14840316772461, 16.148408889770508, 16.14840316772461, 16.148399353027344, 16.14839744567871, 16.148408889770508, 16.148406982421875, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.14836883544922, 16.14838981628418, 16.148408889770508, 16.148406982421875, 16.148406982421875, 16.148406982421875, 16.148408889770508, 16.148408889770508]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1701.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([49.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([284.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 6028.638289232266
Predicted: [13.672572135925293, 13.672574996948242, 13.672581672668457, 13.672585487365723, 13.672562599182129, 13.672568321228027, 13.672581672668457, 13.67258358001709, 13.67258071899414, 13.672579765319824, 13.672566413879395, 13.672551155090332, 13.67258358001709, 13.672577857971191, 13.672534942626953, 13.672579765319824, 13.672557830810547, 13.672585487365723, 13.672566413879395, 13.672558784484863, 13.672538757324219, 13.672566413879395, 13.67255973815918, 13.672562599182129, 13.672577857971191, 13.672586441040039, 13.672553062438965, 13.672579765319824, 13.672567367553711, 13.672484397888184, 13.672579765319824, 13.672581672668457, 13.672541618347168, 13.67248821258545, 13.670987129211426, 13.672564506530762, 13.672585487365723, 13.672564506530762, 13.672576904296875, 13.672551155090332, 13.672533988952637, 13.672586441040039, 13.672572135925293, 13.67258358001709, 13.672574043273926, 13.67257308959961, 13.672582626342773, 13.672560691833496, 13.672324180603027, 13.67255973815918, 13.672575950622559, 13.672571182250977, 13.672537803649902, 13.672558784484863, 13.672576904296875, 13.672567367553711, 13.67258358001709, 13.672575950622559, 13.672564506530762, 13.67258358001709, 13.672586441040039, 13.672307014465332, 13.67258071899414, 13.672582626342773, 13.672575950622559, 13.672361373901367, 13.672567367553711, 13.672533988952637, 13.672574043273926, 13.672518730163574, 13.672574043273926, 13.672539710998535, 13.672553062438965, 13.672585487365723, 13.67255687713623, 13.672579765319824, 13.672563552856445, 13.672579765319824, 13.672490119934082, 13.672587394714355, 13.672567367553711, 13.672558784484863, 13.672585487365723, 13.672562599182129, 13.67257308959961, 13.672577857971191, 13.672575950622559, 13.67252254486084, 13.672587394714355, 13.672581672668457, 13.672566413879395, 13.672586441040039, 13.672575950622559, 13.672578811645508, 13.672567367553711, 13.672476768493652, 13.672525405883789, 13.672572135925293, 13.672537803649902, 13.672565460205078, 13.67258358001709, 13.672572135925293, 13.672567367553711, 13.67258358001709, 13.672560691833496, 13.672517776489258, 13.672562599182129, 13.672572135925293, 13.672554969787598, 13.672588348388672, 13.672545433044434, 13.672521591186523, 13.672572135925293, 13.67255687713623, 13.672575950622559, 13.672584533691406, 13.672517776489258, 13.67258071899414, 13.672582626342773, 13.672577857971191, 13.672563552856445, 13.672489166259766, 13.67255687713623, 13.672568321228027, 13.67257308959961, 13.672547340393066, 13.672545433044434, 13.672565460205078, 13.669853210449219, 13.672497749328613, 13.67258071899414, 13.672562599182129, 13.672459602355957, 13.672575950622559, 13.672572135925293, 13.672553062438965, 13.672585487365723, 13.67258358001709, 13.672536849975586, 13.672538757324219, 13.672528266906738, 13.672567367553711, 13.67243480682373, 13.6723051071167, 13.672581672668457, 13.67255973815918, 13.672574043273926, 13.67258358001709, 13.672575950622559, 13.67257308959961, 13.672503471374512, 13.672572135925293, 13.672578811645508, 13.67257308959961, 13.672586441040039, 13.672579765319824, 13.672582626342773, 13.672450065612793, 13.672574043273926, 13.672575950622559, 13.672568321228027, 13.672579765319824, 13.672579765319824, 13.672581672668457, 13.672589302062988, 13.672574043273926, 13.672587394714355, 13.672574043273926, 13.672585487365723, 13.672582626342773, 13.672552108764648, 13.672560691833496, 13.672581672668457, 13.672551155090332, 13.672545433044434, 13.672572135925293, 13.67258358001709, 13.672572135925293, 13.672564506530762, 13.672547340393066, 13.67258358001709, 13.672545433044434, 13.672574996948242, 13.672574043273926, 13.672572135925293, 13.6725492477417, 13.672542572021484, 13.672562599182129, 13.672579765319824, 13.67258358001709, 13.67258358001709, 13.672577857971191, 13.672578811645508, 13.67253589630127, 13.672551155090332, 13.672503471374512, 13.67255687713623, 13.672562599182129, 13.672492027282715, 13.67254638671875, 13.672581672668457, 13.672409057617188, 13.67258358001709, 13.67258358001709, 13.672531127929688, 13.67258358001709, 13.672572135925293, 13.672544479370117, 13.672581672668457, 13.672579765319824, 13.6680326461792, 13.672581672668457, 13.672581672668457, 13.672577857971191, 13.672582626342773, 13.672548294067383, 13.67258358001709, 13.672530174255371, 13.672564506530762, 13.67258071899414, 13.672463417053223, 13.672576904296875, 13.672576904296875, 13.672566413879395, 13.67258358001709, 13.672564506530762, 13.672578811645508, 13.672507286071777, 13.67249584197998, 13.672562599182129, 13.672575950622559, 13.672572135925293, 13.672579765319824, 13.672565460205078, 13.672579765319824, 13.672585487365723, 13.6725492477417, 13.672579765319824, 13.672566413879395, 13.672574043273926, 13.672577857971191, 13.672587394714355, 13.672483444213867, 13.672579765319824, 13.672554969787598, 13.672575950622559, 13.672575950622559, 13.672553062438965, 13.672577857971191, 13.67258358001709, 13.672574996948242, 13.672551155090332, 13.672538757324219, 13.672577857971191, 13.672577857971191, 13.672560691833496, 13.672513008117676, 13.672574043273926, 13.67257022857666, 13.672581672668457, 13.672566413879395, 13.67258071899414, 13.67258071899414, 13.672585487365723, 13.672547340393066, 13.672574043273926, 13.67257022857666, 13.672520637512207, 13.67258071899414, 13.672579765319824, 13.67258071899414, 13.672582626342773, 13.672581672668457, 13.672579765319824, 13.672524452209473, 13.672579765319824, 13.67257022857666, 13.672574043273926, 13.672581672668457, 13.67258071899414, 13.672577857971191, 13.67258358001709, 13.67257308959961, 13.672502517700195, 13.67255973815918, 13.672554016113281, 13.67249584197998, 13.672577857971191, 13.672577857971191, 13.672568321228027, 13.67258071899414, 13.672576904296875, 13.672575950622559, 13.672562599182129, 13.672551155090332, 13.672560691833496, 13.67248821258545, 13.672554969787598, 13.6725435256958, 13.672551155090332, 13.672581672668457, 13.672476768493652, 13.672582626342773, 13.672554969787598, 13.672557830810547, 13.672487258911133, 13.672581672668457, 13.672536849975586, 13.672568321228027, 13.67258358001709, 13.672574043273926, 13.672575950622559, 13.672562599182129, 13.672514915466309, 13.672572135925293, 13.672411918640137, 13.672538757324219, 13.67258071899414, 13.672499656677246, 13.672577857971191, 13.672575950622559, 13.67255973815918, 13.672585487365723, 13.6725492477417, 13.672554969787598, 13.672582626342773, 13.67258071899414, 13.672572135925293, 13.67258358001709, 13.672507286071777, 13.672579765319824, 13.672525405883789, 13.672450065612793, 13.67258071899414, 13.672561645507812, 13.672430038452148, 13.672585487365723, 13.672575950622559, 13.672511100769043, 13.672557830810547, 13.672581672668457, 13.672576904296875, 13.672557830810547, 13.672581672668457, 13.672579765319824, 13.672575950622559, 13.672578811645508, 13.67258071899414, 13.672562599182129, 13.672560691833496, 13.672585487365723, 13.672567367553711, 13.67255687713623, 13.672587394714355, 13.672574043273926, 13.672581672668457, 13.672579765319824, 13.6725492477417, 13.672574996948242, 13.672575950622559, 13.672513961791992, 13.672520637512207, 13.672582626342773, 13.672579765319824, 13.672568321228027, 13.672471046447754, 13.672585487365723, 13.672525405883789, 13.670268058776855, 13.672362327575684, 13.67258358001709, 13.672577857971191, 13.672576904296875, 13.672581672668457, 13.672579765319824, 13.672564506530762, 13.672545433044434, 13.672554016113281, 13.672577857971191, 13.672575950622559, 13.672554969787598, 13.672581672668457, 13.672051429748535, 13.672572135925293, 13.672579765319824, 13.672525405883789, 13.672566413879395, 13.672567367553711, 13.672534942626953, 13.672579765319824, 13.672581672668457, 13.67258358001709, 13.67258358001709, 13.672574996948242, 13.67255973815918, 13.672564506530762, 13.672581672668457, 13.672557830810547, 13.672574996948242, 13.672567367553711, 13.67257022857666, 13.672138214111328, 13.672579765319824, 13.67243766784668, 13.672440528869629, 13.672574996948242, 13.672577857971191, 13.672585487365723, 13.672574996948242, 13.67248821258545, 13.6725435256958, 13.672584533691406, 13.672564506530762, 13.672550201416016, 13.672575950622559, 13.672435760498047, 13.672557830810547, 13.672575950622559, 13.672579765319824, 13.672574043273926, 13.672564506530762, 13.672587394714355, 13.67255687713623, 13.672560691833496, 13.672586441040039, 13.672566413879395, 13.672579765319824, 13.672585487365723, 13.672578811645508, 13.672542572021484, 13.672558784484863, 13.672578811645508, 13.672579765319824, 13.672581672668457, 13.67255973815918, 13.672528266906738, 13.672579765319824, 13.672579765319824, 13.672554969787598, 13.672574996948242, 13.672574043273926, 13.672579765319824, 13.672579765319824, 13.672578811645508, 13.672493934631348, 13.672568321228027, 13.672581672668457, 13.67258071899414, 13.672551155090332, 13.671960830688477, 13.672581672668457, 13.672503471374512, 13.672574043273926, 13.672472953796387, 13.672581672668457, 13.672547340393066, 13.672576904296875, 13.672506332397461, 13.672568321228027, 13.672585487365723, 13.67258071899414, 13.672566413879395, 13.672560691833496, 13.672484397888184, 13.672586441040039, 13.672577857971191, 13.672514915466309, 13.672533988952637, 13.672582626342773, 13.672566413879395, 13.672581672668457, 13.67257308959961, 13.672579765319824, 13.672589302062988, 13.672587394714355, 13.672577857971191, 13.672582626342773, 13.672572135925293, 13.672013282775879, 13.672561645507812, 13.672471046447754, 13.67257308959961, 13.672572135925293, 13.672582626342773, 13.672577857971191, 13.672450065612793, 13.67257308959961, 13.672557830810547, 13.672560691833496, 13.672554969787598, 13.672479629516602, 13.6725435256958, 13.672551155090332, 13.672582626342773, 13.672589302062988, 13.672566413879395, 13.672577857971191, 13.672538757324219, 13.672564506530762, 13.67258358001709]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([36.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([82.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([56.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([65.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 170.85218549511902
Predicted: [13.18616008758545, 13.18616008758545, 13.186159133911133, 13.186159133911133, 13.186159133911133, 13.186161041259766, 13.186161994934082, 13.186164855957031, 13.186159133911133, 13.186161041259766, 13.186161994934082, 13.186161041259766, 13.186161041259766, 13.186225891113281, 13.186186790466309, 13.18616771697998, 13.186161041259766, 13.18616008758545, 13.186162948608398, 13.186166763305664, 13.186172485351562, 13.186161041259766, 13.186162948608398, 13.186159133911133, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.18616008758545, 13.186159133911133, 13.18617057800293, 13.186163902282715, 13.186161994934082, 13.186162948608398, 13.186164855957031, 13.186161041259766, 13.186163902282715, 13.18616008758545, 13.186172485351562, 13.186162948608398, 13.186162948608398, 13.186163902282715, 13.186162948608398, 13.186164855957031, 13.186159133911133, 13.186161041259766, 13.186159133911133, 13.18621826171875, 13.186159133911133, 13.186159133911133, 13.18616008758545, 13.186166763305664, 13.18616008758545, 13.186173439025879, 13.186166763305664, 13.186161041259766, 13.186164855957031, 13.18616008758545, 13.18616008758545, 13.186161041259766, 13.186399459838867, 13.18617057800293, 13.186287879943848, 13.186161041259766, 13.186161041259766, 13.186278343200684, 13.18618392944336, 13.186166763305664, 13.186161041259766, 13.186161994934082, 13.186173439025879, 13.18616008758545, 13.186163902282715, 13.186166763305664, 13.186161041259766, 13.186281204223633, 13.186161041259766, 13.18617057800293, 13.186161041259766, 13.18629264831543, 13.186161041259766, 13.186172485351562, 13.18616008758545, 13.186182022094727, 13.186169624328613, 13.186162948608398, 13.186164855957031, 13.186161041259766, 13.18616008758545, 13.186172485351562, 13.186236381530762, 13.186166763305664, 13.186159133911133, 13.186161041259766, 13.186163902282715, 13.186162948608398, 13.186159133911133, 13.186161041259766, 13.186161041259766, 13.186189651489258, 13.186159133911133, 13.186163902282715, 13.186159133911133, 13.186161994934082, 13.186161041259766, 13.186355590820312, 13.18616008758545, 13.186162948608398, 13.186168670654297, 13.186159133911133, 13.18616008758545, 13.186245918273926, 13.186161041259766, 13.18619155883789, 13.186182022094727, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186168670654297, 13.18616008758545, 13.186164855957031, 13.186161994934082, 13.186162948608398, 13.186161041259766, 13.186162948608398, 13.186159133911133, 13.186159133911133, 13.186162948608398, 13.186163902282715, 13.186161041259766, 13.186173439025879, 13.18616008758545, 13.186178207397461, 13.186422348022461, 13.186174392700195, 13.186161041259766, 13.186172485351562, 13.186161041259766, 13.186163902282715, 13.186178207397461, 13.186164855957031, 13.186161041259766, 13.186159133911133, 13.186161041259766, 13.186161041259766, 13.186169624328613, 13.186161041259766, 13.186163902282715, 13.186180114746094, 13.186168670654297, 13.186286926269531, 13.186174392700195, 13.18616008758545, 13.186164855957031, 13.186807632446289, 13.186246871948242, 13.186161041259766, 13.18620777130127, 13.186173439025879, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186172485351562, 13.18617057800293, 13.18616771697998, 13.18616771697998, 13.186162948608398, 13.186161041259766, 13.186163902282715, 13.186159133911133, 13.186164855957031, 13.186168670654297, 13.186283111572266, 13.186193466186523, 13.186175346374512, 13.186161041259766, 13.186161041259766, 13.186168670654297, 13.186164855957031, 13.186161041259766, 13.186161994934082, 13.186164855957031, 13.186159133911133, 13.186260223388672, 13.186161041259766, 13.186161041259766, 13.186172485351562, 13.186166763305664, 13.18616008758545, 13.186162948608398, 13.186162948608398, 13.18618106842041, 13.18616008758545, 13.18616008758545, 13.186162948608398, 13.18617057800293, 13.186162948608398, 13.186162948608398, 13.186163902282715, 13.186159133911133, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.1865234375, 13.186161041259766, 13.186219215393066, 13.186323165893555, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186159133911133, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186211585998535, 13.18617057800293, 13.186162948608398, 13.186161041259766, 13.18616008758545, 13.186180114746094, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186168670654297, 13.186161041259766, 13.186161041259766, 13.186165809631348, 13.186161041259766, 13.186168670654297, 13.186164855957031, 13.186192512512207, 13.186162948608398, 13.186159133911133, 13.186159133911133, 13.186164855957031, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186187744140625, 13.186161041259766, 13.186173439025879, 13.186161041259766, 13.186166763305664, 13.186162948608398, 13.18616008758545, 13.18617057800293, 13.18616008758545, 13.186164855957031, 13.186164855957031, 13.186161041259766, 13.186162948608398, 13.186161994934082, 13.186178207397461, 13.186161041259766, 13.186162948608398, 13.186161994934082, 13.186161994934082, 13.18616008758545, 13.186172485351562, 13.186159133911133, 13.186163902282715, 13.186165809631348, 13.186161041259766, 13.186161994934082, 13.186159133911133, 13.186161041259766, 13.18616008758545, 13.18616008758545, 13.18617057800293, 13.186161041259766, 13.18616008758545, 13.186162948608398, 13.18616771697998, 13.186180114746094, 13.18616008758545, 13.186159133911133, 13.186161041259766, 13.186159133911133, 13.187366485595703, 13.186162948608398, 13.186168670654297, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186168670654297, 13.186161041259766, 13.186166763305664, 13.186166763305664, 13.186166763305664, 13.186161041259766, 13.18616771697998, 13.186162948608398, 13.186165809631348, 13.186161041259766, 13.186223983764648, 13.186161041259766, 13.186161041259766, 13.186159133911133, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186159133911133, 13.186166763305664, 13.18616008758545, 13.186161041259766, 13.186162948608398, 13.186164855957031, 13.186159133911133, 13.186168670654297, 13.186162948608398, 13.186161041259766, 13.186161994934082, 13.186159133911133, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186176300048828, 13.186161041259766, 13.186159133911133, 13.186161041259766, 13.186162948608398, 13.186166763305664, 13.186161041259766, 13.186164855957031, 13.186161041259766, 13.186159133911133, 13.186159133911133, 13.186212539672852, 13.186175346374512, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186172485351562, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.18617057800293, 13.18616008758545, 13.186161041259766, 13.186159133911133, 13.186161041259766, 13.186166763305664, 13.186164855957031, 13.186171531677246, 13.186161041259766, 13.186164855957031, 13.186161041259766, 13.186185836791992, 13.186161041259766, 13.186165809631348, 13.186166763305664, 13.18616008758545, 13.186173439025879, 13.186161994934082, 13.186161041259766, 13.18616008758545, 13.186161994934082, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186168670654297, 13.186162948608398, 13.18631362915039, 13.186159133911133, 13.186165809631348, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186165809631348, 13.186161041259766, 13.186208724975586, 13.186253547668457, 13.186161041259766, 13.186161041259766, 13.186159133911133, 13.186222076416016, 13.186161041259766, 13.186163902282715, 13.18616008758545, 13.186161041259766, 13.186159133911133, 13.186210632324219, 13.186162948608398, 13.18616008758545, 13.18616771697998, 13.186163902282715, 13.186161041259766, 13.186166763305664, 13.186176300048828, 13.186162948608398, 13.186165809631348, 13.186161041259766, 13.186177253723145, 13.186161041259766, 13.186159133911133, 13.186162948608398, 13.186378479003906, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186162948608398, 13.186178207397461, 13.186161041259766, 13.186162948608398, 13.186161994934082, 13.186162948608398, 13.186164855957031, 13.186164855957031, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186164855957031, 13.186176300048828, 13.186162948608398, 13.186163902282715, 13.186162948608398, 13.186164855957031, 13.186161041259766, 13.186165809631348, 13.186164855957031, 13.18616008758545, 13.186166763305664, 13.186161041259766, 13.186159133911133, 13.186262130737305, 13.186162948608398, 13.186269760131836, 13.186161041259766, 13.186172485351562, 13.186161041259766, 13.186164855957031, 13.18616008758545, 13.186159133911133, 13.186166763305664, 13.186185836791992, 13.186161041259766, 13.186159133911133, 13.186161994934082, 13.186161041259766, 13.18618106842041, 13.186162948608398, 13.186161041259766, 13.186162948608398, 13.186161041259766, 13.186162948608398, 13.186164855957031, 13.186168670654297, 13.18616008758545, 13.186163902282715, 13.186161041259766, 13.186161041259766, 13.18616008758545, 13.186161041259766, 13.186161041259766, 13.186159133911133, 13.186164855957031, 13.18616771697998, 13.186163902282715, 13.186161041259766, 13.186185836791992, 13.186209678649902, 13.186161041259766, 13.186162948608398, 13.186161041259766, 13.186161041259766, 13.186164855957031, 13.186159133911133, 13.186172485351562, 13.18618106842041, 13.186182022094727, 13.186172485351562, 13.186162948608398, 13.186161041259766, 13.186161994934082, 13.186161041259766, 13.186168670654297, 13.18616008758545, 13.186168670654297, 13.186168670654297, 13.186164855957031, 13.186161041259766, 13.186163902282715, 13.186159133911133, 13.186178207397461]
Actual: [tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([32.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([20.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([128.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([248.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64)]
MSE: 266.69774772847387
Predicted: [12.536105155944824, 12.53571605682373, 12.53608512878418, 12.536184310913086, 12.535959243774414, 12.536064147949219, 12.53585147857666, 12.535584449768066, 12.536066055297852, 12.53609561920166, 12.53588581085205, 12.535858154296875, 12.535895347595215, 12.536026000976562, 12.536116600036621, 12.53593921661377, 12.536137580871582, 12.536123275756836, 12.535561561584473, 12.535512924194336, 12.535889625549316, 12.53581714630127, 12.536067008972168, 12.535670280456543, 12.535979270935059, 12.536140441894531, 12.535395622253418, 12.535712242126465, 12.535449028015137, 12.536090850830078, 12.542511940002441, 12.536099433898926, 12.535629272460938, 12.535984992980957, 12.535822868347168, 12.535733222961426, 12.535811424255371, 12.535365104675293, 12.535557746887207, 12.535989761352539, 12.535811424255371, 12.536057472229004, 12.536070823669434, 12.535924911499023, 12.536056518554688, 12.5358247756958, 12.535967826843262, 12.535981178283691, 12.535722732543945, 12.536154747009277, 12.536084175109863, 12.537947654724121, 12.536087989807129, 12.536120414733887, 12.535981178283691, 12.536131858825684, 12.535746574401855, 12.536040306091309, 12.535700798034668, 12.536086082458496, 12.535998344421387, 12.535548210144043, 12.535889625549316, 12.535573959350586, 12.536032676696777, 12.53593921661377, 12.53715705871582, 12.535874366760254, 12.535943031311035, 12.535807609558105, 12.535773277282715, 12.535787582397461, 12.535983085632324, 12.536016464233398, 12.536524772644043, 12.535970687866211, 12.535761833190918, 12.535588264465332, 12.536553382873535, 12.535967826843262, 12.53559398651123, 12.5361967086792, 12.536303520202637, 12.535937309265137, 12.535475730895996, 12.53577709197998, 12.535981178283691, 12.535622596740723, 12.536162376403809, 12.535649299621582, 12.535834312438965, 12.535948753356934, 12.536133766174316, 12.535656929016113, 12.535980224609375, 12.535862922668457, 12.53610897064209, 12.536094665527344, 12.535893440246582, 12.536175727844238, 12.536139488220215, 12.535821914672852, 12.535884857177734, 12.537196159362793, 12.53566837310791, 12.536141395568848, 12.536046028137207, 12.535687446594238, 12.536128044128418, 12.535922050476074, 12.53612232208252, 12.535914421081543, 12.536065101623535, 12.536064147949219, 12.53581714630127, 12.535609245300293, 12.53612995147705, 12.535687446594238, 12.53608226776123, 12.535874366760254, 12.535959243774414, 12.536065101623535, 12.535954475402832, 12.535964012145996, 12.535834312438965, 12.535874366760254, 12.536040306091309, 12.535933494567871, 12.536151885986328, 12.535759925842285, 12.535632133483887, 12.535573959350586, 12.536108016967773, 12.53549861907959, 12.536213874816895, 12.535874366760254, 12.536218643188477, 12.536083221435547, 12.536139488220215, 12.53604793548584, 12.536102294921875, 12.535468101501465, 12.535527229309082, 12.536120414733887, 12.536133766174316, 12.535807609558105, 12.536179542541504, 12.535938262939453, 12.535964012145996, 12.535712242126465, 12.536023139953613, 12.536091804504395, 12.535758018493652, 12.536065101623535, 12.536015510559082, 12.536038398742676, 12.536009788513184, 12.536137580871582, 12.535786628723145, 12.535748481750488, 12.53605842590332, 12.53601360321045, 12.535858154296875, 12.536154747009277, 12.535725593566895, 12.535486221313477, 12.535759925842285, 12.536160469055176, 12.535873413085938, 12.53596305847168, 12.535855293273926, 12.535994529724121, 12.53608512878418, 12.536070823669434, 12.535889625549316, 12.536039352416992, 12.536102294921875, 12.535988807678223, 12.536110877990723, 12.535822868347168, 12.535967826843262, 12.535468101501465, 12.535799980163574, 12.535894393920898, 12.535672187805176, 12.536083221435547, 12.535991668701172, 12.535758018493652, 12.53601360321045, 12.535920143127441, 12.5361328125, 12.535841941833496, 12.535808563232422, 12.536147117614746, 12.536141395568848, 12.535563468933105, 12.535918235778809, 12.535948753356934, 12.536089897155762, 12.535425186157227, 12.53552532196045, 12.535612106323242, 12.53587818145752, 12.53585147857666, 12.536031723022461, 12.53598403930664, 12.536142349243164, 12.53608226776123, 12.535894393920898, 12.535738945007324, 12.535719871520996, 12.535568237304688, 12.536008834838867, 12.536137580871582, 12.535492897033691, 12.536005973815918, 12.535906791687012, 12.535996437072754, 12.53581714630127, 12.536009788513184, 12.536019325256348, 12.536036491394043, 12.536049842834473, 12.535988807678223, 12.535853385925293, 12.535640716552734, 12.536182403564453, 12.535943031311035, 12.536105155944824, 12.535789489746094, 12.535412788391113, 12.535447120666504, 12.53613567352295, 12.535449981689453, 12.536126136779785, 12.535731315612793, 12.536065101623535, 12.536002159118652, 12.53589153289795, 12.535447120666504, 12.53605842590332, 12.536115646362305, 12.535923957824707, 12.536036491394043, 12.535908699035645, 12.536202430725098, 12.53600025177002, 12.53610897064209, 12.535651206970215, 12.535567283630371, 12.535712242126465, 12.535994529724121, 12.53614330291748, 12.53612232208252, 12.535930633544922, 12.536101341247559, 12.536123275756836, 12.535923957824707, 12.535967826843262, 12.536016464233398, 12.536200523376465, 12.535441398620605, 12.535820960998535, 12.53602123260498, 12.535828590393066, 12.5354642868042, 12.535499572753906, 12.535844802856445, 12.535985946655273, 12.536005973815918, 12.535996437072754, 12.536123275756836, 12.53585147857666, 12.536070823669434, 12.536139488220215, 12.535906791687012, 12.536202430725098, 12.536086082458496, 12.536023139953613, 12.5360746383667, 12.536138534545898, 12.536076545715332, 12.552369117736816, 12.535758018493652, 12.535840034484863, 12.536187171936035, 12.535534858703613, 12.536142349243164, 12.536076545715332, 12.53580379486084, 12.535758018493652, 12.536076545715332, 12.535603523254395, 12.535589218139648, 12.535903930664062, 12.53593921661377, 12.535941123962402, 12.536049842834473, 12.536673545837402, 12.536201477050781, 12.53613567352295, 12.53614330291748, 12.53617000579834, 12.535853385925293, 12.536160469055176, 12.535897254943848, 12.535937309265137, 12.53620433807373, 12.535975456237793, 12.535482406616211, 12.536175727844238, 12.535943984985352, 12.5360746383667, 12.536130905151367, 12.536112785339355, 12.536142349243164, 12.53613567352295, 12.536121368408203, 12.535479545593262, 12.535799980163574, 12.53597640991211, 12.535967826843262, 12.535719871520996, 12.53600788116455, 12.53564167022705, 12.53543758392334, 12.536087989807129, 12.536040306091309, 12.535759925842285, 12.53579044342041, 12.536072731018066, 12.535941123962402, 12.53581714630127, 12.535862922668457, 12.535696983337402, 12.536107063293457, 12.53594970703125, 12.535831451416016, 12.535834312438965, 12.536036491394043, 12.536833763122559, 12.53609561920166, 12.53604793548584, 12.53615951538086, 12.536049842834473, 12.535761833190918, 12.536194801330566, 12.53587532043457, 12.536070823669434, 12.535908699035645, 12.536083221435547, 12.535914421081543, 12.535687446594238, 12.53571605682373, 12.535865783691406, 12.536078453063965, 12.536147117614746, 12.535725593566895, 12.536154747009277, 12.536357879638672, 12.535551071166992, 12.536086082458496, 12.535990715026855, 12.53598690032959, 12.536181449890137, 12.536114692687988, 12.535903930664062, 12.536149024963379, 12.535958290100098, 12.536076545715332, 12.536160469055176, 12.535443305969238, 12.536103248596191, 12.536100387573242, 12.53596019744873, 12.535945892333984, 12.541629791259766, 12.53598690032959, 12.536042213439941, 12.535831451416016, 12.535829544067383, 12.536026000976562, 12.536171913146973, 12.535798072814941, 12.535439491271973, 12.53618335723877, 12.535954475402832, 12.536072731018066, 12.535826683044434, 12.5360746383667, 12.535975456237793, 12.53588581085205, 12.536067008972168, 12.535571098327637, 12.536051750183105, 12.535755157470703, 12.536097526550293, 12.535811424255371, 12.53580379486084, 12.535656929016113, 12.535401344299316, 12.535798072814941, 12.536054611206055, 12.53612995147705, 12.535901069641113, 12.535848617553711, 12.535658836364746, 12.53558349609375, 12.536054611206055, 12.53572940826416, 12.536087036132812, 12.535431861877441, 12.53576374053955, 12.535601615905762, 12.536103248596191, 12.535937309265137, 12.53620433807373, 12.535866737365723, 12.536175727844238, 12.535661697387695, 12.535860061645508, 12.535637855529785, 12.535945892333984, 12.536020278930664, 12.536123275756836, 12.536126136779785, 12.536099433898926, 12.536128044128418, 12.53618335723877, 12.536150932312012, 12.536145210266113, 12.536107063293457, 12.535771369934082, 12.535832405090332, 12.535552024841309, 12.536164283752441, 12.536107063293457, 12.536181449890137, 12.535398483276367, 12.535968780517578, 12.535994529724121, 12.535737037658691, 12.536130905151367, 12.535622596740723, 12.536726951599121, 12.53609848022461, 12.551966667175293, 12.53593921661377, 12.535604476928711, 12.53615665435791, 12.53592586517334, 12.535971641540527, 12.535897254943848, 12.536174774169922, 12.536062240600586, 12.535721778869629, 12.535507202148438, 12.535882949829102, 12.535845756530762, 12.535782814025879, 12.535904884338379, 12.535649299621582, 12.535660743713379, 12.53605842590332, 12.535937309265137, 12.535930633544922, 12.535696029663086, 12.536076545715332, 12.536087989807129, 12.535449981689453, 12.535731315612793, 12.535887718200684, 12.536178588867188, 12.53567123413086, 12.535738945007324, 12.535658836364746, 12.535840034484863, 12.535605430603027, 12.535651206970215, 12.535432815551758, 12.53589153289795, 12.535972595214844, 12.535938262939453, 12.536139488220215, 12.536187171936035, 12.535496711730957, 12.536040306091309, 12.544589042663574, 12.535808563232422, 12.535609245300293, 12.535908699035645, 12.536145210266113, 12.536049842834473, 12.535840034484863, 12.536114692687988, 12.536003112792969, 12.53598690032959, 12.536154747009277, 12.536116600036621, 12.535995483398438]
Actual: [tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([237.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19470.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([371.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([51.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2151.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([62.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 766811.5245712647
Predicted: [13.306700706481934, 13.3066987991333, 13.306710243225098, 13.306715965270996, 13.306714057922363, 13.306715965270996, 13.306700706481934, 13.306699752807617, 13.30671215057373, 13.30671215057373, 13.306681632995605, 13.306696891784668, 13.306711196899414, 13.306700706481934, 13.306705474853516, 13.306694030761719, 13.30669116973877, 13.306706428527832, 13.306706428527832, 13.306709289550781, 13.30671215057373, 13.306714057922363, 13.306714057922363, 13.306715965270996, 13.306714057922363, 13.306711196899414, 13.306708335876465, 13.306694984436035, 13.306714057922363, 13.306694984436035, 13.306709289550781, 13.306716918945312, 13.306706428527832, 13.3067045211792, 13.30671215057373, 13.306714057922363, 13.306702613830566, 13.306706428527832, 13.306705474853516, 13.306713104248047, 13.30671215057373, 13.306713104248047, 13.306709289550781, 13.306706428527832, 13.306703567504883, 13.306710243225098, 13.306714057922363, 13.306714057922363, 13.306710243225098, 13.306708335876465, 13.306713104248047, 13.306713104248047, 13.306708335876465, 13.306706428527832, 13.3067045211792, 13.30671501159668, 13.306715965270996, 13.306715965270996, 13.30671501159668, 13.306715965270996, 13.306720733642578, 13.306707382202148, 13.30671215057373, 13.3067045211792, 13.30671215057373, 13.306726455688477, 13.306708335876465, 13.306703567504883, 13.306708335876465, 13.306703567504883, 13.306711196899414, 13.306700706481934, 13.306702613830566, 13.306714057922363, 13.30671215057373, 13.30671215057373, 13.306718826293945, 13.306714057922363, 13.30671215057373, 13.30667781829834, 13.306694984436035, 13.306710243225098, 13.306710243225098, 13.306708335876465, 13.30670166015625, 13.306713104248047, 13.306694984436035, 13.306714057922363, 13.306714057922363, 13.306715965270996, 13.306714057922363, 13.306709289550781, 13.306711196899414, 13.306694030761719, 13.306700706481934, 13.306694984436035, 13.306702613830566, 13.306707382202148, 13.306713104248047, 13.30671501159668, 13.306714057922363, 13.30671215057373, 13.30669116973877, 13.30671215057373, 13.30669116973877, 13.306702613830566, 13.306714057922363, 13.30671501159668, 13.306708335876465, 13.306708335876465, 13.306714057922363, 13.306708335876465, 13.306769371032715, 13.306710243225098, 13.306702613830566, 13.306709289550781, 13.306714057922363, 13.3067045211792, 13.306709289550781, 13.314154624938965, 13.306703567504883, 13.306708335876465, 13.306707382202148, 13.306697845458984, 13.306714057922363, 13.30671501159668, 13.306706428527832, 13.306806564331055, 13.306700706481934, 13.306710243225098, 13.30671215057373, 13.306714057922363, 13.306711196899414, 13.306706428527832, 13.306716918945312, 13.306713104248047, 13.306714057922363, 13.30671215057373, 13.30671501159668, 13.306715965270996, 13.306710243225098, 13.306702613830566, 13.3066987991333, 13.306714057922363, 13.306708335876465, 13.316607475280762, 13.306702613830566, 13.306694984436035, 13.306715965270996, 13.306702613830566, 13.306702613830566, 13.306714057922363, 13.306700706481934, 13.306710243225098, 13.306710243225098, 13.306714057922363, 13.306714057922363, 13.306715965270996, 13.306714057922363, 13.306709289550781, 13.30669116973877, 13.306706428527832, 13.3067045211792, 13.30671501159668, 13.306706428527832, 13.306713104248047, 13.306702613830566, 13.306703567504883, 13.306693077087402, 13.30670166015625, 13.30671215057373, 13.3067045211792, 13.306689262390137, 13.30671501159668, 13.30671215057373, 13.306708335876465, 13.306714057922363, 13.3066987991333, 13.306674003601074, 13.306715965270996, 13.306708335876465, 13.306710243225098, 13.306713104248047, 13.306702613830566, 13.30671501159668, 13.306709289550781, 13.306711196899414, 13.3067045211792, 13.30671215057373, 13.306710243225098, 13.306708335876465, 13.3067045211792, 13.306699752807617, 13.30671215057373, 13.306710243225098, 13.306702613830566, 13.30671215057373, 13.30671501159668, 13.306699752807617, 13.306711196899414, 13.306687355041504, 13.30671215057373, 13.3067045211792, 13.306710243225098, 13.306687355041504, 13.30671215057373, 13.306687355041504, 13.306805610656738, 13.30671215057373, 13.30671215057373, 13.306714057922363, 13.3067045211792, 13.306696891784668, 13.306709289550781, 13.30671215057373, 13.306706428527832, 13.306696891784668, 13.306715965270996, 13.306708335876465, 13.306696891784668, 13.306694984436035, 13.30671215057373, 13.306714057922363, 13.306700706481934, 13.306714057922363, 13.306711196899414, 13.306705474853516, 13.306707382202148, 13.306714057922363, 13.30671215057373, 13.306705474853516, 13.306687355041504, 13.306696891784668, 13.306702613830566, 13.306715965270996, 13.306715965270996, 13.306715965270996, 13.306706428527832, 13.306707382202148, 13.30671215057373, 13.306710243225098, 13.306692123413086, 13.30671215057373, 13.3067045211792, 13.306707382202148, 13.3067045211792, 13.306702613830566, 13.30671215057373, 13.306708335876465, 13.306696891784668, 13.306708335876465, 13.3067045211792, 13.306674003601074, 13.306700706481934, 13.306715965270996, 13.306696891784668, 13.306707382202148, 13.306710243225098, 13.306666374206543, 13.306715965270996, 13.3067045211792, 13.306710243225098, 13.306708335876465, 13.30671501159668, 13.306710243225098, 13.3067045211792, 13.306715965270996, 13.306709289550781, 13.30671501159668, 13.306707382202148, 13.306713104248047, 13.306702613830566, 13.30671215057373, 13.30671215057373, 13.306709289550781, 13.306694984436035, 13.306708335876465, 13.30671215057373, 13.306700706481934, 13.306703567504883, 13.306709289550781, 13.306693077087402, 13.306708335876465, 13.3066987991333, 13.306685447692871, 13.306700706481934, 13.306702613830566, 13.306705474853516, 13.306830406188965, 13.306708335876465, 13.306714057922363, 13.30671215057373, 13.30671501159668, 13.306696891784668, 13.30671501159668, 13.306700706481934, 13.306715965270996, 13.306714057922363, 13.30671215057373, 13.306700706481934, 13.3066987991333, 13.306713104248047, 13.306715965270996, 13.30671501159668, 13.306709289550781, 13.306713104248047, 13.306700706481934, 13.3067045211792, 13.306714057922363, 13.306706428527832, 13.30701732635498, 13.30671215057373, 13.3066987991333, 13.306694984436035, 13.306710243225098, 13.30671215057373, 13.306710243225098, 13.306705474853516, 13.30671501159668, 13.306705474853516, 13.306700706481934, 13.30671215057373, 13.3067045211792, 13.306706428527832, 13.306702613830566, 13.30671215057373, 13.306710243225098, 13.306711196899414, 13.306714057922363, 13.30669116973877, 13.306713104248047, 13.306714057922363, 13.306703567504883, 13.306714057922363, 13.306695938110352, 13.3067045211792, 13.306714057922363, 13.306710243225098, 13.3066987991333, 13.306705474853516, 13.306706428527832, 13.306713104248047, 13.306709289550781, 13.306709289550781, 13.306710243225098, 13.306708335876465, 13.30671215057373, 13.3067045211792, 13.306715965270996, 13.306703567504883, 13.306715965270996, 13.306710243225098, 13.306709289550781, 13.306710243225098, 13.306685447692871, 13.316951751708984, 13.306711196899414, 13.306710243225098, 13.306714057922363, 13.306714057922363, 13.306700706481934, 13.30671501159668, 13.306696891784668, 13.30669116973877, 13.30671501159668, 13.306706428527832, 13.306709289550781, 13.306706428527832, 13.306714057922363, 13.306714057922363, 13.306700706481934, 13.306715965270996, 13.306709289550781, 13.3066987991333, 13.306711196899414, 13.3067045211792, 13.306716918945312, 13.30671501159668, 13.306714057922363, 13.306714057922363, 13.306710243225098, 13.306714057922363, 13.3066987991333, 13.3066987991333, 13.3066987991333, 13.306702613830566, 13.3067045211792, 13.306710243225098, 13.306714057922363, 13.306706428527832, 13.306709289550781, 13.306711196899414, 13.306709289550781, 13.306711196899414, 13.306696891784668, 13.306708335876465, 13.306716918945312, 13.30671501159668, 13.30671215057373, 13.306710243225098, 13.306769371032715, 13.306710243225098, 13.306707382202148, 13.30671215057373, 13.306706428527832, 13.30671215057373, 13.306709289550781, 13.306709289550781, 13.30671215057373, 13.30671215057373, 13.306706428527832, 13.306714057922363, 13.306710243225098, 13.306715965270996, 13.306715965270996, 13.306708335876465, 13.306714057922363, 13.306693077087402, 13.306697845458984, 13.30671501159668, 13.306711196899414, 13.30671215057373, 13.306694030761719, 13.30670166015625, 13.30666732788086, 13.306700706481934, 13.30667781829834, 13.306697845458984, 13.306689262390137, 13.30671215057373, 13.306700706481934, 13.3067045211792, 13.306711196899414, 13.30671215057373, 13.306715965270996, 13.306714057922363, 13.30671215057373, 13.30671215057373, 13.30671215057373, 13.306702613830566, 13.30671215057373, 13.306709289550781, 13.3067045211792, 13.306709289550781, 13.306702613830566, 13.30671215057373, 13.306716918945312, 13.306713104248047, 13.30671501159668, 13.30671215057373, 13.30671215057373, 13.306708335876465, 13.306699752807617, 13.306720733642578, 13.306714057922363, 13.30669116973877, 13.306708335876465, 13.307417869567871, 13.306710243225098, 13.306703567504883, 13.306710243225098, 13.3067045211792, 13.306683540344238, 13.306714057922363, 13.3066987991333, 13.306714057922363, 13.3067045211792, 13.30671215057373, 13.306715965270996, 13.306685447692871, 13.306706428527832, 13.306710243225098, 13.30671215057373, 13.30671501159668, 13.306713104248047, 13.306710243225098, 13.30671215057373, 13.306727409362793, 13.306715965270996, 13.30670166015625, 13.306708335876465, 13.30670166015625, 13.306711196899414, 13.306713104248047, 13.306710243225098, 13.30671215057373, 13.306706428527832, 13.306708335876465, 13.306699752807617, 13.306715965270996, 13.306709289550781, 13.306697845458984, 13.306709289550781, 13.306694984436035, 13.306707382202148, 13.30671215057373, 13.306711196899414, 13.306708335876465, 13.306708335876465, 13.306710243225098]
Actual: [tensor([1.], dtype=torch.float64), tensor([375.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([164.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([324.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([156.], dtype=torch.float64), tensor([49.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1525.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([24.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([399.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([40.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 5541.665612291999
Predicted: [13.670267105102539, 13.670270919799805, 13.670249938964844, 13.670270919799805, 13.670266151428223, 13.670269012451172, 13.670269966125488, 13.670267105102539, 13.670269012451172, 13.670270919799805, 13.670270919799805, 13.670272827148438, 13.670272827148438, 13.670270919799805, 13.670268058776855, 13.670269012451172, 13.670270919799805, 13.670271873474121, 13.670270919799805, 13.670270919799805, 13.67027473449707, 13.670225143432617, 13.670272827148438, 13.670272827148438, 13.670251846313477, 13.670272827148438, 13.670273780822754, 13.670270919799805, 13.670109748840332, 13.670272827148438, 13.67024040222168, 13.670230865478516, 13.670249938964844, 13.670269012451172, 13.670269012451172, 13.670270919799805, 13.670273780822754, 13.670260429382324, 13.67026424407959, 13.670269012451172, 13.670259475708008, 13.67025375366211, 13.670267105102539, 13.670272827148438, 13.670265197753906, 13.670270919799805, 13.670273780822754, 13.670270919799805, 13.670272827148438, 13.670269966125488, 13.670267105102539, 13.670267105102539, 13.670269012451172, 13.670265197753906, 13.670272827148438, 13.670270919799805, 13.670272827148438, 13.670272827148438, 13.670273780822754, 13.670272827148438, 13.670255661010742, 13.670271873474121, 13.670272827148438, 13.670272827148438, 13.670269012451172, 13.670269012451172, 13.670272827148438, 13.670269012451172, 13.670268058776855, 13.670249938964844, 13.670263290405273, 13.670260429382324, 13.670272827148438, 13.670255661010742, 13.670272827148438, 13.670251846313477, 13.670267105102539, 13.670272827148438, 13.670270919799805, 13.670272827148438, 13.67026138305664, 13.670270919799805, 13.670270919799805, 13.670268058776855, 13.670272827148438, 13.670270919799805, 13.670267105102539, 13.670228004455566, 13.670269012451172, 13.670242309570312, 13.670269012451172, 13.670267105102539, 13.670269012451172, 13.670272827148438, 13.670270919799805, 13.670269012451172, 13.67026138305664, 13.670238494873047, 13.670269012451172, 13.670269012451172, 13.670267105102539, 13.670272827148438, 13.670271873474121, 13.670270919799805, 13.670269012451172, 13.670269012451172, 13.670248031616211, 13.670268058776855, 13.670270919799805, 13.670271873474121, 13.669822692871094, 13.670270919799805, 13.670270919799805, 13.670257568359375, 13.670265197753906, 13.670272827148438, 13.670272827148438, 13.670272827148438, 13.670270919799805, 13.670270919799805, 13.670265197753906, 13.670270919799805, 13.670268058776855, 13.670269012451172, 13.670252799987793, 13.67027473449707, 13.670270919799805, 13.67025375366211, 13.670257568359375, 13.670259475708008, 13.67026424407959, 13.670272827148438, 13.670269012451172, 13.670269012451172, 13.670263290405273, 13.670272827148438, 13.670251846313477, 13.670269966125488, 13.670269012451172, 13.670206069946289, 13.670269012451172, 13.670267105102539, 13.670019149780273, 13.67026424407959, 13.670271873474121, 13.670271873474121, 13.670267105102539, 13.670267105102539, 13.67026138305664, 13.67026424407959, 13.670269012451172, 13.670272827148438, 13.670272827148438, 13.670272827148438, 13.670267105102539, 13.670255661010742, 13.670269012451172, 13.670272827148438, 13.670269012451172, 13.670269012451172, 13.670272827148438, 13.670266151428223, 13.670269012451172, 13.670270919799805, 13.670270919799805, 13.670267105102539, 13.670272827148438, 13.670248031616211, 13.67026138305664, 13.670269012451172, 13.67026138305664, 13.670272827148438, 13.670266151428223, 13.67026424407959, 13.670270919799805, 13.670270919799805, 13.670267105102539, 13.670256614685059, 13.670267105102539, 13.670269012451172, 13.670270919799805, 13.670267105102539, 13.670270919799805, 13.670265197753906, 13.670269012451172, 13.670272827148438, 13.67024040222168, 13.670257568359375, 13.670269012451172, 13.670272827148438, 13.670269012451172, 13.670272827148438, 13.670272827148438, 13.670267105102539, 13.670013427734375, 13.670265197753906, 13.670259475708008, 13.670270919799805, 13.670269012451172, 13.670269012451172, 13.670270919799805, 13.670272827148438, 13.67026138305664, 13.670272827148438, 13.670270919799805, 13.670249938964844, 13.670270919799805, 13.670269966125488, 13.670272827148438, 13.670272827148438, 13.670202255249023, 13.670270919799805, 13.670270919799805, 13.670265197753906, 13.67026424407959, 13.670248031616211, 13.67026138305664, 13.670271873474121, 13.670272827148438, 13.670267105102539, 13.670270919799805, 13.670270919799805, 13.670082092285156, 13.670269012451172, 13.670270919799805, 13.670269012451172, 13.670230865478516, 13.670271873474121, 13.67025375366211, 13.670267105102539, 13.670259475708008, 13.670272827148438, 13.670266151428223, 13.670272827148438, 13.670269012451172, 13.670272827148438, 13.670270919799805, 13.669845581054688, 13.670269012451172, 13.670263290405273, 13.670260429382324, 13.670273780822754, 13.670273780822754, 13.670251846313477, 13.670244216918945, 13.67026424407959, 13.67026138305664, 13.670269012451172, 13.670272827148438, 13.670273780822754, 13.670270919799805, 13.670267105102539, 13.670269012451172, 13.670238494873047, 13.670272827148438, 13.670263290405273, 13.670272827148438, 13.670246124267578, 13.670270919799805, 13.670272827148438, 13.670272827148438, 13.670244216918945, 13.670270919799805, 13.670272827148438, 13.670272827148438, 13.670269012451172, 13.67027473449707, 13.670273780822754, 13.670269012451172, 13.670270919799805, 13.670208930969238, 13.670272827148438, 13.670132637023926, 13.670269012451172, 13.670267105102539, 13.670272827148438, 13.67025375366211, 13.670255661010742, 13.670263290405273, 13.670256614685059, 13.670269012451172, 13.670263290405273, 13.670272827148438, 13.670270919799805, 13.670270919799805, 13.670270919799805, 13.670273780822754, 13.670270919799805, 13.67026424407959, 13.670259475708008, 13.670265197753906, 13.670259475708008, 13.670263290405273, 13.670272827148438, 13.670273780822754, 13.670269012451172, 13.670269012451172, 13.670269012451172, 13.670272827148438, 13.670270919799805, 13.670272827148438, 13.670259475708008, 13.670269966125488, 13.670269966125488, 13.670269012451172, 13.670272827148438, 13.670270919799805, 13.67026138305664, 13.670265197753906, 13.670272827148438, 13.670271873474121, 13.670267105102539, 13.670266151428223, 13.670272827148438, 13.67025375366211, 13.670267105102539, 13.670249938964844, 13.670087814331055, 13.67026424407959, 13.670266151428223, 13.670262336730957, 13.670271873474121, 13.670269012451172, 13.670269012451172, 13.67026138305664, 13.670269012451172, 13.67027473449707, 13.670262336730957, 13.670175552368164, 13.670272827148438, 13.670272827148438, 13.670269012451172, 13.670270919799805, 13.670269012451172, 13.670273780822754, 13.670246124267578, 13.670267105102539, 13.670257568359375, 13.670271873474121, 13.670272827148438, 13.67027473449707, 13.670269012451172, 13.670249938964844, 13.670270919799805, 13.670234680175781, 13.670249938964844, 13.670270919799805, 13.67026138305664, 13.670272827148438, 13.670265197753906, 13.670269966125488, 13.670270919799805, 13.67027473449707, 13.670251846313477, 13.670273780822754, 13.669926643371582, 13.670272827148438, 13.670272827148438, 13.670266151428223, 13.670272827148438, 13.670273780822754, 13.670273780822754, 13.670272827148438, 13.670272827148438, 13.670272827148438, 13.670259475708008, 13.670268058776855, 13.670164108276367, 13.670265197753906, 13.670267105102539, 13.670272827148438, 13.670272827148438, 13.670246124267578, 13.670272827148438, 13.670269012451172, 13.670269012451172, 13.670265197753906, 13.670269012451172, 13.670266151428223, 13.670267105102539, 13.670272827148438, 13.670265197753906, 13.670271873474121, 13.670272827148438, 13.670269012451172, 13.670122146606445, 13.670270919799805, 13.670272827148438, 13.67022705078125, 13.670271873474121, 13.670272827148438, 13.670257568359375, 13.670272827148438, 13.67026424407959, 13.670272827148438, 13.670272827148438, 13.670272827148438, 13.670266151428223, 13.670272827148438, 13.670270919799805, 13.670198440551758, 13.670270919799805, 13.670268058776855, 13.670272827148438, 13.670271873474121, 13.670249938964844, 13.670270919799805, 13.670269012451172, 13.670270919799805, 13.670272827148438, 13.670272827148438, 13.670042037963867, 13.670257568359375, 13.670021057128906, 13.670108795166016, 13.670267105102539, 13.670267105102539, 13.670269012451172, 13.670269012451172, 13.670186996459961, 13.670262336730957, 13.670273780822754, 13.670269012451172, 13.670265197753906, 13.670270919799805, 13.66981029510498, 13.670272827148438, 13.669947624206543, 13.670260429382324, 13.670272827148438, 13.670236587524414, 13.670269012451172, 13.670119285583496, 13.670266151428223, 13.670272827148438, 13.670272827148438, 13.670270919799805, 13.670267105102539, 13.670270919799805, 13.670269966125488, 13.670263290405273, 13.670273780822754, 13.670270919799805, 13.67025375366211, 13.67026424407959, 13.67027473449707, 13.670272827148438, 13.670269012451172, 13.67025089263916, 13.670265197753906, 13.670256614685059, 13.670265197753906, 13.670272827148438, 13.670254707336426, 13.670272827148438, 13.670221328735352, 13.670262336730957, 13.670259475708008, 13.670267105102539, 13.670259475708008, 13.670270919799805, 13.67026138305664, 13.670256614685059, 13.670257568359375, 13.670271873474121, 13.670272827148438, 13.670273780822754, 13.670270919799805, 13.670272827148438, 13.670270919799805, 13.670272827148438, 13.670180320739746, 13.670269012451172, 13.67026138305664, 13.670269012451172, 13.670265197753906, 13.670270919799805, 13.670272827148438, 13.670270919799805, 13.670270919799805, 13.670262336730957, 13.670272827148438, 13.670245170593262, 13.670272827148438, 13.670269012451172, 13.670269012451172, 13.670272827148438, 13.670270919799805, 13.670271873474121, 13.670263290405273, 13.670270919799805, 13.670272827148438, 13.670263290405273, 13.670272827148438, 13.670272827148438, 13.670269966125488, 13.670270919799805, 13.670270919799805, 13.670273780822754, 13.670267105102539]
Actual: [tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([42.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([28.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([21.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([21.], dtype=torch.float64)]
MSE: 144.82118489946828
Predicted: [12.319032669067383, 12.319023132324219, 12.3190336227417, 12.319034576416016, 12.319023132324219, 12.319035530090332, 12.319031715393066, 12.319026947021484, 12.318999290466309, 12.319034576416016, 12.319018363952637, 12.319024085998535, 12.3190336227417, 12.319024085998535, 12.319025993347168, 12.31902027130127, 12.319034576416016, 12.319031715393066, 12.319031715393066, 12.319025993347168, 12.319014549255371, 12.319009780883789, 12.319003105163574, 12.319032669067383, 12.3190336227417, 12.3190279006958, 12.319023132324219, 12.319032669067383, 12.319035530090332, 12.319031715393066, 12.319024085998535, 12.3190279006958, 12.319034576416016, 12.319024085998535, 12.3190279006958, 12.319016456604004, 12.318921089172363, 12.319022178649902, 12.319029808044434, 12.319035530090332, 12.318962097167969, 12.319034576416016, 12.319032669067383, 12.318979263305664, 12.319023132324219, 12.319031715393066, 12.319011688232422, 12.319025039672852, 12.318953514099121, 12.318963050842285, 12.3190336227417, 12.319035530090332, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.3190336227417, 12.319018363952637, 12.319034576416016, 12.319035530090332, 12.3190336227417, 12.3190336227417, 12.31900691986084, 12.319014549255371, 12.3190279006958, 12.319028854370117, 12.3190336227417, 12.319032669067383, 12.319025993347168, 12.319022178649902, 12.3190336227417, 12.3190336227417, 12.319029808044434, 12.319029808044434, 12.3190336227417, 12.318941116333008, 12.319028854370117, 12.321234703063965, 12.3190336227417, 12.319034576416016, 12.3190336227417, 12.319024085998535, 12.319032669067383, 12.3190336227417, 12.319034576416016, 12.319016456604004, 12.3190336227417, 12.319032669067383, 12.319032669067383, 12.318999290466309, 12.3190336227417, 12.319035530090332, 12.319034576416016, 12.31901741027832, 12.319031715393066, 12.319032669067383, 12.319032669067383, 12.319032669067383, 12.319022178649902, 12.319035530090332, 12.319026947021484, 12.3190336227417, 12.319035530090332, 12.319031715393066, 12.3190336227417, 12.319010734558105, 12.318991661071777, 12.318982124328613, 12.319031715393066, 12.319028854370117, 12.319018363952637, 12.319034576416016, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.319034576416016, 12.3190336227417, 12.31903076171875, 12.3190336227417, 12.319029808044434, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.319025993347168, 12.319008827209473, 12.319026947021484, 12.3190336227417, 12.31902027130127, 12.318928718566895, 12.319031715393066, 12.319034576416016, 12.318974494934082, 12.3190336227417, 12.319025993347168, 12.319032669067383, 12.319035530090332, 12.319025993347168, 12.319031715393066, 12.3190336227417, 12.319031715393066, 12.319035530090332, 12.319023132324219, 12.3190336227417, 12.3189115524292, 12.319035530090332, 12.3190336227417, 12.319026947021484, 12.31898021697998, 12.319025039672852, 12.3190336227417, 12.319031715393066, 12.3190279006958, 12.319031715393066, 12.319032669067383, 12.319028854370117, 12.3190336227417, 12.319021224975586, 12.319032669067383, 12.318971633911133, 12.319032669067383, 12.322331428527832, 12.319029808044434, 12.319028854370117, 12.319029808044434, 12.319025993347168, 12.3190336227417, 12.319034576416016, 12.319024085998535, 12.319005012512207, 12.319034576416016, 12.319032669067383, 12.319029808044434, 12.3190336227417, 12.3190279006958, 12.319581031799316, 12.319035530090332, 12.3190336227417, 12.3190336227417, 12.319026947021484, 12.319031715393066, 12.319034576416016, 12.319034576416016, 12.3190336227417, 12.3190336227417, 12.318984985351562, 12.3190279006958, 12.3190336227417, 12.3190336227417, 12.31902027130127, 12.319023132324219, 12.3190336227417, 12.3190336227417, 12.319029808044434, 12.319031715393066, 12.319018363952637, 12.3190336227417, 12.319032669067383, 12.319034576416016, 12.319034576416016, 12.3190336227417, 12.31900691986084, 12.319029808044434, 12.31903076171875, 12.319031715393066, 12.319034576416016, 12.3190336227417, 12.319031715393066, 12.319024085998535, 12.31900405883789, 12.319035530090332, 12.319029808044434, 12.319029808044434, 12.3190336227417, 12.31902027130127, 12.319034576416016, 12.319032669067383, 12.31903076171875, 12.319022178649902, 12.319031715393066, 12.3190279006958, 12.319025993347168, 12.319032669067383, 12.319034576416016, 12.319029808044434, 12.319029808044434, 12.3190336227417, 12.319031715393066, 12.318964958190918, 12.319029808044434, 12.319029808044434, 12.31903076171875, 12.3190336227417, 12.31901741027832, 12.319024085998535, 12.319035530090332, 12.31901741027832, 12.3190336227417, 12.319035530090332, 12.318995475769043, 12.3190336227417, 12.319034576416016, 12.319035530090332, 12.319035530090332, 12.319026947021484, 12.319031715393066, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.31903076171875, 12.319034576416016, 12.319031715393066, 12.319032669067383, 12.3190336227417, 12.319029808044434, 12.319034576416016, 12.319034576416016, 12.3190336227417, 12.318994522094727, 12.319034576416016, 12.319025993347168, 12.3190336227417, 12.319034576416016, 12.3190336227417, 12.319029808044434, 12.3190279006958, 12.31899356842041, 12.319031715393066, 12.318951606750488, 12.319007873535156, 12.318963050842285, 12.319022178649902, 12.31902027130127, 12.319029808044434, 12.31902027130127, 12.319029808044434, 12.319018363952637, 12.319034576416016, 12.319032669067383, 12.319010734558105, 12.318999290466309, 12.319021224975586, 12.31902027130127, 12.3190336227417, 12.319029808044434, 12.319031715393066, 12.319031715393066, 12.319031715393066, 12.319032669067383, 12.319035530090332, 12.3190336227417, 12.31903076171875, 12.3190336227417, 12.319034576416016, 12.319012641906738, 12.319035530090332, 12.319022178649902, 12.319029808044434, 12.3190279006958, 12.3190336227417, 12.319031715393066, 12.319029808044434, 12.319022178649902, 12.3190336227417, 12.3190279006958, 12.3190336227417, 12.319032669067383, 12.319029808044434, 12.31903076171875, 12.3190336227417, 12.319032669067383, 12.31902027130127, 12.3190279006958, 12.319031715393066, 12.319031715393066, 12.319035530090332, 12.31894588470459, 12.31903076171875, 12.319024085998535, 12.319031715393066, 12.318953514099121, 12.319031715393066, 12.3190336227417, 12.319029808044434, 12.319025993347168, 12.319025039672852, 12.319008827209473, 12.3190336227417, 12.319013595581055, 12.319032669067383, 12.3190279006958, 12.3190336227417, 12.318976402282715, 12.319035530090332, 12.319031715393066, 12.319028854370117, 12.319035530090332, 12.319029808044434, 12.319034576416016, 12.31903076171875, 12.319032669067383, 12.3190336227417, 12.319034576416016, 12.319008827209473, 12.319029808044434, 12.319034576416016, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.319035530090332, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.319023132324219, 12.319023132324219, 12.3190336227417, 12.3190336227417, 12.319034576416016, 12.319031715393066, 12.319014549255371, 12.31896686553955, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.319029808044434, 12.318940162658691, 12.3190336227417, 12.319031715393066, 12.319035530090332, 12.319034576416016, 12.319025993347168, 12.319037437438965, 12.319032669067383, 12.319031715393066, 12.3190336227417, 12.319031715393066, 12.319034576416016, 12.3190336227417, 12.319003105163574, 12.319026947021484, 12.318986892700195, 12.3190336227417, 12.319034576416016, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.319016456604004, 12.319034576416016, 12.3190279006958, 12.319031715393066, 12.3190279006958, 12.3190336227417, 12.3190336227417, 12.319021224975586, 12.3190279006958, 12.3190336227417, 12.319024085998535, 12.319034576416016, 12.319029808044434, 12.319035530090332, 12.3190336227417, 12.319034576416016, 12.319031715393066, 12.319029808044434, 12.3190279006958, 12.319035530090332, 12.319034576416016, 12.3190336227417, 12.3190336227417, 12.319032669067383, 12.319032669067383, 12.3190336227417, 12.319275856018066, 12.319031715393066, 12.3190336227417, 12.319031715393066, 12.319025039672852, 12.319031715393066, 12.319021224975586, 12.3190336227417, 12.319024085998535, 12.3190336227417, 12.318978309631348, 12.319025993347168, 12.3190336227417, 12.31895923614502, 12.319035530090332, 12.3190336227417, 12.319024085998535, 12.319016456604004, 12.319025993347168, 12.319034576416016, 12.3190336227417, 12.319032669067383, 12.31903076171875, 12.319005012512207, 12.31903076171875, 12.3190336227417, 12.3190336227417, 12.319025039672852, 12.319034576416016, 12.319034576416016, 12.318979263305664, 12.31900691986084, 12.319007873535156, 12.319032669067383, 12.319014549255371, 12.319031715393066, 12.319034576416016, 12.319029808044434, 12.319024085998535, 12.319031715393066, 12.319005966186523, 12.319032669067383, 12.3190336227417, 12.319031715393066, 12.319034576416016, 12.318987846374512, 12.318989753723145, 12.319032669067383, 12.3190336227417, 12.319031715393066, 12.3190336227417, 12.319034576416016, 12.319029808044434, 12.319029808044434, 12.319029808044434, 12.319028854370117, 12.3190279006958, 12.319031715393066, 12.318977355957031, 12.319031715393066, 12.3190336227417, 12.319011688232422, 12.319010734558105, 12.31903076171875, 12.319035530090332, 12.318989753723145, 12.3190336227417, 12.319034576416016, 12.319031715393066, 12.319022178649902, 12.319031715393066, 12.319031715393066, 12.3190336227417, 12.319035530090332, 12.319032669067383, 12.319034576416016, 12.3190336227417, 12.3190336227417, 12.319014549255371, 12.319029808044434, 12.319010734558105, 12.319025039672852, 12.3190336227417, 12.3190336227417, 12.3190336227417, 12.319035530090332, 12.3190279006958, 12.319032669067383]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([29.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([39.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([70.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([26.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([151.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([499.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 634.6338013690059
Predicted: [13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.40034008026123, 13.400341987609863, 13.40034008026123, 13.400339126586914, 13.400341033935547, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400345802307129, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400338172912598, 13.400456428527832, 13.400341033935547, 13.400341033935547, 13.40034008026123, 13.400339126586914, 13.400343894958496, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400341987609863, 13.400339126586914, 13.400339126586914, 13.400343894958496, 13.40034008026123, 13.40034008026123, 13.400416374206543, 13.400339126586914, 13.400341987609863, 13.40034008026123, 13.40034008026123, 13.400341987609863, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.400343894958496, 13.40034294128418, 13.400338172912598, 13.40034008026123, 13.400343894958496, 13.400339126586914, 13.40139389038086, 13.40034008026123, 13.400338172912598, 13.400343894958496, 13.400341987609863, 13.400339126586914, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.400350570678711, 13.400347709655762, 13.400339126586914, 13.400343894958496, 13.400347709655762, 13.400341033935547, 13.40035343170166, 13.400343894958496, 13.400348663330078, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400339126586914, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400338172912598, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.400343894958496, 13.400341987609863, 13.400339126586914, 13.40034008026123, 13.400343894958496, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.40035343170166, 13.400341033935547, 13.400339126586914, 13.400339126586914, 13.400352478027344, 13.400339126586914, 13.400341987609863, 13.40034294128418, 13.400343894958496, 13.400338172912598, 13.400343894958496, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400343894958496, 13.400422096252441, 13.400341033935547, 13.400347709655762, 13.400389671325684, 13.400343894958496, 13.40035343170166, 13.40035343170166, 13.400345802307129, 13.40034008026123, 13.400339126586914, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.400338172912598, 13.400351524353027, 13.400343894958496, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400341987609863, 13.400347709655762, 13.400339126586914, 13.40034294128418, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400338172912598, 13.400338172912598, 13.400352478027344, 13.400338172912598, 13.400338172912598, 13.400341987609863, 13.400341987609863, 13.400341033935547, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400345802307129, 13.40034008026123, 13.400341033935547, 13.400338172912598, 13.400343894958496, 13.400341033935547, 13.400339126586914, 13.400345802307129, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400341987609863, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.400416374206543, 13.40034008026123, 13.400355339050293, 13.400341987609863, 13.400343894958496, 13.400339126586914, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.40034294128418, 13.400338172912598, 13.400341987609863, 13.40034008026123, 13.400338172912598, 13.400341033935547, 13.400338172912598, 13.400338172912598, 13.400349617004395, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400347709655762, 13.400339126586914, 13.400341987609863, 13.400338172912598, 13.400358200073242, 13.400341987609863, 13.40034008026123, 13.400338172912598, 13.400338172912598, 13.400341987609863, 13.400345802307129, 13.400341987609863, 13.40034008026123, 13.40034008026123, 13.40034294128418, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.400341033935547, 13.400341987609863, 13.400339126586914, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.400343894958496, 13.400339126586914, 13.400339126586914, 13.400343894958496, 13.400369644165039, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400341033935547, 13.40034008026123, 13.40034294128418, 13.40034008026123, 13.400437355041504, 13.400343894958496, 13.400339126586914, 13.400338172912598, 13.400339126586914, 13.400341987609863, 13.400349617004395, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400359153747559, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400390625, 13.400338172912598, 13.400338172912598, 13.400338172912598, 13.400341033935547, 13.400338172912598, 13.400339126586914, 13.40034008026123, 13.400338172912598, 13.400345802307129, 13.40034008026123, 13.400338172912598, 13.400341987609863, 13.400372505187988, 13.400343894958496, 13.40034008026123, 13.40034008026123, 13.400351524353027, 13.400345802307129, 13.400339126586914, 13.40034008026123, 13.400338172912598, 13.40035343170166, 13.400338172912598, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.40034294128418, 13.401714324951172, 13.400338172912598, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400347709655762, 13.400357246398926, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400338172912598, 13.400347709655762, 13.40034008026123, 13.400404930114746, 13.400338172912598, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.400341033935547, 13.400338172912598, 13.400339126586914, 13.40034008026123, 13.400339126586914, 13.400345802307129, 13.400358200073242, 13.40034008026123, 13.400345802307129, 13.40034294128418, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.40034008026123, 13.400339126586914, 13.400339126586914, 13.400341987609863, 13.400341987609863, 13.400347709655762, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400346755981445, 13.400339126586914, 13.400343894958496, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400338172912598, 13.400341987609863, 13.400341987609863, 13.400339126586914, 13.400355339050293, 13.400349617004395, 13.400338172912598, 13.40034008026123, 13.400338172912598, 13.400341033935547, 13.400338172912598, 13.400339126586914, 13.40034008026123, 13.400528907775879, 13.400341987609863, 13.40034008026123, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.400347709655762, 13.400357246398926, 13.400338172912598, 13.400338172912598, 13.400338172912598, 13.400341033935547, 13.400338172912598, 13.400338172912598, 13.400374412536621, 13.400338172912598, 13.400343894958496, 13.400339126586914, 13.400343894958496, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400341987609863, 13.400339126586914, 13.40034008026123, 13.400351524353027, 13.400339126586914, 13.400370597839355, 13.400383949279785, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.400341987609863, 13.400339126586914, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.400341987609863, 13.400339126586914, 13.40034008026123, 13.400339126586914, 13.400341033935547, 13.400344848632812, 13.400339126586914, 13.400341987609863, 13.400338172912598, 13.400348663330078, 13.400339126586914, 13.400351524353027, 13.400346755981445, 13.400338172912598, 13.40034294128418, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.400354385375977, 13.40034008026123, 13.400338172912598, 13.400348663330078, 13.40034008026123, 13.400341033935547, 13.400341033935547, 13.400343894958496, 13.400338172912598, 13.400341033935547, 13.400338172912598, 13.400345802307129, 13.400341987609863, 13.400345802307129, 13.400339126586914, 13.400339126586914, 13.400341033935547, 13.40034008026123, 13.40034294128418, 13.400338172912598, 13.400355339050293, 13.40034008026123, 13.400339126586914, 13.400341033935547, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.40034008026123, 13.400343894958496, 13.400341033935547, 13.40034008026123, 13.400341987609863, 13.40034008026123, 13.400338172912598, 13.400339126586914, 13.400341987609863, 13.400339126586914, 13.40034008026123, 13.400341033935547, 13.400338172912598, 13.400341033935547, 13.400338172912598, 13.400338172912598, 13.400339126586914, 13.400339126586914, 13.400338172912598, 13.40034008026123, 13.400339126586914, 13.40035343170166, 13.40034008026123, 13.400344848632812, 13.40034008026123, 13.400341987609863, 13.40034008026123, 13.400338172912598, 13.40034008026123, 13.40034008026123, 13.400355339050293, 13.400339126586914, 13.400364875793457, 13.400341987609863, 13.40034008026123, 13.400345802307129, 13.400345802307129, 13.40058422088623, 13.40034008026123, 13.40034008026123, 13.400341987609863, 13.400466918945312, 13.400339126586914]
Actual: [tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2414.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([69.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([161.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64)]
MSE: 11707.766607136946
Predicted: [12.687416076660156, 12.687335014343262, 12.687321662902832, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687325477600098, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687324523925781, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687323570251465, 12.6873197555542, 12.687320709228516, 12.687320709228516, 12.68732738494873, 12.687321662902832, 12.687325477600098, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.6873197555542, 12.687359809875488, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.687321662902832, 12.68734073638916, 12.6873197555542, 12.6873197555542, 12.687325477600098, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.687427520751953, 12.687320709228516, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687339782714844, 12.687320709228516, 12.687326431274414, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.68733024597168, 12.687322616577148, 12.687342643737793, 12.6873197555542, 12.687321662902832, 12.687320709228516, 12.6873197555542, 12.687326431274414, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.68734073638916, 12.687329292297363, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.687324523925781, 12.6873197555542, 12.687321662902832, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.68732738494873, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.687320709228516, 12.687321662902832, 12.687325477600098, 12.687331199645996, 12.6873197555542, 12.6873197555542, 12.687326431274414, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687349319458008, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687324523925781, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.687320709228516, 12.687325477600098, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687326431274414, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687325477600098, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.68733024597168, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687329292297363, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.68838119506836, 12.6873197555542, 12.687334060668945, 12.6873197555542, 12.687331199645996, 12.687321662902832, 12.687322616577148, 12.687321662902832, 12.687322616577148, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.687321662902832, 12.687320709228516, 12.687323570251465, 12.6873197555542, 12.68732738494873, 12.687321662902832, 12.687320709228516, 12.687320709228516, 12.687321662902832, 12.687320709228516, 12.687322616577148, 12.687325477600098, 12.6873197555542, 12.687381744384766, 12.687338829040527, 12.687321662902832, 12.687323570251465, 12.687321662902832, 12.687321662902832, 12.687342643737793, 12.687321662902832, 12.687463760375977, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687320709228516, 12.687329292297363, 12.687379837036133, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.687321662902832, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687378883361816, 12.687324523925781, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.687325477600098, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687320709228516, 12.687326431274414, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687329292297363, 12.6873197555542, 12.6873197555542, 12.68732738494873, 12.687326431274414, 12.6873197555542, 12.687338829040527, 12.687321662902832, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.687320709228516, 12.6873197555542, 12.68733024597168, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687323570251465, 12.687406539916992, 12.687320709228516, 12.687321662902832, 12.687322616577148, 12.6873197555542, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.687321662902832, 12.68732738494873, 12.6873197555542, 12.687392234802246, 12.687325477600098, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687323570251465, 12.68802261352539, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.687321662902832, 12.687397956848145, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687322616577148, 12.6873197555542, 12.687321662902832, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.68732738494873, 12.687329292297363, 12.687324523925781, 12.687321662902832, 12.687323570251465, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.68732738494873, 12.6873197555542, 12.6873197555542, 12.687324523925781, 12.6873197555542, 12.687325477600098, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687322616577148, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.687324523925781, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687321662902832, 12.687320709228516, 12.68733024597168, 12.6873197555542, 12.687325477600098, 12.687326431274414, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687320709228516, 12.687320709228516, 12.687323570251465, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687325477600098, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687346458435059, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687323570251465, 12.687325477600098, 12.687325477600098, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.687322616577148, 12.687357902526855, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687320709228516, 12.6873197555542, 12.687323570251465, 12.687320709228516, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.687325477600098, 12.6873197555542, 12.6873197555542, 12.68732738494873, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687320709228516, 12.687320709228516, 12.687321662902832, 12.687325477600098, 12.687322616577148, 12.687348365783691, 12.6873197555542, 12.687323570251465, 12.687320709228516, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.687321662902832, 12.687323570251465, 12.6873197555542, 12.687347412109375, 12.687323570251465, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.6873197555542, 12.687321662902832, 12.687320709228516, 12.687321662902832, 12.687320709228516, 12.687323570251465, 12.6873197555542, 12.687331199645996, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.6873197555542, 12.6873197555542, 12.687320709228516, 12.687321662902832, 12.6873197555542, 12.687323570251465, 12.6873197555542, 12.687320709228516, 12.6873197555542]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([945.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([25.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([17.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64)]
MSE: 1853.49925984281
Predicted: [13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611159324645996, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611159324645996, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.61115837097168, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611157417297363, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611159324645996, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611170768737793, 13.611161231994629, 13.611159324645996, 13.611161231994629, 13.611160278320312, 13.611159324645996, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.61115837097168, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611165046691895, 13.611160278320312, 13.61115550994873, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611159324645996, 13.611159324645996, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611159324645996, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611159324645996, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611157417297363, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.61115837097168, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.61115837097168, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611159324645996, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611162185668945, 13.611161231994629, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611162185668945, 13.611160278320312, 13.61115837097168, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611166000366211, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611536979675293, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611162185668945, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611159324645996, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611160278320312, 13.611161231994629, 13.611161231994629, 13.611161231994629, 13.611160278320312, 13.611159324645996, 13.611161231994629, 13.611161231994629]
Actual: [tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([15.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([34.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([54.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([83.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([55.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([74.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([68.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64)]
MSE: 168.28831935143745
Predicted: [14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222827911376953, 14.222814559936523, 14.222814559936523, 14.22321605682373, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222872734069824, 14.222814559936523, 14.222911834716797, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222820281982422, 14.222814559936523, 14.222816467285156, 14.22281551361084, 14.222814559936523, 14.222966194152832, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222821235656738, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222860336303711, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222817420959473, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222829818725586, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222945213317871, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.223318099975586, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222817420959473, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.22281551361084, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222822189331055, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222817420959473, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222816467285156, 14.222841262817383, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222820281982422, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222819328308105, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222817420959473, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222829818725586, 14.22281551361084, 14.22281551361084, 14.222820281982422, 14.222816467285156, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222848892211914, 14.22281551361084, 14.222820281982422, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222832679748535, 14.222816467285156, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222822189331055, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.22281551361084, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222825050354004, 14.222816467285156, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222818374633789, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222818374633789, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222817420959473, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222823143005371, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.22281551361084, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222816467285156, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523, 14.222814559936523]
Actual: [tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([57.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([25950.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([102.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([50.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([22.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([143.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([10.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([23.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2883.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([43.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([30.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([65.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 1362005.0523630015
Predicted: [15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257022857666, 15.172572135925293, 15.17257308959961, 15.172572135925293, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.172572135925293, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.172571182250977, 15.172568321228027, 15.172572135925293, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172572135925293, 15.172571182250977, 15.17257308959961, 15.172569274902344, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172598838806152, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172569274902344, 15.17257308959961, 15.17257308959961, 15.172624588012695, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172572135925293, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172568321228027, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.172569274902344, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172574043273926, 15.172572135925293, 15.17257308959961, 15.172568321228027, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257022857666, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.172572135925293, 15.172572135925293, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961, 15.172571182250977, 15.172571182250977, 15.17257308959961, 15.17257308959961, 15.17257308959961]
Actual: [tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([18.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([11.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([31.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([12.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([13.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([8.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([7.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([14.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([19.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([299.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2968.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([2.], dtype=torch.float64), tensor([6.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([16.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([5.], dtype=torch.float64), tensor([4.], dtype=torch.float64), tensor([0.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([1.], dtype=torch.float64), tensor([3.], dtype=torch.float64), tensor([9.], dtype=torch.float64), tensor([1.], dtype=torch.float64)]
MSE: 17777.50389972008
